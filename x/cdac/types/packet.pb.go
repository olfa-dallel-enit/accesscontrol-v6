// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cdac/packet.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CdacPacketData struct {
	// Types that are valid to be assigned to Packet:
	//	*CdacPacketData_NoData
	//	*CdacPacketData_PublishProofListPacket
	//	*CdacPacketData_RevokeCooperationPacket
	//	*CdacPacketData_ModifyCooperationInterestPacket
	//	*CdacPacketData_ModifyCooperationValidityPacket
	//	*CdacPacketData_EnableCooperationPacket
	//	*CdacPacketData_DisableCooperationPacket
	//	*CdacPacketData_ModifyCooperationCostPacket
	//	*CdacPacketData_ExchangeCooperationDataPacket
	//	*CdacPacketData_ForwardCooperationDataPacket
	//	*CdacPacketData_EstablishCooperationPacket
	//	*CdacPacketData_AuthenticateDomainPacket
	Packet isCdacPacketData_Packet `protobuf_oneof:"packet"`
}

func (m *CdacPacketData) Reset()         { *m = CdacPacketData{} }
func (m *CdacPacketData) String() string { return proto.CompactTextString(m) }
func (*CdacPacketData) ProtoMessage()    {}
func (*CdacPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{0}
}
func (m *CdacPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CdacPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CdacPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CdacPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CdacPacketData.Merge(m, src)
}
func (m *CdacPacketData) XXX_Size() int {
	return m.Size()
}
func (m *CdacPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_CdacPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_CdacPacketData proto.InternalMessageInfo

type isCdacPacketData_Packet interface {
	isCdacPacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CdacPacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof" json:"noData,omitempty"`
}
type CdacPacketData_PublishProofListPacket struct {
	PublishProofListPacket *PublishProofListPacketData `protobuf:"bytes,12,opt,name=publishProofListPacket,proto3,oneof" json:"publishProofListPacket,omitempty"`
}
type CdacPacketData_RevokeCooperationPacket struct {
	RevokeCooperationPacket *RevokeCooperationPacketData `protobuf:"bytes,11,opt,name=revokeCooperationPacket,proto3,oneof" json:"revokeCooperationPacket,omitempty"`
}
type CdacPacketData_ModifyCooperationInterestPacket struct {
	ModifyCooperationInterestPacket *ModifyCooperationInterestPacketData `protobuf:"bytes,10,opt,name=modifyCooperationInterestPacket,proto3,oneof" json:"modifyCooperationInterestPacket,omitempty"`
}
type CdacPacketData_ModifyCooperationValidityPacket struct {
	ModifyCooperationValidityPacket *ModifyCooperationValidityPacketData `protobuf:"bytes,9,opt,name=modifyCooperationValidityPacket,proto3,oneof" json:"modifyCooperationValidityPacket,omitempty"`
}
type CdacPacketData_EnableCooperationPacket struct {
	EnableCooperationPacket *EnableCooperationPacketData `protobuf:"bytes,8,opt,name=enableCooperationPacket,proto3,oneof" json:"enableCooperationPacket,omitempty"`
}
type CdacPacketData_DisableCooperationPacket struct {
	DisableCooperationPacket *DisableCooperationPacketData `protobuf:"bytes,7,opt,name=disableCooperationPacket,proto3,oneof" json:"disableCooperationPacket,omitempty"`
}
type CdacPacketData_ModifyCooperationCostPacket struct {
	ModifyCooperationCostPacket *ModifyCooperationCostPacketData `protobuf:"bytes,6,opt,name=modifyCooperationCostPacket,proto3,oneof" json:"modifyCooperationCostPacket,omitempty"`
}
type CdacPacketData_ExchangeCooperationDataPacket struct {
	ExchangeCooperationDataPacket *ExchangeCooperationDataPacketData `protobuf:"bytes,5,opt,name=exchangeCooperationDataPacket,proto3,oneof" json:"exchangeCooperationDataPacket,omitempty"`
}
type CdacPacketData_ForwardCooperationDataPacket struct {
	ForwardCooperationDataPacket *ForwardCooperationDataPacketData `protobuf:"bytes,4,opt,name=forwardCooperationDataPacket,proto3,oneof" json:"forwardCooperationDataPacket,omitempty"`
}
type CdacPacketData_EstablishCooperationPacket struct {
	EstablishCooperationPacket *EstablishCooperationPacketData `protobuf:"bytes,3,opt,name=establishCooperationPacket,proto3,oneof" json:"establishCooperationPacket,omitempty"`
}
type CdacPacketData_AuthenticateDomainPacket struct {
	AuthenticateDomainPacket *AuthenticateDomainPacketData `protobuf:"bytes,2,opt,name=authenticateDomainPacket,proto3,oneof" json:"authenticateDomainPacket,omitempty"`
}

func (*CdacPacketData_NoData) isCdacPacketData_Packet()                          {}
func (*CdacPacketData_PublishProofListPacket) isCdacPacketData_Packet()          {}
func (*CdacPacketData_RevokeCooperationPacket) isCdacPacketData_Packet()         {}
func (*CdacPacketData_ModifyCooperationInterestPacket) isCdacPacketData_Packet() {}
func (*CdacPacketData_ModifyCooperationValidityPacket) isCdacPacketData_Packet() {}
func (*CdacPacketData_EnableCooperationPacket) isCdacPacketData_Packet()         {}
func (*CdacPacketData_DisableCooperationPacket) isCdacPacketData_Packet()        {}
func (*CdacPacketData_ModifyCooperationCostPacket) isCdacPacketData_Packet()     {}
func (*CdacPacketData_ExchangeCooperationDataPacket) isCdacPacketData_Packet()   {}
func (*CdacPacketData_ForwardCooperationDataPacket) isCdacPacketData_Packet()    {}
func (*CdacPacketData_EstablishCooperationPacket) isCdacPacketData_Packet()      {}
func (*CdacPacketData_AuthenticateDomainPacket) isCdacPacketData_Packet()        {}

func (m *CdacPacketData) GetPacket() isCdacPacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *CdacPacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*CdacPacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (m *CdacPacketData) GetPublishProofListPacket() *PublishProofListPacketData {
	if x, ok := m.GetPacket().(*CdacPacketData_PublishProofListPacket); ok {
		return x.PublishProofListPacket
	}
	return nil
}

func (m *CdacPacketData) GetRevokeCooperationPacket() *RevokeCooperationPacketData {
	if x, ok := m.GetPacket().(*CdacPacketData_RevokeCooperationPacket); ok {
		return x.RevokeCooperationPacket
	}
	return nil
}

func (m *CdacPacketData) GetModifyCooperationInterestPacket() *ModifyCooperationInterestPacketData {
	if x, ok := m.GetPacket().(*CdacPacketData_ModifyCooperationInterestPacket); ok {
		return x.ModifyCooperationInterestPacket
	}
	return nil
}

func (m *CdacPacketData) GetModifyCooperationValidityPacket() *ModifyCooperationValidityPacketData {
	if x, ok := m.GetPacket().(*CdacPacketData_ModifyCooperationValidityPacket); ok {
		return x.ModifyCooperationValidityPacket
	}
	return nil
}

func (m *CdacPacketData) GetEnableCooperationPacket() *EnableCooperationPacketData {
	if x, ok := m.GetPacket().(*CdacPacketData_EnableCooperationPacket); ok {
		return x.EnableCooperationPacket
	}
	return nil
}

func (m *CdacPacketData) GetDisableCooperationPacket() *DisableCooperationPacketData {
	if x, ok := m.GetPacket().(*CdacPacketData_DisableCooperationPacket); ok {
		return x.DisableCooperationPacket
	}
	return nil
}

func (m *CdacPacketData) GetModifyCooperationCostPacket() *ModifyCooperationCostPacketData {
	if x, ok := m.GetPacket().(*CdacPacketData_ModifyCooperationCostPacket); ok {
		return x.ModifyCooperationCostPacket
	}
	return nil
}

func (m *CdacPacketData) GetExchangeCooperationDataPacket() *ExchangeCooperationDataPacketData {
	if x, ok := m.GetPacket().(*CdacPacketData_ExchangeCooperationDataPacket); ok {
		return x.ExchangeCooperationDataPacket
	}
	return nil
}

func (m *CdacPacketData) GetForwardCooperationDataPacket() *ForwardCooperationDataPacketData {
	if x, ok := m.GetPacket().(*CdacPacketData_ForwardCooperationDataPacket); ok {
		return x.ForwardCooperationDataPacket
	}
	return nil
}

func (m *CdacPacketData) GetEstablishCooperationPacket() *EstablishCooperationPacketData {
	if x, ok := m.GetPacket().(*CdacPacketData_EstablishCooperationPacket); ok {
		return x.EstablishCooperationPacket
	}
	return nil
}

func (m *CdacPacketData) GetAuthenticateDomainPacket() *AuthenticateDomainPacketData {
	if x, ok := m.GetPacket().(*CdacPacketData_AuthenticateDomainPacket); ok {
		return x.AuthenticateDomainPacket
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CdacPacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CdacPacketData_NoData)(nil),
		(*CdacPacketData_PublishProofListPacket)(nil),
		(*CdacPacketData_RevokeCooperationPacket)(nil),
		(*CdacPacketData_ModifyCooperationInterestPacket)(nil),
		(*CdacPacketData_ModifyCooperationValidityPacket)(nil),
		(*CdacPacketData_EnableCooperationPacket)(nil),
		(*CdacPacketData_DisableCooperationPacket)(nil),
		(*CdacPacketData_ModifyCooperationCostPacket)(nil),
		(*CdacPacketData_ExchangeCooperationDataPacket)(nil),
		(*CdacPacketData_ForwardCooperationDataPacket)(nil),
		(*CdacPacketData_EstablishCooperationPacket)(nil),
		(*CdacPacketData_AuthenticateDomainPacket)(nil),
	}
}

type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

// AuthenticateDomainPacketData defines a struct for the packet payload
type AuthenticateDomainPacketData struct {
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Pke       string `protobuf:"bytes,2,opt,name=pke,proto3" json:"pke,omitempty"`
	Pkn       string `protobuf:"bytes,3,opt,name=pkn,proto3" json:"pkn,omitempty"`
	NotBefore string `protobuf:"bytes,4,opt,name=notBefore,proto3" json:"notBefore,omitempty"`
	NotAfter  string `protobuf:"bytes,5,opt,name=notAfter,proto3" json:"notAfter,omitempty"`
	Location  string `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
}

func (m *AuthenticateDomainPacketData) Reset()         { *m = AuthenticateDomainPacketData{} }
func (m *AuthenticateDomainPacketData) String() string { return proto.CompactTextString(m) }
func (*AuthenticateDomainPacketData) ProtoMessage()    {}
func (*AuthenticateDomainPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{2}
}
func (m *AuthenticateDomainPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthenticateDomainPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthenticateDomainPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthenticateDomainPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticateDomainPacketData.Merge(m, src)
}
func (m *AuthenticateDomainPacketData) XXX_Size() int {
	return m.Size()
}
func (m *AuthenticateDomainPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticateDomainPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticateDomainPacketData proto.InternalMessageInfo

func (m *AuthenticateDomainPacketData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *AuthenticateDomainPacketData) GetPke() string {
	if m != nil {
		return m.Pke
	}
	return ""
}

func (m *AuthenticateDomainPacketData) GetPkn() string {
	if m != nil {
		return m.Pkn
	}
	return ""
}

func (m *AuthenticateDomainPacketData) GetNotBefore() string {
	if m != nil {
		return m.NotBefore
	}
	return ""
}

func (m *AuthenticateDomainPacketData) GetNotAfter() string {
	if m != nil {
		return m.NotAfter
	}
	return ""
}

func (m *AuthenticateDomainPacketData) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

// AuthenticateDomainPacketAck defines a struct for the packet acknowledgment
type AuthenticateDomainPacketAck struct {
	Confirmation string `protobuf:"bytes,1,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	ConfirmedBy  string `protobuf:"bytes,2,opt,name=confirmedBy,proto3" json:"confirmedBy,omitempty"`
	Location     string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Pke          string `protobuf:"bytes,4,opt,name=pke,proto3" json:"pke,omitempty"`
	Pkn          string `protobuf:"bytes,5,opt,name=pkn,proto3" json:"pkn,omitempty"`
	NotBefore    string `protobuf:"bytes,6,opt,name=notBefore,proto3" json:"notBefore,omitempty"`
	NotAfter     string `protobuf:"bytes,7,opt,name=notAfter,proto3" json:"notAfter,omitempty"`
}

func (m *AuthenticateDomainPacketAck) Reset()         { *m = AuthenticateDomainPacketAck{} }
func (m *AuthenticateDomainPacketAck) String() string { return proto.CompactTextString(m) }
func (*AuthenticateDomainPacketAck) ProtoMessage()    {}
func (*AuthenticateDomainPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{3}
}
func (m *AuthenticateDomainPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthenticateDomainPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthenticateDomainPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthenticateDomainPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticateDomainPacketAck.Merge(m, src)
}
func (m *AuthenticateDomainPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *AuthenticateDomainPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticateDomainPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticateDomainPacketAck proto.InternalMessageInfo

func (m *AuthenticateDomainPacketAck) GetConfirmation() string {
	if m != nil {
		return m.Confirmation
	}
	return ""
}

func (m *AuthenticateDomainPacketAck) GetConfirmedBy() string {
	if m != nil {
		return m.ConfirmedBy
	}
	return ""
}

func (m *AuthenticateDomainPacketAck) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *AuthenticateDomainPacketAck) GetPke() string {
	if m != nil {
		return m.Pke
	}
	return ""
}

func (m *AuthenticateDomainPacketAck) GetPkn() string {
	if m != nil {
		return m.Pkn
	}
	return ""
}

func (m *AuthenticateDomainPacketAck) GetNotBefore() string {
	if m != nil {
		return m.NotBefore
	}
	return ""
}

func (m *AuthenticateDomainPacketAck) GetNotAfter() string {
	if m != nil {
		return m.NotAfter
	}
	return ""
}

// EstablishCooperationPacketData defines a struct for the packet payload
type EstablishCooperationPacketData struct {
	NotBefore string `protobuf:"bytes,1,opt,name=notBefore,proto3" json:"notBefore,omitempty"`
	NotAfter  string `protobuf:"bytes,2,opt,name=notAfter,proto3" json:"notAfter,omitempty"`
	Interest  string `protobuf:"bytes,3,opt,name=interest,proto3" json:"interest,omitempty"`
	Cost      string `protobuf:"bytes,4,opt,name=cost,proto3" json:"cost,omitempty"`
	Sender    string `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *EstablishCooperationPacketData) Reset()         { *m = EstablishCooperationPacketData{} }
func (m *EstablishCooperationPacketData) String() string { return proto.CompactTextString(m) }
func (*EstablishCooperationPacketData) ProtoMessage()    {}
func (*EstablishCooperationPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{4}
}
func (m *EstablishCooperationPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstablishCooperationPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstablishCooperationPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstablishCooperationPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstablishCooperationPacketData.Merge(m, src)
}
func (m *EstablishCooperationPacketData) XXX_Size() int {
	return m.Size()
}
func (m *EstablishCooperationPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_EstablishCooperationPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_EstablishCooperationPacketData proto.InternalMessageInfo

func (m *EstablishCooperationPacketData) GetNotBefore() string {
	if m != nil {
		return m.NotBefore
	}
	return ""
}

func (m *EstablishCooperationPacketData) GetNotAfter() string {
	if m != nil {
		return m.NotAfter
	}
	return ""
}

func (m *EstablishCooperationPacketData) GetInterest() string {
	if m != nil {
		return m.Interest
	}
	return ""
}

func (m *EstablishCooperationPacketData) GetCost() string {
	if m != nil {
		return m.Cost
	}
	return ""
}

func (m *EstablishCooperationPacketData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// EstablishCooperationPacketAck defines a struct for the packet acknowledgment
type EstablishCooperationPacketAck struct {
	Confirmation string `protobuf:"bytes,1,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	ConfirmedBy  string `protobuf:"bytes,2,opt,name=confirmedBy,proto3" json:"confirmedBy,omitempty"`
}

func (m *EstablishCooperationPacketAck) Reset()         { *m = EstablishCooperationPacketAck{} }
func (m *EstablishCooperationPacketAck) String() string { return proto.CompactTextString(m) }
func (*EstablishCooperationPacketAck) ProtoMessage()    {}
func (*EstablishCooperationPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{5}
}
func (m *EstablishCooperationPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstablishCooperationPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstablishCooperationPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstablishCooperationPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstablishCooperationPacketAck.Merge(m, src)
}
func (m *EstablishCooperationPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *EstablishCooperationPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_EstablishCooperationPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_EstablishCooperationPacketAck proto.InternalMessageInfo

func (m *EstablishCooperationPacketAck) GetConfirmation() string {
	if m != nil {
		return m.Confirmation
	}
	return ""
}

func (m *EstablishCooperationPacketAck) GetConfirmedBy() string {
	if m != nil {
		return m.ConfirmedBy
	}
	return ""
}

// ForwardCooperationDataPacketData defines a struct for the packet payload
type ForwardCooperationDataPacketData struct {
	NotBefore       string `protobuf:"bytes,1,opt,name=notBefore,proto3" json:"notBefore,omitempty"`
	NotAfter        string `protobuf:"bytes,2,opt,name=notAfter,proto3" json:"notAfter,omitempty"`
	Interest        string `protobuf:"bytes,3,opt,name=interest,proto3" json:"interest,omitempty"`
	Cost            string `protobuf:"bytes,4,opt,name=cost,proto3" json:"cost,omitempty"`
	Domain1Name     string `protobuf:"bytes,5,opt,name=domain1Name,proto3" json:"domain1Name,omitempty"`
	Domain2Name     string `protobuf:"bytes,6,opt,name=domain2Name,proto3" json:"domain2Name,omitempty"`
	Domain1Location string `protobuf:"bytes,7,opt,name=domain1Location,proto3" json:"domain1Location,omitempty"`
	Domain2Location string `protobuf:"bytes,8,opt,name=domain2Location,proto3" json:"domain2Location,omitempty"`
	Sender          string `protobuf:"bytes,9,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *ForwardCooperationDataPacketData) Reset()         { *m = ForwardCooperationDataPacketData{} }
func (m *ForwardCooperationDataPacketData) String() string { return proto.CompactTextString(m) }
func (*ForwardCooperationDataPacketData) ProtoMessage()    {}
func (*ForwardCooperationDataPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{6}
}
func (m *ForwardCooperationDataPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardCooperationDataPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForwardCooperationDataPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForwardCooperationDataPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardCooperationDataPacketData.Merge(m, src)
}
func (m *ForwardCooperationDataPacketData) XXX_Size() int {
	return m.Size()
}
func (m *ForwardCooperationDataPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardCooperationDataPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardCooperationDataPacketData proto.InternalMessageInfo

func (m *ForwardCooperationDataPacketData) GetNotBefore() string {
	if m != nil {
		return m.NotBefore
	}
	return ""
}

func (m *ForwardCooperationDataPacketData) GetNotAfter() string {
	if m != nil {
		return m.NotAfter
	}
	return ""
}

func (m *ForwardCooperationDataPacketData) GetInterest() string {
	if m != nil {
		return m.Interest
	}
	return ""
}

func (m *ForwardCooperationDataPacketData) GetCost() string {
	if m != nil {
		return m.Cost
	}
	return ""
}

func (m *ForwardCooperationDataPacketData) GetDomain1Name() string {
	if m != nil {
		return m.Domain1Name
	}
	return ""
}

func (m *ForwardCooperationDataPacketData) GetDomain2Name() string {
	if m != nil {
		return m.Domain2Name
	}
	return ""
}

func (m *ForwardCooperationDataPacketData) GetDomain1Location() string {
	if m != nil {
		return m.Domain1Location
	}
	return ""
}

func (m *ForwardCooperationDataPacketData) GetDomain2Location() string {
	if m != nil {
		return m.Domain2Location
	}
	return ""
}

func (m *ForwardCooperationDataPacketData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// ForwardCooperationDataPacketAck defines a struct for the packet acknowledgment
type ForwardCooperationDataPacketAck struct {
}

func (m *ForwardCooperationDataPacketAck) Reset()         { *m = ForwardCooperationDataPacketAck{} }
func (m *ForwardCooperationDataPacketAck) String() string { return proto.CompactTextString(m) }
func (*ForwardCooperationDataPacketAck) ProtoMessage()    {}
func (*ForwardCooperationDataPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{7}
}
func (m *ForwardCooperationDataPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardCooperationDataPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForwardCooperationDataPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForwardCooperationDataPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardCooperationDataPacketAck.Merge(m, src)
}
func (m *ForwardCooperationDataPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *ForwardCooperationDataPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardCooperationDataPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardCooperationDataPacketAck proto.InternalMessageInfo

// ExchangeCooperationDataPacketData defines a struct for the packet payload
type ExchangeCooperationDataPacketData struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *ExchangeCooperationDataPacketData) Reset()         { *m = ExchangeCooperationDataPacketData{} }
func (m *ExchangeCooperationDataPacketData) String() string { return proto.CompactTextString(m) }
func (*ExchangeCooperationDataPacketData) ProtoMessage()    {}
func (*ExchangeCooperationDataPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{8}
}
func (m *ExchangeCooperationDataPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeCooperationDataPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeCooperationDataPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeCooperationDataPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeCooperationDataPacketData.Merge(m, src)
}
func (m *ExchangeCooperationDataPacketData) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeCooperationDataPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeCooperationDataPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeCooperationDataPacketData proto.InternalMessageInfo

func (m *ExchangeCooperationDataPacketData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// ExchangeCooperationDataPacketAck defines a struct for the packet acknowledgment
type ExchangeCooperationDataPacketAck struct {
}

func (m *ExchangeCooperationDataPacketAck) Reset()         { *m = ExchangeCooperationDataPacketAck{} }
func (m *ExchangeCooperationDataPacketAck) String() string { return proto.CompactTextString(m) }
func (*ExchangeCooperationDataPacketAck) ProtoMessage()    {}
func (*ExchangeCooperationDataPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{9}
}
func (m *ExchangeCooperationDataPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeCooperationDataPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeCooperationDataPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeCooperationDataPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeCooperationDataPacketAck.Merge(m, src)
}
func (m *ExchangeCooperationDataPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeCooperationDataPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeCooperationDataPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeCooperationDataPacketAck proto.InternalMessageInfo

// ModifyCooperationCostPacketData defines a struct for the packet payload
type ModifyCooperationCostPacketData struct {
	Cost   string `protobuf:"bytes,1,opt,name=cost,proto3" json:"cost,omitempty"`
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *ModifyCooperationCostPacketData) Reset()         { *m = ModifyCooperationCostPacketData{} }
func (m *ModifyCooperationCostPacketData) String() string { return proto.CompactTextString(m) }
func (*ModifyCooperationCostPacketData) ProtoMessage()    {}
func (*ModifyCooperationCostPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{10}
}
func (m *ModifyCooperationCostPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModifyCooperationCostPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModifyCooperationCostPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModifyCooperationCostPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyCooperationCostPacketData.Merge(m, src)
}
func (m *ModifyCooperationCostPacketData) XXX_Size() int {
	return m.Size()
}
func (m *ModifyCooperationCostPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyCooperationCostPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyCooperationCostPacketData proto.InternalMessageInfo

func (m *ModifyCooperationCostPacketData) GetCost() string {
	if m != nil {
		return m.Cost
	}
	return ""
}

func (m *ModifyCooperationCostPacketData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// ModifyCooperationCostPacketAck defines a struct for the packet acknowledgment
type ModifyCooperationCostPacketAck struct {
	Confirmation string `protobuf:"bytes,1,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	ConfirmedBy  string `protobuf:"bytes,2,opt,name=confirmedBy,proto3" json:"confirmedBy,omitempty"`
}

func (m *ModifyCooperationCostPacketAck) Reset()         { *m = ModifyCooperationCostPacketAck{} }
func (m *ModifyCooperationCostPacketAck) String() string { return proto.CompactTextString(m) }
func (*ModifyCooperationCostPacketAck) ProtoMessage()    {}
func (*ModifyCooperationCostPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{11}
}
func (m *ModifyCooperationCostPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModifyCooperationCostPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModifyCooperationCostPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModifyCooperationCostPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyCooperationCostPacketAck.Merge(m, src)
}
func (m *ModifyCooperationCostPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *ModifyCooperationCostPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyCooperationCostPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyCooperationCostPacketAck proto.InternalMessageInfo

func (m *ModifyCooperationCostPacketAck) GetConfirmation() string {
	if m != nil {
		return m.Confirmation
	}
	return ""
}

func (m *ModifyCooperationCostPacketAck) GetConfirmedBy() string {
	if m != nil {
		return m.ConfirmedBy
	}
	return ""
}

// DisableCooperationPacketData defines a struct for the packet payload
type DisableCooperationPacketData struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *DisableCooperationPacketData) Reset()         { *m = DisableCooperationPacketData{} }
func (m *DisableCooperationPacketData) String() string { return proto.CompactTextString(m) }
func (*DisableCooperationPacketData) ProtoMessage()    {}
func (*DisableCooperationPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{12}
}
func (m *DisableCooperationPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisableCooperationPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisableCooperationPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisableCooperationPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisableCooperationPacketData.Merge(m, src)
}
func (m *DisableCooperationPacketData) XXX_Size() int {
	return m.Size()
}
func (m *DisableCooperationPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_DisableCooperationPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_DisableCooperationPacketData proto.InternalMessageInfo

func (m *DisableCooperationPacketData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// DisableCooperationPacketAck defines a struct for the packet acknowledgment
type DisableCooperationPacketAck struct {
	Confirmation string `protobuf:"bytes,1,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	ConfirmedBy  string `protobuf:"bytes,2,opt,name=confirmedBy,proto3" json:"confirmedBy,omitempty"`
}

func (m *DisableCooperationPacketAck) Reset()         { *m = DisableCooperationPacketAck{} }
func (m *DisableCooperationPacketAck) String() string { return proto.CompactTextString(m) }
func (*DisableCooperationPacketAck) ProtoMessage()    {}
func (*DisableCooperationPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{13}
}
func (m *DisableCooperationPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisableCooperationPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisableCooperationPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisableCooperationPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisableCooperationPacketAck.Merge(m, src)
}
func (m *DisableCooperationPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *DisableCooperationPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_DisableCooperationPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_DisableCooperationPacketAck proto.InternalMessageInfo

func (m *DisableCooperationPacketAck) GetConfirmation() string {
	if m != nil {
		return m.Confirmation
	}
	return ""
}

func (m *DisableCooperationPacketAck) GetConfirmedBy() string {
	if m != nil {
		return m.ConfirmedBy
	}
	return ""
}

// EnableCooperationPacketData defines a struct for the packet payload
type EnableCooperationPacketData struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *EnableCooperationPacketData) Reset()         { *m = EnableCooperationPacketData{} }
func (m *EnableCooperationPacketData) String() string { return proto.CompactTextString(m) }
func (*EnableCooperationPacketData) ProtoMessage()    {}
func (*EnableCooperationPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{14}
}
func (m *EnableCooperationPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableCooperationPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnableCooperationPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnableCooperationPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableCooperationPacketData.Merge(m, src)
}
func (m *EnableCooperationPacketData) XXX_Size() int {
	return m.Size()
}
func (m *EnableCooperationPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableCooperationPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_EnableCooperationPacketData proto.InternalMessageInfo

func (m *EnableCooperationPacketData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// EnableCooperationPacketAck defines a struct for the packet acknowledgment
type EnableCooperationPacketAck struct {
	Confirmation string `protobuf:"bytes,1,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	ConfirmedBy  string `protobuf:"bytes,2,opt,name=confirmedBy,proto3" json:"confirmedBy,omitempty"`
}

func (m *EnableCooperationPacketAck) Reset()         { *m = EnableCooperationPacketAck{} }
func (m *EnableCooperationPacketAck) String() string { return proto.CompactTextString(m) }
func (*EnableCooperationPacketAck) ProtoMessage()    {}
func (*EnableCooperationPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{15}
}
func (m *EnableCooperationPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableCooperationPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnableCooperationPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnableCooperationPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableCooperationPacketAck.Merge(m, src)
}
func (m *EnableCooperationPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *EnableCooperationPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableCooperationPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_EnableCooperationPacketAck proto.InternalMessageInfo

func (m *EnableCooperationPacketAck) GetConfirmation() string {
	if m != nil {
		return m.Confirmation
	}
	return ""
}

func (m *EnableCooperationPacketAck) GetConfirmedBy() string {
	if m != nil {
		return m.ConfirmedBy
	}
	return ""
}

// ModifyCooperationValidityPacketData defines a struct for the packet payload
type ModifyCooperationValidityPacketData struct {
	NotBefore string `protobuf:"bytes,1,opt,name=notBefore,proto3" json:"notBefore,omitempty"`
	NotAfter  string `protobuf:"bytes,2,opt,name=notAfter,proto3" json:"notAfter,omitempty"`
	Sender    string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *ModifyCooperationValidityPacketData) Reset()         { *m = ModifyCooperationValidityPacketData{} }
func (m *ModifyCooperationValidityPacketData) String() string { return proto.CompactTextString(m) }
func (*ModifyCooperationValidityPacketData) ProtoMessage()    {}
func (*ModifyCooperationValidityPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{16}
}
func (m *ModifyCooperationValidityPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModifyCooperationValidityPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModifyCooperationValidityPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModifyCooperationValidityPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyCooperationValidityPacketData.Merge(m, src)
}
func (m *ModifyCooperationValidityPacketData) XXX_Size() int {
	return m.Size()
}
func (m *ModifyCooperationValidityPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyCooperationValidityPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyCooperationValidityPacketData proto.InternalMessageInfo

func (m *ModifyCooperationValidityPacketData) GetNotBefore() string {
	if m != nil {
		return m.NotBefore
	}
	return ""
}

func (m *ModifyCooperationValidityPacketData) GetNotAfter() string {
	if m != nil {
		return m.NotAfter
	}
	return ""
}

func (m *ModifyCooperationValidityPacketData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// ModifyCooperationValidityPacketAck defines a struct for the packet acknowledgment
type ModifyCooperationValidityPacketAck struct {
	Confirmation string `protobuf:"bytes,1,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	ConfirmedBy  string `protobuf:"bytes,2,opt,name=confirmedBy,proto3" json:"confirmedBy,omitempty"`
}

func (m *ModifyCooperationValidityPacketAck) Reset()         { *m = ModifyCooperationValidityPacketAck{} }
func (m *ModifyCooperationValidityPacketAck) String() string { return proto.CompactTextString(m) }
func (*ModifyCooperationValidityPacketAck) ProtoMessage()    {}
func (*ModifyCooperationValidityPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{17}
}
func (m *ModifyCooperationValidityPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModifyCooperationValidityPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModifyCooperationValidityPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModifyCooperationValidityPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyCooperationValidityPacketAck.Merge(m, src)
}
func (m *ModifyCooperationValidityPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *ModifyCooperationValidityPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyCooperationValidityPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyCooperationValidityPacketAck proto.InternalMessageInfo

func (m *ModifyCooperationValidityPacketAck) GetConfirmation() string {
	if m != nil {
		return m.Confirmation
	}
	return ""
}

func (m *ModifyCooperationValidityPacketAck) GetConfirmedBy() string {
	if m != nil {
		return m.ConfirmedBy
	}
	return ""
}

// ModifyCooperationInterestPacketData defines a struct for the packet payload
type ModifyCooperationInterestPacketData struct {
	Interest string `protobuf:"bytes,1,opt,name=interest,proto3" json:"interest,omitempty"`
	Sender   string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *ModifyCooperationInterestPacketData) Reset()         { *m = ModifyCooperationInterestPacketData{} }
func (m *ModifyCooperationInterestPacketData) String() string { return proto.CompactTextString(m) }
func (*ModifyCooperationInterestPacketData) ProtoMessage()    {}
func (*ModifyCooperationInterestPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{18}
}
func (m *ModifyCooperationInterestPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModifyCooperationInterestPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModifyCooperationInterestPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModifyCooperationInterestPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyCooperationInterestPacketData.Merge(m, src)
}
func (m *ModifyCooperationInterestPacketData) XXX_Size() int {
	return m.Size()
}
func (m *ModifyCooperationInterestPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyCooperationInterestPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyCooperationInterestPacketData proto.InternalMessageInfo

func (m *ModifyCooperationInterestPacketData) GetInterest() string {
	if m != nil {
		return m.Interest
	}
	return ""
}

func (m *ModifyCooperationInterestPacketData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// ModifyCooperationInterestPacketAck defines a struct for the packet acknowledgment
type ModifyCooperationInterestPacketAck struct {
	Confirmation string `protobuf:"bytes,1,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	ConfirmedBy  string `protobuf:"bytes,2,opt,name=confirmedBy,proto3" json:"confirmedBy,omitempty"`
}

func (m *ModifyCooperationInterestPacketAck) Reset()         { *m = ModifyCooperationInterestPacketAck{} }
func (m *ModifyCooperationInterestPacketAck) String() string { return proto.CompactTextString(m) }
func (*ModifyCooperationInterestPacketAck) ProtoMessage()    {}
func (*ModifyCooperationInterestPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{19}
}
func (m *ModifyCooperationInterestPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModifyCooperationInterestPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModifyCooperationInterestPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModifyCooperationInterestPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyCooperationInterestPacketAck.Merge(m, src)
}
func (m *ModifyCooperationInterestPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *ModifyCooperationInterestPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyCooperationInterestPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyCooperationInterestPacketAck proto.InternalMessageInfo

func (m *ModifyCooperationInterestPacketAck) GetConfirmation() string {
	if m != nil {
		return m.Confirmation
	}
	return ""
}

func (m *ModifyCooperationInterestPacketAck) GetConfirmedBy() string {
	if m != nil {
		return m.ConfirmedBy
	}
	return ""
}

// RevokeCooperationPacketData defines a struct for the packet payload
type RevokeCooperationPacketData struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *RevokeCooperationPacketData) Reset()         { *m = RevokeCooperationPacketData{} }
func (m *RevokeCooperationPacketData) String() string { return proto.CompactTextString(m) }
func (*RevokeCooperationPacketData) ProtoMessage()    {}
func (*RevokeCooperationPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{20}
}
func (m *RevokeCooperationPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevokeCooperationPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevokeCooperationPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevokeCooperationPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokeCooperationPacketData.Merge(m, src)
}
func (m *RevokeCooperationPacketData) XXX_Size() int {
	return m.Size()
}
func (m *RevokeCooperationPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokeCooperationPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_RevokeCooperationPacketData proto.InternalMessageInfo

func (m *RevokeCooperationPacketData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// RevokeCooperationPacketAck defines a struct for the packet acknowledgment
type RevokeCooperationPacketAck struct {
	Confirmation string `protobuf:"bytes,1,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	ConfirmedBy  string `protobuf:"bytes,2,opt,name=confirmedBy,proto3" json:"confirmedBy,omitempty"`
}

func (m *RevokeCooperationPacketAck) Reset()         { *m = RevokeCooperationPacketAck{} }
func (m *RevokeCooperationPacketAck) String() string { return proto.CompactTextString(m) }
func (*RevokeCooperationPacketAck) ProtoMessage()    {}
func (*RevokeCooperationPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{21}
}
func (m *RevokeCooperationPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevokeCooperationPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevokeCooperationPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevokeCooperationPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokeCooperationPacketAck.Merge(m, src)
}
func (m *RevokeCooperationPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *RevokeCooperationPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokeCooperationPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_RevokeCooperationPacketAck proto.InternalMessageInfo

func (m *RevokeCooperationPacketAck) GetConfirmation() string {
	if m != nil {
		return m.Confirmation
	}
	return ""
}

func (m *RevokeCooperationPacketAck) GetConfirmedBy() string {
	if m != nil {
		return m.ConfirmedBy
	}
	return ""
}

// PublishProofListPacketData defines a struct for the packet payload
type PublishProofListPacketData struct {
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Data      string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Signature string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *PublishProofListPacketData) Reset()         { *m = PublishProofListPacketData{} }
func (m *PublishProofListPacketData) String() string { return proto.CompactTextString(m) }
func (*PublishProofListPacketData) ProtoMessage()    {}
func (*PublishProofListPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{22}
}
func (m *PublishProofListPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishProofListPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishProofListPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishProofListPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishProofListPacketData.Merge(m, src)
}
func (m *PublishProofListPacketData) XXX_Size() int {
	return m.Size()
}
func (m *PublishProofListPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishProofListPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_PublishProofListPacketData proto.InternalMessageInfo

func (m *PublishProofListPacketData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *PublishProofListPacketData) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *PublishProofListPacketData) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// PublishProofListPacketAck defines a struct for the packet acknowledgment
type PublishProofListPacketAck struct {
}

func (m *PublishProofListPacketAck) Reset()         { *m = PublishProofListPacketAck{} }
func (m *PublishProofListPacketAck) String() string { return proto.CompactTextString(m) }
func (*PublishProofListPacketAck) ProtoMessage()    {}
func (*PublishProofListPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7821588041dde76, []int{23}
}
func (m *PublishProofListPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishProofListPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishProofListPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishProofListPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishProofListPacketAck.Merge(m, src)
}
func (m *PublishProofListPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *PublishProofListPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishProofListPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_PublishProofListPacketAck proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CdacPacketData)(nil), "crossdomain.cdac.CdacPacketData")
	proto.RegisterType((*NoData)(nil), "crossdomain.cdac.NoData")
	proto.RegisterType((*AuthenticateDomainPacketData)(nil), "crossdomain.cdac.AuthenticateDomainPacketData")
	proto.RegisterType((*AuthenticateDomainPacketAck)(nil), "crossdomain.cdac.AuthenticateDomainPacketAck")
	proto.RegisterType((*EstablishCooperationPacketData)(nil), "crossdomain.cdac.EstablishCooperationPacketData")
	proto.RegisterType((*EstablishCooperationPacketAck)(nil), "crossdomain.cdac.EstablishCooperationPacketAck")
	proto.RegisterType((*ForwardCooperationDataPacketData)(nil), "crossdomain.cdac.ForwardCooperationDataPacketData")
	proto.RegisterType((*ForwardCooperationDataPacketAck)(nil), "crossdomain.cdac.ForwardCooperationDataPacketAck")
	proto.RegisterType((*ExchangeCooperationDataPacketData)(nil), "crossdomain.cdac.ExchangeCooperationDataPacketData")
	proto.RegisterType((*ExchangeCooperationDataPacketAck)(nil), "crossdomain.cdac.ExchangeCooperationDataPacketAck")
	proto.RegisterType((*ModifyCooperationCostPacketData)(nil), "crossdomain.cdac.ModifyCooperationCostPacketData")
	proto.RegisterType((*ModifyCooperationCostPacketAck)(nil), "crossdomain.cdac.ModifyCooperationCostPacketAck")
	proto.RegisterType((*DisableCooperationPacketData)(nil), "crossdomain.cdac.DisableCooperationPacketData")
	proto.RegisterType((*DisableCooperationPacketAck)(nil), "crossdomain.cdac.DisableCooperationPacketAck")
	proto.RegisterType((*EnableCooperationPacketData)(nil), "crossdomain.cdac.EnableCooperationPacketData")
	proto.RegisterType((*EnableCooperationPacketAck)(nil), "crossdomain.cdac.EnableCooperationPacketAck")
	proto.RegisterType((*ModifyCooperationValidityPacketData)(nil), "crossdomain.cdac.ModifyCooperationValidityPacketData")
	proto.RegisterType((*ModifyCooperationValidityPacketAck)(nil), "crossdomain.cdac.ModifyCooperationValidityPacketAck")
	proto.RegisterType((*ModifyCooperationInterestPacketData)(nil), "crossdomain.cdac.ModifyCooperationInterestPacketData")
	proto.RegisterType((*ModifyCooperationInterestPacketAck)(nil), "crossdomain.cdac.ModifyCooperationInterestPacketAck")
	proto.RegisterType((*RevokeCooperationPacketData)(nil), "crossdomain.cdac.RevokeCooperationPacketData")
	proto.RegisterType((*RevokeCooperationPacketAck)(nil), "crossdomain.cdac.RevokeCooperationPacketAck")
	proto.RegisterType((*PublishProofListPacketData)(nil), "crossdomain.cdac.PublishProofListPacketData")
	proto.RegisterType((*PublishProofListPacketAck)(nil), "crossdomain.cdac.PublishProofListPacketAck")
}

func init() { proto.RegisterFile("cdac/packet.proto", fileDescriptor_d7821588041dde76) }

var fileDescriptor_d7821588041dde76 = []byte{
	// 880 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xc1, 0x6e, 0xdb, 0x46,
	0x10, 0x15, 0x25, 0x99, 0x16, 0x47, 0x46, 0xeb, 0xee, 0xc1, 0x55, 0x25, 0x99, 0x96, 0xd9, 0x8b,
	0x0f, 0xad, 0x5c, 0xcb, 0x70, 0x2f, 0x3d, 0x49, 0x76, 0x8b, 0x16, 0xb0, 0x0d, 0x43, 0x87, 0x02,
	0xed, 0x6d, 0x45, 0x2e, 0x6d, 0x56, 0x12, 0x57, 0x20, 0x57, 0xb5, 0x85, 0x9c, 0xf2, 0x07, 0xf9,
	0x86, 0x7c, 0x41, 0x3e, 0x20, 0x1f, 0x90, 0xa3, 0x91, 0x53, 0x2e, 0x01, 0x02, 0xfb, 0x47, 0x02,
	0x2e, 0x57, 0x12, 0x69, 0x72, 0x57, 0x06, 0x22, 0xe4, 0xc6, 0x1d, 0xce, 0x7b, 0x6f, 0x66, 0x76,
	0x38, 0xdc, 0x85, 0xef, 0x6c, 0x07, 0xdb, 0x87, 0x13, 0x6c, 0x0f, 0x09, 0x6b, 0x4f, 0x02, 0xca,
	0x28, 0xda, 0xb6, 0x03, 0x1a, 0x86, 0x0e, 0x1d, 0x63, 0xcf, 0x6f, 0x47, 0xaf, 0xad, 0xf7, 0x00,
	0xdf, 0x9c, 0x3a, 0xd8, 0xbe, 0xe2, 0x6e, 0x67, 0x98, 0x61, 0xd4, 0x01, 0xdd, 0xa7, 0xd1, 0x53,
	0x4d, 0x6b, 0x69, 0x07, 0xd5, 0x4e, 0xad, 0xfd, 0x14, 0xd5, 0xbe, 0xe4, 0xef, 0xff, 0x2c, 0xf4,
	0x85, 0x27, 0x72, 0x61, 0x67, 0x32, 0x1d, 0x8c, 0xbc, 0xf0, 0xe6, 0x2a, 0xa0, 0xd4, 0x3d, 0xf7,
	0x42, 0x16, 0x33, 0xd6, 0xb6, 0x38, 0xc7, 0x4f, 0x59, 0x8e, 0xab, 0x5c, 0x7f, 0xc1, 0x2b, 0x61,
	0x43, 0x1e, 0x7c, 0x1f, 0x90, 0xff, 0xe9, 0x90, 0x9c, 0x52, 0x3a, 0x21, 0x01, 0x66, 0x1e, 0xf5,
	0x85, 0x50, 0x95, 0x0b, 0xfd, 0x9c, 0x15, 0xea, 0xe7, 0x03, 0x84, 0x92, 0x8c, 0x0f, 0xbd, 0xd4,
	0x60, 0x6f, 0x4c, 0x1d, 0xcf, 0x9d, 0x25, 0xde, 0xfd, 0xe5, 0x33, 0x12, 0x90, 0x45, 0x72, 0xc0,
	0x35, 0x4f, 0xb2, 0x9a, 0x17, 0x6a, 0xa0, 0xd0, 0x5e, 0xc5, 0x9f, 0x1f, 0xc3, 0xdf, 0x78, 0xe4,
	0x39, 0x1e, 0x9b, 0x89, 0x18, 0x8c, 0x67, 0xc7, 0x90, 0x06, 0x4a, 0x63, 0x48, 0xbb, 0x45, 0x25,
	0x27, 0x3e, 0x1e, 0x8c, 0x72, 0x4a, 0x5e, 0x91, 0x95, 0xfc, 0xf7, 0x7c, 0xc0, 0xbc, 0xe4, 0x12,
	0x3e, 0x34, 0x82, 0x9a, 0xe3, 0x85, 0xf9, 0x5a, 0x9b, 0x5c, 0xab, 0x9d, 0xd5, 0x3a, 0x93, 0x20,
	0x84, 0x98, 0x94, 0x11, 0x4d, 0xa1, 0x91, 0xc9, 0xfd, 0x94, 0x2e, 0xf6, 0x56, 0xe7, 0x82, 0x47,
	0xcf, 0xa8, 0xeb, 0x12, 0x24, 0x34, 0x55, 0xbc, 0xe8, 0x05, 0xec, 0x92, 0x3b, 0xfb, 0x06, 0xfb,
	0xd7, 0xc9, 0x98, 0x22, 0xa4, 0x10, 0xde, 0xe0, 0xc2, 0xc7, 0x39, 0x55, 0x55, 0xc1, 0x84, 0xb4,
	0x9a, 0x1b, 0xdd, 0x41, 0xd3, 0xa5, 0xc1, 0x2d, 0x0e, 0x9c, 0x7c, 0xed, 0x32, 0xd7, 0xee, 0x64,
	0xb5, 0xff, 0x50, 0xa0, 0x84, 0xb4, 0x92, 0x19, 0x05, 0x50, 0x27, 0x21, 0xc3, 0xfc, 0xab, 0xce,
	0xee, 0x6e, 0x89, 0xeb, 0xfe, 0x92, 0x93, 0xb3, 0x14, 0x23, 0x54, 0x15, 0xac, 0x51, 0x3f, 0xe1,
	0x29, 0xbb, 0x21, 0x3e, 0xf3, 0x6c, 0xcc, 0xc8, 0x19, 0xe7, 0x15, 0x8a, 0x45, 0x59, 0x3f, 0x75,
	0x25, 0x88, 0x79, 0x3f, 0xc9, 0x18, 0x7b, 0x15, 0xd0, 0xe3, 0x61, 0x6b, 0x55, 0x40, 0x8f, 0x27,
	0xa4, 0xf5, 0x46, 0x83, 0xa6, 0x8a, 0x10, 0xed, 0x80, 0x1e, 0x12, 0xdf, 0x21, 0x01, 0x1f, 0xb6,
	0x46, 0x5f, 0xac, 0xd0, 0x36, 0x94, 0x26, 0x43, 0xc2, 0xa3, 0x34, 0xfa, 0xd1, 0x63, 0x6c, 0xf1,
	0x79, 0xa5, 0xb8, 0xc5, 0x47, 0x4d, 0x30, 0x7c, 0xca, 0x7a, 0xc4, 0xa5, 0x01, 0xe1, 0x3b, 0x67,
	0xf4, 0x97, 0x06, 0x54, 0x87, 0x8a, 0x4f, 0x59, 0xd7, 0x65, 0x24, 0xe0, 0x2d, 0x65, 0xf4, 0x17,
	0xeb, 0xe8, 0xdd, 0x88, 0xda, 0xbc, 0x54, 0xbc, 0xcf, 0x8d, 0xfe, 0x62, 0x6d, 0x7d, 0xd4, 0xa0,
	0x21, 0x0b, 0xb9, 0x6b, 0x0f, 0x91, 0x05, 0x5b, 0x36, 0xf5, 0x5d, 0x2f, 0x18, 0xc7, 0xf8, 0x38,
	0xee, 0x94, 0x0d, 0xb5, 0xa0, 0x2a, 0xd6, 0xc4, 0xe9, 0xcd, 0x44, 0x16, 0x49, 0x53, 0x2a, 0x82,
	0x52, 0x3a, 0x82, 0x79, 0xee, 0xe5, 0x4c, 0xee, 0x1b, 0x92, 0xdc, 0x75, 0x55, 0xee, 0x9b, 0xe9,
	0xdc, 0xad, 0xd7, 0x1a, 0x98, 0xea, 0xae, 0x4a, 0x93, 0x6b, 0x2a, 0xf2, 0x62, 0xb6, 0xb0, 0x9e,
	0x18, 0xe1, 0xf3, 0xb4, 0xe6, 0x6b, 0x84, 0xa0, 0x6c, 0xd3, 0x90, 0x89, 0xbc, 0xf8, 0x73, 0x62,
	0xfb, 0x37, 0x92, 0xdb, 0x6f, 0x11, 0xd8, 0x95, 0xc7, 0xb8, 0xb6, 0x5d, 0xb0, 0xde, 0x16, 0xa1,
	0xb5, 0xea, 0xcb, 0xfe, 0x8a, 0xd5, 0x68, 0x41, 0x35, 0xfe, 0x12, 0x8f, 0x2e, 0xf1, 0x98, 0x88,
	0x92, 0x24, 0x4d, 0x4b, 0x8f, 0x0e, 0xf7, 0xd0, 0x93, 0x1e, 0xdc, 0x84, 0x0e, 0xe0, 0x5b, 0x01,
	0x38, 0x9f, 0xf7, 0x57, 0xdc, 0x01, 0x4f, 0xcd, 0x4b, 0xcf, 0xce, 0xc2, 0xb3, 0x92, 0xf4, 0x5c,
	0x98, 0x13, 0xbb, 0x64, 0xa4, 0x76, 0x69, 0x1f, 0xf6, 0x54, 0xd5, 0xeb, 0xda, 0x43, 0xeb, 0x37,
	0xd8, 0x5f, 0x39, 0xb6, 0x65, 0x43, 0xc0, 0xb2, 0xa0, 0xa5, 0x04, 0x47, 0x02, 0x17, 0xb0, 0xb7,
	0xe2, 0x87, 0xb4, 0x28, 0xb5, 0x96, 0xdb, 0x78, 0xc5, 0x94, 0xa4, 0x0b, 0xa6, 0x82, 0x6e, 0x7d,
	0x9d, 0xf7, 0x2b, 0x34, 0x55, 0x3f, 0x6e, 0x69, 0x49, 0x6c, 0x68, 0xc8, 0x70, 0xeb, 0x0b, 0xee,
	0x04, 0x1a, 0x8a, 0x13, 0x8c, 0x34, 0xb6, 0x01, 0xd4, 0x25, 0xb0, 0xf5, 0x85, 0x76, 0x0b, 0x3f,
	0x3e, 0xe3, 0x5c, 0xf7, 0x05, 0xdf, 0xec, 0x32, 0xb9, 0x52, 0x2a, 0xb9, 0xff, 0xc0, 0x5a, 0x21,
	0xbc, 0xbe, 0x24, 0xff, 0xc9, 0x49, 0x32, 0x7b, 0x80, 0x4e, 0x8d, 0x17, 0xed, 0xc9, 0x78, 0x91,
	0xf5, 0x77, 0x5e, 0x1a, 0x69, 0xea, 0xb5, 0xb6, 0x91, 0xe2, 0xee, 0xa1, 0x6a, 0x23, 0x09, 0x6c,
	0x7d, 0xa1, 0xb9, 0x50, 0x97, 0xdf, 0xbf, 0xa4, 0x87, 0x12, 0x04, 0x65, 0x27, 0xba, 0x17, 0xc6,
	0x84, 0xfc, 0x39, 0xea, 0xb4, 0xd0, 0xbb, 0xf6, 0x31, 0x9b, 0x06, 0x44, 0xb4, 0xcc, 0xd2, 0x60,
	0x35, 0xe0, 0x87, 0x7c, 0x9d, 0xae, 0x3d, 0xec, 0x75, 0xde, 0x3d, 0x98, 0xda, 0xfd, 0x83, 0xa9,
	0x7d, 0x7a, 0x30, 0xb5, 0x57, 0x8f, 0x66, 0xe1, 0xfe, 0xd1, 0x2c, 0x7c, 0x78, 0x34, 0x0b, 0xff,
	0xd6, 0x12, 0xa7, 0xb2, 0xc3, 0xbb, 0x43, 0x7e, 0x91, 0x65, 0xb3, 0x09, 0x09, 0x07, 0x3a, 0xbf,
	0xc8, 0x1e, 0x7f, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x24, 0x37, 0xa1, 0xb6, 0xdd, 0x0e, 0x00, 0x00,
}

func (m *CdacPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CdacPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdacPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CdacPacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdacPacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CdacPacketData_AuthenticateDomainPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdacPacketData_AuthenticateDomainPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuthenticateDomainPacket != nil {
		{
			size, err := m.AuthenticateDomainPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CdacPacketData_EstablishCooperationPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdacPacketData_EstablishCooperationPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EstablishCooperationPacket != nil {
		{
			size, err := m.EstablishCooperationPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CdacPacketData_ForwardCooperationDataPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdacPacketData_ForwardCooperationDataPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardCooperationDataPacket != nil {
		{
			size, err := m.ForwardCooperationDataPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CdacPacketData_ExchangeCooperationDataPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdacPacketData_ExchangeCooperationDataPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExchangeCooperationDataPacket != nil {
		{
			size, err := m.ExchangeCooperationDataPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CdacPacketData_ModifyCooperationCostPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdacPacketData_ModifyCooperationCostPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModifyCooperationCostPacket != nil {
		{
			size, err := m.ModifyCooperationCostPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CdacPacketData_DisableCooperationPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdacPacketData_DisableCooperationPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableCooperationPacket != nil {
		{
			size, err := m.DisableCooperationPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CdacPacketData_EnableCooperationPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdacPacketData_EnableCooperationPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableCooperationPacket != nil {
		{
			size, err := m.EnableCooperationPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *CdacPacketData_ModifyCooperationValidityPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdacPacketData_ModifyCooperationValidityPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModifyCooperationValidityPacket != nil {
		{
			size, err := m.ModifyCooperationValidityPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *CdacPacketData_ModifyCooperationInterestPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdacPacketData_ModifyCooperationInterestPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModifyCooperationInterestPacket != nil {
		{
			size, err := m.ModifyCooperationInterestPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *CdacPacketData_RevokeCooperationPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdacPacketData_RevokeCooperationPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RevokeCooperationPacket != nil {
		{
			size, err := m.RevokeCooperationPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *CdacPacketData_PublishProofListPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdacPacketData_PublishProofListPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PublishProofListPacket != nil {
		{
			size, err := m.PublishProofListPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AuthenticateDomainPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticateDomainPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticateDomainPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NotAfter) > 0 {
		i -= len(m.NotAfter)
		copy(dAtA[i:], m.NotAfter)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.NotAfter)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NotBefore) > 0 {
		i -= len(m.NotBefore)
		copy(dAtA[i:], m.NotBefore)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.NotBefore)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Pkn) > 0 {
		i -= len(m.Pkn)
		copy(dAtA[i:], m.Pkn)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Pkn)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pke) > 0 {
		i -= len(m.Pke)
		copy(dAtA[i:], m.Pke)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Pke)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthenticateDomainPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticateDomainPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticateDomainPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotAfter) > 0 {
		i -= len(m.NotAfter)
		copy(dAtA[i:], m.NotAfter)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.NotAfter)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NotBefore) > 0 {
		i -= len(m.NotBefore)
		copy(dAtA[i:], m.NotBefore)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.NotBefore)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Pkn) > 0 {
		i -= len(m.Pkn)
		copy(dAtA[i:], m.Pkn)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Pkn)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Pke) > 0 {
		i -= len(m.Pke)
		copy(dAtA[i:], m.Pke)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Pke)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConfirmedBy) > 0 {
		i -= len(m.ConfirmedBy)
		copy(dAtA[i:], m.ConfirmedBy)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ConfirmedBy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Confirmation) > 0 {
		i -= len(m.Confirmation)
		copy(dAtA[i:], m.Confirmation)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Confirmation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EstablishCooperationPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstablishCooperationPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstablishCooperationPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cost) > 0 {
		i -= len(m.Cost)
		copy(dAtA[i:], m.Cost)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Cost)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Interest) > 0 {
		i -= len(m.Interest)
		copy(dAtA[i:], m.Interest)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Interest)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NotAfter) > 0 {
		i -= len(m.NotAfter)
		copy(dAtA[i:], m.NotAfter)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.NotAfter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NotBefore) > 0 {
		i -= len(m.NotBefore)
		copy(dAtA[i:], m.NotBefore)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.NotBefore)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EstablishCooperationPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstablishCooperationPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstablishCooperationPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfirmedBy) > 0 {
		i -= len(m.ConfirmedBy)
		copy(dAtA[i:], m.ConfirmedBy)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ConfirmedBy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Confirmation) > 0 {
		i -= len(m.Confirmation)
		copy(dAtA[i:], m.Confirmation)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Confirmation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ForwardCooperationDataPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardCooperationDataPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardCooperationDataPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Domain2Location) > 0 {
		i -= len(m.Domain2Location)
		copy(dAtA[i:], m.Domain2Location)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Domain2Location)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Domain1Location) > 0 {
		i -= len(m.Domain1Location)
		copy(dAtA[i:], m.Domain1Location)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Domain1Location)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Domain2Name) > 0 {
		i -= len(m.Domain2Name)
		copy(dAtA[i:], m.Domain2Name)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Domain2Name)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Domain1Name) > 0 {
		i -= len(m.Domain1Name)
		copy(dAtA[i:], m.Domain1Name)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Domain1Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cost) > 0 {
		i -= len(m.Cost)
		copy(dAtA[i:], m.Cost)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Cost)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Interest) > 0 {
		i -= len(m.Interest)
		copy(dAtA[i:], m.Interest)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Interest)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NotAfter) > 0 {
		i -= len(m.NotAfter)
		copy(dAtA[i:], m.NotAfter)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.NotAfter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NotBefore) > 0 {
		i -= len(m.NotBefore)
		copy(dAtA[i:], m.NotBefore)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.NotBefore)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ForwardCooperationDataPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardCooperationDataPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardCooperationDataPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ExchangeCooperationDataPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeCooperationDataPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeCooperationDataPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExchangeCooperationDataPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeCooperationDataPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeCooperationDataPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ModifyCooperationCostPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyCooperationCostPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModifyCooperationCostPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cost) > 0 {
		i -= len(m.Cost)
		copy(dAtA[i:], m.Cost)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Cost)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModifyCooperationCostPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyCooperationCostPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModifyCooperationCostPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfirmedBy) > 0 {
		i -= len(m.ConfirmedBy)
		copy(dAtA[i:], m.ConfirmedBy)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ConfirmedBy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Confirmation) > 0 {
		i -= len(m.Confirmation)
		copy(dAtA[i:], m.Confirmation)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Confirmation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisableCooperationPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisableCooperationPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisableCooperationPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisableCooperationPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisableCooperationPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisableCooperationPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfirmedBy) > 0 {
		i -= len(m.ConfirmedBy)
		copy(dAtA[i:], m.ConfirmedBy)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ConfirmedBy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Confirmation) > 0 {
		i -= len(m.Confirmation)
		copy(dAtA[i:], m.Confirmation)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Confirmation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnableCooperationPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableCooperationPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableCooperationPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnableCooperationPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableCooperationPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableCooperationPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfirmedBy) > 0 {
		i -= len(m.ConfirmedBy)
		copy(dAtA[i:], m.ConfirmedBy)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ConfirmedBy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Confirmation) > 0 {
		i -= len(m.Confirmation)
		copy(dAtA[i:], m.Confirmation)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Confirmation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModifyCooperationValidityPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyCooperationValidityPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModifyCooperationValidityPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NotAfter) > 0 {
		i -= len(m.NotAfter)
		copy(dAtA[i:], m.NotAfter)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.NotAfter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NotBefore) > 0 {
		i -= len(m.NotBefore)
		copy(dAtA[i:], m.NotBefore)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.NotBefore)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModifyCooperationValidityPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyCooperationValidityPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModifyCooperationValidityPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfirmedBy) > 0 {
		i -= len(m.ConfirmedBy)
		copy(dAtA[i:], m.ConfirmedBy)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ConfirmedBy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Confirmation) > 0 {
		i -= len(m.Confirmation)
		copy(dAtA[i:], m.Confirmation)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Confirmation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModifyCooperationInterestPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyCooperationInterestPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModifyCooperationInterestPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Interest) > 0 {
		i -= len(m.Interest)
		copy(dAtA[i:], m.Interest)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Interest)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModifyCooperationInterestPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyCooperationInterestPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModifyCooperationInterestPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfirmedBy) > 0 {
		i -= len(m.ConfirmedBy)
		copy(dAtA[i:], m.ConfirmedBy)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ConfirmedBy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Confirmation) > 0 {
		i -= len(m.Confirmation)
		copy(dAtA[i:], m.Confirmation)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Confirmation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RevokeCooperationPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevokeCooperationPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevokeCooperationPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RevokeCooperationPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevokeCooperationPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevokeCooperationPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfirmedBy) > 0 {
		i -= len(m.ConfirmedBy)
		copy(dAtA[i:], m.ConfirmedBy)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ConfirmedBy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Confirmation) > 0 {
		i -= len(m.Confirmation)
		copy(dAtA[i:], m.Confirmation)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Confirmation)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishProofListPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishProofListPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishProofListPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishProofListPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishProofListPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishProofListPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CdacPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *CdacPacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *CdacPacketData_AuthenticateDomainPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthenticateDomainPacket != nil {
		l = m.AuthenticateDomainPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *CdacPacketData_EstablishCooperationPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EstablishCooperationPacket != nil {
		l = m.EstablishCooperationPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *CdacPacketData_ForwardCooperationDataPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardCooperationDataPacket != nil {
		l = m.ForwardCooperationDataPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *CdacPacketData_ExchangeCooperationDataPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExchangeCooperationDataPacket != nil {
		l = m.ExchangeCooperationDataPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *CdacPacketData_ModifyCooperationCostPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModifyCooperationCostPacket != nil {
		l = m.ModifyCooperationCostPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *CdacPacketData_DisableCooperationPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableCooperationPacket != nil {
		l = m.DisableCooperationPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *CdacPacketData_EnableCooperationPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableCooperationPacket != nil {
		l = m.EnableCooperationPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *CdacPacketData_ModifyCooperationValidityPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModifyCooperationValidityPacket != nil {
		l = m.ModifyCooperationValidityPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *CdacPacketData_ModifyCooperationInterestPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModifyCooperationInterestPacket != nil {
		l = m.ModifyCooperationInterestPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *CdacPacketData_RevokeCooperationPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RevokeCooperationPacket != nil {
		l = m.RevokeCooperationPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *CdacPacketData_PublishProofListPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublishProofListPacket != nil {
		l = m.PublishProofListPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AuthenticateDomainPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Pke)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Pkn)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.NotBefore)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.NotAfter)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *AuthenticateDomainPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Confirmation)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.ConfirmedBy)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Pke)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Pkn)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.NotBefore)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.NotAfter)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *EstablishCooperationPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NotBefore)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.NotAfter)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Interest)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Cost)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *EstablishCooperationPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Confirmation)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.ConfirmedBy)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ForwardCooperationDataPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NotBefore)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.NotAfter)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Interest)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Cost)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Domain1Name)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Domain2Name)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Domain1Location)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Domain2Location)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ForwardCooperationDataPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ExchangeCooperationDataPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ExchangeCooperationDataPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ModifyCooperationCostPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cost)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ModifyCooperationCostPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Confirmation)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.ConfirmedBy)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *DisableCooperationPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *DisableCooperationPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Confirmation)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.ConfirmedBy)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *EnableCooperationPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *EnableCooperationPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Confirmation)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.ConfirmedBy)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ModifyCooperationValidityPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NotBefore)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.NotAfter)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ModifyCooperationValidityPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Confirmation)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.ConfirmedBy)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ModifyCooperationInterestPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Interest)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ModifyCooperationInterestPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Confirmation)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.ConfirmedBy)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *RevokeCooperationPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *RevokeCooperationPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Confirmation)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.ConfirmedBy)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *PublishProofListPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *PublishProofListPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CdacPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CdacPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CdacPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &CdacPacketData_NoData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticateDomainPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthenticateDomainPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &CdacPacketData_AuthenticateDomainPacket{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstablishCooperationPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EstablishCooperationPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &CdacPacketData_EstablishCooperationPacket{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardCooperationDataPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardCooperationDataPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &CdacPacketData_ForwardCooperationDataPacket{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeCooperationDataPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExchangeCooperationDataPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &CdacPacketData_ExchangeCooperationDataPacket{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifyCooperationCostPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModifyCooperationCostPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &CdacPacketData_ModifyCooperationCostPacket{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableCooperationPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisableCooperationPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &CdacPacketData_DisableCooperationPacket{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCooperationPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnableCooperationPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &CdacPacketData_EnableCooperationPacket{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifyCooperationValidityPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModifyCooperationValidityPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &CdacPacketData_ModifyCooperationValidityPacket{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifyCooperationInterestPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ModifyCooperationInterestPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &CdacPacketData_ModifyCooperationInterestPacket{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokeCooperationPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RevokeCooperationPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &CdacPacketData_RevokeCooperationPacket{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishProofListPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PublishProofListPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &CdacPacketData_PublishProofListPacket{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticateDomainPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticateDomainPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticateDomainPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pke", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pke = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pkn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pkn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotBefore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotBefore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotAfter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotAfter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticateDomainPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticateDomainPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticateDomainPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirmation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pke", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pke = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pkn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pkn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotBefore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotBefore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotAfter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotAfter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstablishCooperationPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstablishCooperationPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstablishCooperationPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotBefore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotBefore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotAfter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotAfter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstablishCooperationPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstablishCooperationPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstablishCooperationPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirmation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardCooperationDataPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardCooperationDataPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardCooperationDataPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotBefore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotBefore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotAfter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotAfter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain1Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain1Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain1Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain1Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain2Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain2Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardCooperationDataPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardCooperationDataPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardCooperationDataPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeCooperationDataPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeCooperationDataPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeCooperationDataPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeCooperationDataPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeCooperationDataPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeCooperationDataPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyCooperationCostPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyCooperationCostPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyCooperationCostPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyCooperationCostPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyCooperationCostPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyCooperationCostPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirmation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisableCooperationPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisableCooperationPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisableCooperationPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisableCooperationPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisableCooperationPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisableCooperationPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirmation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnableCooperationPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableCooperationPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableCooperationPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnableCooperationPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableCooperationPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableCooperationPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirmation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyCooperationValidityPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyCooperationValidityPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyCooperationValidityPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotBefore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotBefore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotAfter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotAfter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyCooperationValidityPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyCooperationValidityPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyCooperationValidityPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirmation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyCooperationInterestPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyCooperationInterestPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyCooperationInterestPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyCooperationInterestPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyCooperationInterestPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyCooperationInterestPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirmation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevokeCooperationPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevokeCooperationPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevokeCooperationPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevokeCooperationPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevokeCooperationPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevokeCooperationPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirmation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfirmedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishProofListPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishProofListPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishProofListPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishProofListPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishProofListPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishProofListPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
