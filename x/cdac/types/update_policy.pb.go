// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cdac/update_policy.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpdatePolicy struct {
	Query           bool   `protobuf:"varint,1,opt,name=query,proto3" json:"query,omitempty"`
	Event           bool   `protobuf:"varint,2,opt,name=event,proto3" json:"event,omitempty"`
	PeriodicalQuery bool   `protobuf:"varint,3,opt,name=periodicalQuery,proto3" json:"periodicalQuery,omitempty"`
	Creator         string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *UpdatePolicy) Reset()         { *m = UpdatePolicy{} }
func (m *UpdatePolicy) String() string { return proto.CompactTextString(m) }
func (*UpdatePolicy) ProtoMessage()    {}
func (*UpdatePolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_69d894f1cd24856a, []int{0}
}
func (m *UpdatePolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePolicy.Merge(m, src)
}
func (m *UpdatePolicy) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePolicy.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePolicy proto.InternalMessageInfo

func (m *UpdatePolicy) GetQuery() bool {
	if m != nil {
		return m.Query
	}
	return false
}

func (m *UpdatePolicy) GetEvent() bool {
	if m != nil {
		return m.Event
	}
	return false
}

func (m *UpdatePolicy) GetPeriodicalQuery() bool {
	if m != nil {
		return m.PeriodicalQuery
	}
	return false
}

func (m *UpdatePolicy) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*UpdatePolicy)(nil), "crossdomain.cdac.UpdatePolicy")
}

func init() { proto.RegisterFile("cdac/update_policy.proto", fileDescriptor_69d894f1cd24856a) }

var fileDescriptor_69d894f1cd24856a = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x48, 0x4e, 0x49, 0x4c,
	0xd6, 0x2f, 0x2d, 0x48, 0x49, 0x2c, 0x49, 0x8d, 0x2f, 0xc8, 0xcf, 0xc9, 0x4c, 0xae, 0xd4, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x48, 0x2e, 0xca, 0x2f, 0x2e, 0x4e, 0xc9, 0xcf, 0x4d, 0xcc,
	0xcc, 0xd3, 0x03, 0xa9, 0x52, 0xaa, 0xe3, 0xe2, 0x09, 0x05, 0x2b, 0x0c, 0x00, 0xab, 0x13, 0x12,
	0xe1, 0x62, 0x2d, 0x2c, 0x4d, 0x2d, 0xaa, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x08, 0x82, 0x70,
	0x40, 0xa2, 0xa9, 0x65, 0xa9, 0x79, 0x25, 0x12, 0x4c, 0x10, 0x51, 0x30, 0x47, 0x48, 0x83, 0x8b,
	0xbf, 0x20, 0xb5, 0x28, 0x33, 0x3f, 0x25, 0x33, 0x39, 0x31, 0x27, 0x10, 0xac, 0x8b, 0x19, 0x2c,
	0x8f, 0x2e, 0x2c, 0x24, 0xc1, 0xc5, 0x9e, 0x5c, 0x94, 0x9a, 0x58, 0x92, 0x5f, 0x24, 0xc1, 0xa2,
	0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe3, 0x3a, 0x19, 0x9d, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c,
	0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1,
	0x1c, 0x43, 0x94, 0x04, 0x92, 0x5b, 0xf5, 0x2b, 0xf4, 0xc1, 0x7e, 0x2a, 0xa9, 0x2c, 0x48, 0x2d,
	0x4e, 0x62, 0x03, 0x7b, 0xc6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xbf, 0x0d, 0x2d, 0xe8,
	0x00, 0x00, 0x00,
}

func (m *UpdatePolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintUpdatePolicy(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.PeriodicalQuery {
		i--
		if m.PeriodicalQuery {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Event {
		i--
		if m.Event {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Query {
		i--
		if m.Query {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUpdatePolicy(dAtA []byte, offset int, v uint64) int {
	offset -= sovUpdatePolicy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdatePolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query {
		n += 2
	}
	if m.Event {
		n += 2
	}
	if m.PeriodicalQuery {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovUpdatePolicy(uint64(l))
	}
	return n
}

func sovUpdatePolicy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUpdatePolicy(x uint64) (n int) {
	return sovUpdatePolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdatePolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdatePolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatePolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Query = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatePolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Event = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodicalQuery", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatePolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PeriodicalQuery = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatePolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdatePolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatePolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpdatePolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdatePolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUpdatePolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUpdatePolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdatePolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdatePolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUpdatePolicy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUpdatePolicy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUpdatePolicy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUpdatePolicy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUpdatePolicy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUpdatePolicy = fmt.Errorf("proto: unexpected end of group")
)
