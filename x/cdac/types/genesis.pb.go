// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cdac/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the cdac module's genesis state.
type GenesisState struct {
	Params                          Params                       `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	PortId                          string                       `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	PublicKeyList                   []PublicKey                  `protobuf:"bytes,3,rep,name=publicKeyList,proto3" json:"publicKeyList"`
	PublicKeyCount                  uint64                       `protobuf:"varint,4,opt,name=publicKeyCount,proto3" json:"publicKeyCount,omitempty"`
	ValidityList                    []Validity                   `protobuf:"bytes,5,rep,name=validityList,proto3" json:"validityList"`
	ValidityCount                   uint64                       `protobuf:"varint,6,opt,name=validityCount,proto3" json:"validityCount,omitempty"`
	CertificateList                 []Certificate                `protobuf:"bytes,7,rep,name=certificateList,proto3" json:"certificateList"`
	CertificateCount                uint64                       `protobuf:"varint,8,opt,name=certificateCount,proto3" json:"certificateCount,omitempty"`
	IbcConnectionList               []IbcConnection              `protobuf:"bytes,9,rep,name=ibcConnectionList,proto3" json:"ibcConnectionList"`
	IbcConnectionCount              uint64                       `protobuf:"varint,10,opt,name=ibcConnectionCount,proto3" json:"ibcConnectionCount,omitempty"`
	DomainList                      []Domain                     `protobuf:"bytes,11,rep,name=domainList,proto3" json:"domainList"`
	DomainCount                     uint64                       `protobuf:"varint,12,opt,name=domainCount,proto3" json:"domainCount,omitempty"`
	AuthenticationLogList           []AuthenticationLog          `protobuf:"bytes,13,rep,name=authenticationLogList,proto3" json:"authenticationLogList"`
	AuthenticationLogCount          uint64                       `protobuf:"varint,14,opt,name=authenticationLogCount,proto3" json:"authenticationLogCount,omitempty"`
	DomainCooperationList           []DomainCooperation          `protobuf:"bytes,15,rep,name=domainCooperationList,proto3" json:"domainCooperationList"`
	DomainCooperationCount          uint64                       `protobuf:"varint,16,opt,name=domainCooperationCount,proto3" json:"domainCooperationCount,omitempty"`
	CooperationLogList              []CooperationLog             `protobuf:"bytes,17,rep,name=cooperationLogList,proto3" json:"cooperationLogList"`
	CooperationLogCount             uint64                       `protobuf:"varint,18,opt,name=cooperationLogCount,proto3" json:"cooperationLogCount,omitempty"`
	ForwardPolicyList               []ForwardPolicy              `protobuf:"bytes,19,rep,name=forwardPolicyList,proto3" json:"forwardPolicyList"`
	ForwardPolicyCount              uint64                       `protobuf:"varint,20,opt,name=forwardPolicyCount,proto3" json:"forwardPolicyCount,omitempty"`
	DomainMapList                   []DomainMap                  `protobuf:"bytes,21,rep,name=domainMapList,proto3" json:"domainMapList"`
	CooperationNetworkFeaturesList  []CooperationNetworkFeatures `protobuf:"bytes,22,rep,name=cooperationNetworkFeaturesList,proto3" json:"cooperationNetworkFeaturesList"`
	CooperationNetworkFeaturesCount uint64                       `protobuf:"varint,23,opt,name=cooperationNetworkFeaturesCount,proto3" json:"cooperationNetworkFeaturesCount,omitempty"`
	CooperationDataList             []CooperationData            `protobuf:"bytes,24,rep,name=cooperationDataList,proto3" json:"cooperationDataList"`
	CooperationNetworkList          []CooperationNetwork         `protobuf:"bytes,25,rep,name=cooperationNetworkList,proto3" json:"cooperationNetworkList"`
	CooperationNetworkCount         uint64                       `protobuf:"varint,26,opt,name=cooperationNetworkCount,proto3" json:"cooperationNetworkCount,omitempty"`
	UpdatePolicy                    *UpdatePolicy                `protobuf:"bytes,27,opt,name=updatePolicy,proto3" json:"updatePolicy,omitempty"`
	CooperativeDomainList           []CooperativeDomain          `protobuf:"bytes,28,rep,name=cooperativeDomainList,proto3" json:"cooperativeDomainList"`
	CooperativeDomainCount          uint64                       `protobuf:"varint,29,opt,name=cooperativeDomainCount,proto3" json:"cooperativeDomainCount,omitempty"`
	DelegationPathList              []DelegationPath             `protobuf:"bytes,30,rep,name=delegationPathList,proto3" json:"delegationPathList"`
	DelegationPathCount             uint64                       `protobuf:"varint,31,opt,name=delegationPathCount,proto3" json:"delegationPathCount,omitempty"`
	PathList                        []Path                       `protobuf:"bytes,32,rep,name=pathList,proto3" json:"pathList"`
	PathCount                       uint64                       `protobuf:"varint,33,opt,name=pathCount,proto3" json:"pathCount,omitempty"`
	TimeCalculationList             []TimeCalculation            `protobuf:"bytes,34,rep,name=timeCalculationList,proto3" json:"timeCalculationList"`
	TimeCalculationCount            uint64                       `protobuf:"varint,35,opt,name=timeCalculationCount,proto3" json:"timeCalculationCount,omitempty"`
	CalculationTimeList             []CalculationTime            `protobuf:"bytes,36,rep,name=calculationTimeList,proto3" json:"calculationTimeList"`
	CalculationTimeCount            uint64                       `protobuf:"varint,37,opt,name=calculationTimeCount,proto3" json:"calculationTimeCount,omitempty"`
	InterDomainAclPolicyList        []InterDomainAclPolicy       `protobuf:"bytes,38,rep,name=interDomainAclPolicyList,proto3" json:"interDomainAclPolicyList"`
	InterDomainAclPolicyCount       uint64                       `protobuf:"varint,39,opt,name=interDomainAclPolicyCount,proto3" json:"interDomainAclPolicyCount,omitempty"`
	InterDomainDclPolicyList        []InterDomainDclPolicy       `protobuf:"bytes,40,rep,name=interDomainDclPolicyList,proto3" json:"interDomainDclPolicyList"`
	InterDomainDclPolicyCount       uint64                       `protobuf:"varint,41,opt,name=interDomainDclPolicyCount,proto3" json:"interDomainDclPolicyCount,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4e370488142f36e, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *GenesisState) GetPublicKeyList() []PublicKey {
	if m != nil {
		return m.PublicKeyList
	}
	return nil
}

func (m *GenesisState) GetPublicKeyCount() uint64 {
	if m != nil {
		return m.PublicKeyCount
	}
	return 0
}

func (m *GenesisState) GetValidityList() []Validity {
	if m != nil {
		return m.ValidityList
	}
	return nil
}

func (m *GenesisState) GetValidityCount() uint64 {
	if m != nil {
		return m.ValidityCount
	}
	return 0
}

func (m *GenesisState) GetCertificateList() []Certificate {
	if m != nil {
		return m.CertificateList
	}
	return nil
}

func (m *GenesisState) GetCertificateCount() uint64 {
	if m != nil {
		return m.CertificateCount
	}
	return 0
}

func (m *GenesisState) GetIbcConnectionList() []IbcConnection {
	if m != nil {
		return m.IbcConnectionList
	}
	return nil
}

func (m *GenesisState) GetIbcConnectionCount() uint64 {
	if m != nil {
		return m.IbcConnectionCount
	}
	return 0
}

func (m *GenesisState) GetDomainList() []Domain {
	if m != nil {
		return m.DomainList
	}
	return nil
}

func (m *GenesisState) GetDomainCount() uint64 {
	if m != nil {
		return m.DomainCount
	}
	return 0
}

func (m *GenesisState) GetAuthenticationLogList() []AuthenticationLog {
	if m != nil {
		return m.AuthenticationLogList
	}
	return nil
}

func (m *GenesisState) GetAuthenticationLogCount() uint64 {
	if m != nil {
		return m.AuthenticationLogCount
	}
	return 0
}

func (m *GenesisState) GetDomainCooperationList() []DomainCooperation {
	if m != nil {
		return m.DomainCooperationList
	}
	return nil
}

func (m *GenesisState) GetDomainCooperationCount() uint64 {
	if m != nil {
		return m.DomainCooperationCount
	}
	return 0
}

func (m *GenesisState) GetCooperationLogList() []CooperationLog {
	if m != nil {
		return m.CooperationLogList
	}
	return nil
}

func (m *GenesisState) GetCooperationLogCount() uint64 {
	if m != nil {
		return m.CooperationLogCount
	}
	return 0
}

func (m *GenesisState) GetForwardPolicyList() []ForwardPolicy {
	if m != nil {
		return m.ForwardPolicyList
	}
	return nil
}

func (m *GenesisState) GetForwardPolicyCount() uint64 {
	if m != nil {
		return m.ForwardPolicyCount
	}
	return 0
}

func (m *GenesisState) GetDomainMapList() []DomainMap {
	if m != nil {
		return m.DomainMapList
	}
	return nil
}

func (m *GenesisState) GetCooperationNetworkFeaturesList() []CooperationNetworkFeatures {
	if m != nil {
		return m.CooperationNetworkFeaturesList
	}
	return nil
}

func (m *GenesisState) GetCooperationNetworkFeaturesCount() uint64 {
	if m != nil {
		return m.CooperationNetworkFeaturesCount
	}
	return 0
}

func (m *GenesisState) GetCooperationDataList() []CooperationData {
	if m != nil {
		return m.CooperationDataList
	}
	return nil
}

func (m *GenesisState) GetCooperationNetworkList() []CooperationNetwork {
	if m != nil {
		return m.CooperationNetworkList
	}
	return nil
}

func (m *GenesisState) GetCooperationNetworkCount() uint64 {
	if m != nil {
		return m.CooperationNetworkCount
	}
	return 0
}

func (m *GenesisState) GetUpdatePolicy() *UpdatePolicy {
	if m != nil {
		return m.UpdatePolicy
	}
	return nil
}

func (m *GenesisState) GetCooperativeDomainList() []CooperativeDomain {
	if m != nil {
		return m.CooperativeDomainList
	}
	return nil
}

func (m *GenesisState) GetCooperativeDomainCount() uint64 {
	if m != nil {
		return m.CooperativeDomainCount
	}
	return 0
}

func (m *GenesisState) GetDelegationPathList() []DelegationPath {
	if m != nil {
		return m.DelegationPathList
	}
	return nil
}

func (m *GenesisState) GetDelegationPathCount() uint64 {
	if m != nil {
		return m.DelegationPathCount
	}
	return 0
}

func (m *GenesisState) GetPathList() []Path {
	if m != nil {
		return m.PathList
	}
	return nil
}

func (m *GenesisState) GetPathCount() uint64 {
	if m != nil {
		return m.PathCount
	}
	return 0
}

func (m *GenesisState) GetTimeCalculationList() []TimeCalculation {
	if m != nil {
		return m.TimeCalculationList
	}
	return nil
}

func (m *GenesisState) GetTimeCalculationCount() uint64 {
	if m != nil {
		return m.TimeCalculationCount
	}
	return 0
}

func (m *GenesisState) GetCalculationTimeList() []CalculationTime {
	if m != nil {
		return m.CalculationTimeList
	}
	return nil
}

func (m *GenesisState) GetCalculationTimeCount() uint64 {
	if m != nil {
		return m.CalculationTimeCount
	}
	return 0
}

func (m *GenesisState) GetInterDomainAclPolicyList() []InterDomainAclPolicy {
	if m != nil {
		return m.InterDomainAclPolicyList
	}
	return nil
}

func (m *GenesisState) GetInterDomainAclPolicyCount() uint64 {
	if m != nil {
		return m.InterDomainAclPolicyCount
	}
	return 0
}

func (m *GenesisState) GetInterDomainDclPolicyList() []InterDomainDclPolicy {
	if m != nil {
		return m.InterDomainDclPolicyList
	}
	return nil
}

func (m *GenesisState) GetInterDomainDclPolicyCount() uint64 {
	if m != nil {
		return m.InterDomainDclPolicyCount
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "crossdomain.cdac.GenesisState")
}

func init() { proto.RegisterFile("cdac/genesis.proto", fileDescriptor_c4e370488142f36e) }

var fileDescriptor_c4e370488142f36e = []byte{
	// 1057 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0xdf, 0x4e, 0x1b, 0x47,
	0x14, 0xc6, 0x71, 0x43, 0x49, 0x18, 0x20, 0xc0, 0x00, 0x66, 0x31, 0x61, 0x71, 0x08, 0x25, 0x6e,
	0x55, 0x99, 0x8a, 0x4a, 0x51, 0x2e, 0xaa, 0x4a, 0xc1, 0xab, 0xa4, 0x51, 0x93, 0x0a, 0x91, 0x36,
	0x52, 0x7b, 0xb3, 0x1a, 0xef, 0x0e, 0x66, 0x15, 0xb3, 0xb3, 0x5a, 0x8f, 0x93, 0xd2, 0xa7, 0xe8,
	0x45, 0x1f, 0x2a, 0x97, 0xb9, 0xec, 0x55, 0x55, 0xc1, 0x8b, 0x44, 0x73, 0xce, 0xac, 0xbd, 0xb3,
	0x33, 0x4b, 0x72, 0x67, 0x7f, 0xe7, 0xcf, 0xf7, 0xf3, 0xf8, 0x9c, 0xd9, 0x25, 0x34, 0x8a, 0x59,
	0x74, 0x38, 0xe0, 0x29, 0x1f, 0x25, 0xa3, 0x6e, 0x96, 0x0b, 0x29, 0xe8, 0x4a, 0x94, 0x8b, 0xd1,
	0x28, 0x16, 0x17, 0x2c, 0x49, 0xbb, 0x2a, 0xde, 0x5a, 0x1f, 0x88, 0x81, 0x80, 0xe0, 0xa1, 0xfa,
	0x84, 0x79, 0xad, 0x55, 0xa8, 0xcd, 0x58, 0xce, 0x2e, 0x74, 0x69, 0x6b, 0x03, 0xa5, 0x71, 0x7f,
	0x98, 0x44, 0xe1, 0x1b, 0x7e, 0xa9, 0xe5, 0x35, 0x90, 0xdf, 0xb2, 0x61, 0x12, 0x27, 0xb2, 0x10,
	0x9b, 0x20, 0x46, 0x3c, 0x97, 0xc9, 0x59, 0x12, 0x31, 0xc9, 0xb5, 0xbe, 0x05, 0x7a, 0xd2, 0x8f,
	0xc2, 0x48, 0xa4, 0x29, 0x8f, 0x64, 0x22, 0x52, 0xc3, 0x51, 0x93, 0xa1, 0xb4, 0x03, 0x12, 0x1b,
	0xcb, 0x73, 0x9e, 0x4a, 0xd5, 0x26, 0x11, 0x69, 0x38, 0x14, 0x03, 0x23, 0x8c, 0x15, 0x61, 0x24,
	0x44, 0xc6, 0x73, 0x56, 0x6a, 0xd8, 0x42, 0x86, 0xa9, 0x5e, 0x2a, 0x45, 0x8e, 0x33, 0x91, 0xbf,
	0x63, 0x79, 0x1c, 0x66, 0x62, 0x98, 0x44, 0x97, 0xc6, 0xcf, 0xd4, 0x5d, 0x2f, 0x58, 0xa6, 0xe5,
	0x87, 0x56, 0xb7, 0x94, 0xcb, 0x77, 0x22, 0x7f, 0x13, 0x9e, 0x71, 0x26, 0xc7, 0x39, 0x2f, 0x8e,
	0x69, 0xdb, 0x4a, 0x8c, 0x99, 0x64, 0x3a, 0xe8, 0xd7, 0x75, 0xd1, 0x71, 0x0f, 0xe2, 0xe3, 0x2c,
	0x66, 0x92, 0x9b, 0x58, 0x3b, 0x66, 0xe5, 0x5b, 0x1e, 0x1a, 0x47, 0x85, 0x3f, 0x36, 0xe6, 0x43,
	0x3e, 0xc0, 0xbe, 0x19, 0x93, 0xe7, 0x3a, 0xb6, 0xac, 0xff, 0xcb, 0x89, 0x80, 0x88, 0x32, 0xb9,
	0xe0, 0x61, 0xc4, 0x86, 0xd1, 0x78, 0x58, 0x3e, 0x36, 0xcd, 0x3f, 0xd5, 0x43, 0x95, 0xa8, 0x83,
	0x7b, 0xf8, 0xff, 0xa5, 0x92, 0xe7, 0xda, 0x3f, 0x64, 0xd1, 0xd0, 0x24, 0x75, 0xe4, 0xc4, 0x95,
	0x9c, 0xbd, 0x7f, 0x9a, 0x64, 0xf1, 0x19, 0x0e, 0xe6, 0x2b, 0xc9, 0x24, 0xa7, 0x8f, 0xc8, 0x1c,
	0x0e, 0x9b, 0xd7, 0x68, 0x37, 0x3a, 0x0b, 0x47, 0x5e, 0xb7, 0x3a, 0xa8, 0xdd, 0x13, 0x88, 0x1f,
	0xcf, 0xbe, 0xff, 0x6f, 0x77, 0xe6, 0x54, 0x67, 0xd3, 0x4d, 0x72, 0x3b, 0x13, 0xb9, 0x0c, 0x93,
	0xd8, 0xfb, 0xa2, 0xdd, 0xe8, 0xcc, 0x9f, 0xce, 0xa9, 0xaf, 0xcf, 0x63, 0xfa, 0x8c, 0x2c, 0xe1,
	0xa8, 0xfe, 0xcc, 0x2f, 0x5f, 0x24, 0x23, 0xe9, 0xdd, 0x6a, 0xdf, 0xea, 0x2c, 0x1c, 0x6d, 0x3b,
	0xfa, 0x16, 0x69, 0xba, 0xb5, 0x59, 0x47, 0x0f, 0xc8, 0xdd, 0x89, 0xd0, 0x13, 0xe3, 0x54, 0x7a,
	0xb3, 0xed, 0x46, 0x67, 0xf6, 0xb4, 0xa2, 0xd2, 0x80, 0x2c, 0x16, 0x4b, 0x00, 0x7e, 0x5f, 0x82,
	0x5f, 0xcb, 0xf6, 0x7b, 0xad, 0xb3, 0xb4, 0x9d, 0x51, 0x45, 0xf7, 0xc9, 0x52, 0xf1, 0x1d, 0xcd,
	0xe6, 0xc0, 0xcc, 0x14, 0xe9, 0x4b, 0xb2, 0x5c, 0xda, 0x2d, 0xb0, 0xbb, 0x0d, 0x76, 0x3b, 0xb6,
	0x5d, 0x6f, 0x9a, 0xa8, 0x1d, 0xab, 0xb5, 0xf4, 0x1b, 0xb2, 0x52, 0x92, 0xd0, 0xf7, 0x0e, 0xf8,
	0x5a, 0x3a, 0x7d, 0x45, 0x56, 0x93, 0x7e, 0xd4, 0x9b, 0x6c, 0x2f, 0x98, 0xcf, 0x83, 0xf9, 0xae,
	0x6d, 0xfe, 0xbc, 0x9c, 0xaa, 0xed, 0xed, 0x7a, 0xda, 0x25, 0xd4, 0x10, 0x11, 0x81, 0x00, 0x82,
	0x23, 0x42, 0x7f, 0x24, 0x04, 0x5d, 0xc0, 0x7d, 0x01, 0xdc, 0x1d, 0x13, 0x13, 0xc0, 0x67, 0x6d,
	0x5b, 0xaa, 0xa0, 0x6d, 0xb2, 0x80, 0xdf, 0xd0, 0x68, 0x11, 0x8c, 0xca, 0x12, 0x0d, 0xc9, 0x86,
	0x79, 0xef, 0xbc, 0x10, 0x03, 0x30, 0x5b, 0x02, 0xb3, 0x07, 0xb6, 0xd9, 0x93, 0x6a, 0xba, 0xf6,
	0x75, 0xf7, 0xa1, 0x8f, 0x48, 0xd3, 0x0a, 0x20, 0xcd, 0x5d, 0xa0, 0xa9, 0x89, 0x2a, 0xb0, 0x82,
	0x73, 0x72, 0x89, 0x00, 0xd8, 0x72, 0x1d, 0x58, 0x50, 0x4d, 0x2f, 0xc0, 0x9c, 0x7d, 0x14, 0x98,
	0x15, 0x40, 0xb0, 0x15, 0x04, 0x73, 0x47, 0xe9, 0x6b, 0x42, 0x4b, 0xf7, 0x5a, 0x71, 0x5c, 0xab,
	0x40, 0xd5, 0x76, 0x8c, 0xa5, 0x91, 0xab, 0x91, 0x1c, 0x1d, 0xe8, 0x77, 0x64, 0xcd, 0x54, 0x11,
	0x86, 0x02, 0x8c, 0x2b, 0xa4, 0x46, 0x54, 0xdf, 0xec, 0x27, 0x70, 0xe7, 0x00, 0xc8, 0x5a, 0xdd,
	0x88, 0x3e, 0x2d, 0xa7, 0x16, 0x23, 0x6a, 0xd5, 0xab, 0x11, 0x35, 0x44, 0xa4, 0x58, 0xc7, 0x11,
	0xb5, 0x23, 0xea, 0xfe, 0x41, 0x97, 0x97, 0x2c, 0x03, 0x80, 0x8d, 0xba, 0xfb, 0x27, 0x28, 0xd2,
	0x8a, 0xfb, 0xc7, 0xa8, 0xa3, 0x7f, 0x11, 0xbf, 0xf4, 0x23, 0x7f, 0xc1, 0xc7, 0xc5, 0x53, 0xfd,
	0xcc, 0x81, 0xce, 0x4d, 0xe8, 0xfc, 0xed, 0x8d, 0x67, 0x5c, 0xa9, 0xd3, 0x56, 0x9f, 0xe8, 0x4c,
	0x7f, 0x22, 0xbb, 0xf5, 0x19, 0x78, 0x02, 0x9b, 0x70, 0x02, 0x9f, 0x4a, 0xa3, 0xbf, 0x1b, 0xff,
	0x62, 0xc0, 0x24, 0x03, 0x74, 0x0f, 0xd0, 0xef, 0xdf, 0x88, 0xae, 0x92, 0x35, 0xaf, 0xab, 0x07,
	0xed, 0x93, 0xa6, 0xed, 0x0e, 0xdd, 0xb7, 0xa0, 0xfb, 0xfe, 0xe7, 0x1c, 0x8c, 0x36, 0xa8, 0xe9,
	0x44, 0x1f, 0x93, 0x4d, 0x3b, 0x82, 0x07, 0xd0, 0x82, 0x03, 0xa8, 0x0b, 0xd3, 0x63, 0xb2, 0x88,
	0x8f, 0x73, 0x1c, 0x0e, 0x6f, 0x1b, 0x1e, 0x6f, 0xbe, 0xcd, 0xf4, 0x5b, 0x29, 0xeb, 0xd4, 0xa8,
	0x51, 0x3b, 0x5f, 0x7a, 0xf0, 0x07, 0xd3, 0x9b, 0xef, 0x5e, 0xdd, 0xce, 0xf7, 0xaa, 0xe9, 0xc5,
	0xce, 0x3b, 0xfb, 0xa8, 0x9d, 0xb7, 0x02, 0xf8, 0xeb, 0x76, 0x70, 0xe7, 0xdd, 0x51, 0xb5, 0xf3,
	0xd3, 0x57, 0x8e, 0x13, 0x26, 0xcf, 0x81, 0xca, 0xaf, 0xdb, 0xf9, 0xc0, 0xc8, 0x2d, 0x76, 0xde,
	0xee, 0xa0, 0x76, 0xde, 0x54, 0x11, 0x66, 0x17, 0x77, 0xde, 0x11, 0xa2, 0x8f, 0xc9, 0x9d, 0xac,
	0xf0, 0x6f, 0x83, 0x7f, 0xd3, 0xf5, 0x06, 0x31, 0x71, 0x9d, 0x64, 0xd3, 0x7b, 0x64, 0x3e, 0x9b,
	0x38, 0xdc, 0x07, 0x87, 0xa9, 0xa0, 0xe6, 0x56, 0xbd, 0xfe, 0xf4, 0xa6, 0xaf, 0x43, 0x60, 0xb1,
	0x57, 0x37, 0xb7, 0xbf, 0x9a, 0xc9, 0xc5, 0xdc, 0x3a, 0x7a, 0xd0, 0x23, 0xb2, 0x5e, 0x91, 0x91,
	0xe1, 0x01, 0x30, 0x38, 0x63, 0xb0, 0x46, 0x53, 0x4d, 0x99, 0x01, 0xce, 0x7e, 0xed, 0x1a, 0x99,
	0xc9, 0x93, 0x35, 0xb2, 0x7b, 0x28, 0x9c, 0x8a, 0x8c, 0x38, 0x5f, 0x21, 0x8e, 0x2b, 0x46, 0xcf,
	0x89, 0x07, 0xef, 0x79, 0x38, 0x13, 0x4f, 0xa2, 0x61, 0xe9, 0xc2, 0x3d, 0x00, 0xa6, 0x03, 0xc7,
	0x3b, 0x81, 0xa3, 0x42, 0x83, 0xd5, 0x76, 0xa3, 0x3f, 0x90, 0x2d, 0x57, 0x0c, 0x11, 0x1f, 0x02,
	0x62, 0x7d, 0x42, 0x85, 0x33, 0x30, 0x38, 0x3b, 0x9f, 0xc1, 0x19, 0xdc, 0xc0, 0x19, 0xdc, 0xc0,
	0x19, 0x98, 0x9c, 0x5f, 0x5b, 0x9c, 0x66, 0xc2, 0xf1, 0xd1, 0xfb, 0x2b, 0xbf, 0xf1, 0xe1, 0xca,
	0x6f, 0xfc, 0x7f, 0xe5, 0x37, 0xfe, 0xbe, 0xf6, 0x67, 0x3e, 0x5c, 0xfb, 0x33, 0xff, 0x5e, 0xfb,
	0x33, 0x7f, 0x78, 0x25, 0xbc, 0xc3, 0x3f, 0x0f, 0xf1, 0x05, 0xfe, 0x32, 0xe3, 0xa3, 0xfe, 0x1c,
	0xbc, 0x51, 0x7f, 0xff, 0x31, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x2f, 0x93, 0xe6, 0xee, 0x0d, 0x00,
	0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InterDomainDclPolicyCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.InterDomainDclPolicyCount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if len(m.InterDomainDclPolicyList) > 0 {
		for iNdEx := len(m.InterDomainDclPolicyList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InterDomainDclPolicyList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.InterDomainAclPolicyCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.InterDomainAclPolicyCount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if len(m.InterDomainAclPolicyList) > 0 {
		for iNdEx := len(m.InterDomainAclPolicyList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InterDomainAclPolicyList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.CalculationTimeCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CalculationTimeCount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if len(m.CalculationTimeList) > 0 {
		for iNdEx := len(m.CalculationTimeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CalculationTimeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.TimeCalculationCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.TimeCalculationCount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if len(m.TimeCalculationList) > 0 {
		for iNdEx := len(m.TimeCalculationList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimeCalculationList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	if m.PathCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PathCount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if len(m.PathList) > 0 {
		for iNdEx := len(m.PathList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PathList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x82
		}
	}
	if m.DelegationPathCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DelegationPathCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if len(m.DelegationPathList) > 0 {
		for iNdEx := len(m.DelegationPathList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationPathList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.CooperativeDomainCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CooperativeDomainCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if len(m.CooperativeDomainList) > 0 {
		for iNdEx := len(m.CooperativeDomainList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CooperativeDomainList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.UpdatePolicy != nil {
		{
			size, err := m.UpdatePolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.CooperationNetworkCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CooperationNetworkCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.CooperationNetworkList) > 0 {
		for iNdEx := len(m.CooperationNetworkList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CooperationNetworkList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.CooperationDataList) > 0 {
		for iNdEx := len(m.CooperationDataList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CooperationDataList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.CooperationNetworkFeaturesCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CooperationNetworkFeaturesCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.CooperationNetworkFeaturesList) > 0 {
		for iNdEx := len(m.CooperationNetworkFeaturesList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CooperationNetworkFeaturesList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.DomainMapList) > 0 {
		for iNdEx := len(m.DomainMapList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DomainMapList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.ForwardPolicyCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ForwardPolicyCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ForwardPolicyList) > 0 {
		for iNdEx := len(m.ForwardPolicyList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForwardPolicyList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.CooperationLogCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CooperationLogCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.CooperationLogList) > 0 {
		for iNdEx := len(m.CooperationLogList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CooperationLogList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.DomainCooperationCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DomainCooperationCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.DomainCooperationList) > 0 {
		for iNdEx := len(m.DomainCooperationList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DomainCooperationList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.AuthenticationLogCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AuthenticationLogCount))
		i--
		dAtA[i] = 0x70
	}
	if len(m.AuthenticationLogList) > 0 {
		for iNdEx := len(m.AuthenticationLogList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuthenticationLogList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.DomainCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DomainCount))
		i--
		dAtA[i] = 0x60
	}
	if len(m.DomainList) > 0 {
		for iNdEx := len(m.DomainList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DomainList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.IbcConnectionCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.IbcConnectionCount))
		i--
		dAtA[i] = 0x50
	}
	if len(m.IbcConnectionList) > 0 {
		for iNdEx := len(m.IbcConnectionList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IbcConnectionList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.CertificateCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.CertificateCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.CertificateList) > 0 {
		for iNdEx := len(m.CertificateList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CertificateList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ValidityCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ValidityCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ValidityList) > 0 {
		for iNdEx := len(m.ValidityList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidityList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.PublicKeyCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PublicKeyCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PublicKeyList) > 0 {
		for iNdEx := len(m.PublicKeyList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PublicKeyList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.PublicKeyList) > 0 {
		for _, e := range m.PublicKeyList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.PublicKeyCount != 0 {
		n += 1 + sovGenesis(uint64(m.PublicKeyCount))
	}
	if len(m.ValidityList) > 0 {
		for _, e := range m.ValidityList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.ValidityCount != 0 {
		n += 1 + sovGenesis(uint64(m.ValidityCount))
	}
	if len(m.CertificateList) > 0 {
		for _, e := range m.CertificateList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.CertificateCount != 0 {
		n += 1 + sovGenesis(uint64(m.CertificateCount))
	}
	if len(m.IbcConnectionList) > 0 {
		for _, e := range m.IbcConnectionList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.IbcConnectionCount != 0 {
		n += 1 + sovGenesis(uint64(m.IbcConnectionCount))
	}
	if len(m.DomainList) > 0 {
		for _, e := range m.DomainList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.DomainCount != 0 {
		n += 1 + sovGenesis(uint64(m.DomainCount))
	}
	if len(m.AuthenticationLogList) > 0 {
		for _, e := range m.AuthenticationLogList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.AuthenticationLogCount != 0 {
		n += 1 + sovGenesis(uint64(m.AuthenticationLogCount))
	}
	if len(m.DomainCooperationList) > 0 {
		for _, e := range m.DomainCooperationList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.DomainCooperationCount != 0 {
		n += 2 + sovGenesis(uint64(m.DomainCooperationCount))
	}
	if len(m.CooperationLogList) > 0 {
		for _, e := range m.CooperationLogList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.CooperationLogCount != 0 {
		n += 2 + sovGenesis(uint64(m.CooperationLogCount))
	}
	if len(m.ForwardPolicyList) > 0 {
		for _, e := range m.ForwardPolicyList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.ForwardPolicyCount != 0 {
		n += 2 + sovGenesis(uint64(m.ForwardPolicyCount))
	}
	if len(m.DomainMapList) > 0 {
		for _, e := range m.DomainMapList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CooperationNetworkFeaturesList) > 0 {
		for _, e := range m.CooperationNetworkFeaturesList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.CooperationNetworkFeaturesCount != 0 {
		n += 2 + sovGenesis(uint64(m.CooperationNetworkFeaturesCount))
	}
	if len(m.CooperationDataList) > 0 {
		for _, e := range m.CooperationDataList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CooperationNetworkList) > 0 {
		for _, e := range m.CooperationNetworkList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.CooperationNetworkCount != 0 {
		n += 2 + sovGenesis(uint64(m.CooperationNetworkCount))
	}
	if m.UpdatePolicy != nil {
		l = m.UpdatePolicy.Size()
		n += 2 + l + sovGenesis(uint64(l))
	}
	if len(m.CooperativeDomainList) > 0 {
		for _, e := range m.CooperativeDomainList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.CooperativeDomainCount != 0 {
		n += 2 + sovGenesis(uint64(m.CooperativeDomainCount))
	}
	if len(m.DelegationPathList) > 0 {
		for _, e := range m.DelegationPathList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.DelegationPathCount != 0 {
		n += 2 + sovGenesis(uint64(m.DelegationPathCount))
	}
	if len(m.PathList) > 0 {
		for _, e := range m.PathList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.PathCount != 0 {
		n += 2 + sovGenesis(uint64(m.PathCount))
	}
	if len(m.TimeCalculationList) > 0 {
		for _, e := range m.TimeCalculationList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.TimeCalculationCount != 0 {
		n += 2 + sovGenesis(uint64(m.TimeCalculationCount))
	}
	if len(m.CalculationTimeList) > 0 {
		for _, e := range m.CalculationTimeList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.CalculationTimeCount != 0 {
		n += 2 + sovGenesis(uint64(m.CalculationTimeCount))
	}
	if len(m.InterDomainAclPolicyList) > 0 {
		for _, e := range m.InterDomainAclPolicyList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.InterDomainAclPolicyCount != 0 {
		n += 2 + sovGenesis(uint64(m.InterDomainAclPolicyCount))
	}
	if len(m.InterDomainDclPolicyList) > 0 {
		for _, e := range m.InterDomainDclPolicyList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.InterDomainDclPolicyCount != 0 {
		n += 2 + sovGenesis(uint64(m.InterDomainDclPolicyCount))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeyList = append(m.PublicKeyList, PublicKey{})
			if err := m.PublicKeyList[len(m.PublicKeyList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyCount", wireType)
			}
			m.PublicKeyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicKeyCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidityList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidityList = append(m.ValidityList, Validity{})
			if err := m.ValidityList[len(m.ValidityList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidityCount", wireType)
			}
			m.ValidityCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidityCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateList = append(m.CertificateList, Certificate{})
			if err := m.CertificateList[len(m.CertificateList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateCount", wireType)
			}
			m.CertificateCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertificateCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcConnectionList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcConnectionList = append(m.IbcConnectionList, IbcConnection{})
			if err := m.IbcConnectionList[len(m.IbcConnectionList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcConnectionCount", wireType)
			}
			m.IbcConnectionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IbcConnectionCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainList = append(m.DomainList, Domain{})
			if err := m.DomainList[len(m.DomainList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainCount", wireType)
			}
			m.DomainCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DomainCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationLogList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationLogList = append(m.AuthenticationLogList, AuthenticationLog{})
			if err := m.AuthenticationLogList[len(m.AuthenticationLogList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationLogCount", wireType)
			}
			m.AuthenticationLogCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthenticationLogCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainCooperationList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainCooperationList = append(m.DomainCooperationList, DomainCooperation{})
			if err := m.DomainCooperationList[len(m.DomainCooperationList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainCooperationCount", wireType)
			}
			m.DomainCooperationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DomainCooperationCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationLogList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CooperationLogList = append(m.CooperationLogList, CooperationLog{})
			if err := m.CooperationLogList[len(m.CooperationLogList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationLogCount", wireType)
			}
			m.CooperationLogCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CooperationLogCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardPolicyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardPolicyList = append(m.ForwardPolicyList, ForwardPolicy{})
			if err := m.ForwardPolicyList[len(m.ForwardPolicyList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardPolicyCount", wireType)
			}
			m.ForwardPolicyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwardPolicyCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainMapList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainMapList = append(m.DomainMapList, DomainMap{})
			if err := m.DomainMapList[len(m.DomainMapList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationNetworkFeaturesList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CooperationNetworkFeaturesList = append(m.CooperationNetworkFeaturesList, CooperationNetworkFeatures{})
			if err := m.CooperationNetworkFeaturesList[len(m.CooperationNetworkFeaturesList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationNetworkFeaturesCount", wireType)
			}
			m.CooperationNetworkFeaturesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CooperationNetworkFeaturesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationDataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CooperationDataList = append(m.CooperationDataList, CooperationData{})
			if err := m.CooperationDataList[len(m.CooperationDataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CooperationNetworkList = append(m.CooperationNetworkList, CooperationNetwork{})
			if err := m.CooperationNetworkList[len(m.CooperationNetworkList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationNetworkCount", wireType)
			}
			m.CooperationNetworkCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CooperationNetworkCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatePolicy == nil {
				m.UpdatePolicy = &UpdatePolicy{}
			}
			if err := m.UpdatePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperativeDomainList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CooperativeDomainList = append(m.CooperativeDomainList, CooperativeDomain{})
			if err := m.CooperativeDomainList[len(m.CooperativeDomainList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperativeDomainCount", wireType)
			}
			m.CooperativeDomainCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CooperativeDomainCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationPathList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationPathList = append(m.DelegationPathList, DelegationPath{})
			if err := m.DelegationPathList[len(m.DelegationPathList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationPathCount", wireType)
			}
			m.DelegationPathCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationPathCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathList = append(m.PathList, Path{})
			if err := m.PathList[len(m.PathList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathCount", wireType)
			}
			m.PathCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PathCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCalculationList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeCalculationList = append(m.TimeCalculationList, TimeCalculation{})
			if err := m.TimeCalculationList[len(m.TimeCalculationList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCalculationCount", wireType)
			}
			m.TimeCalculationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeCalculationCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculationTimeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CalculationTimeList = append(m.CalculationTimeList, CalculationTime{})
			if err := m.CalculationTimeList[len(m.CalculationTimeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculationTimeCount", wireType)
			}
			m.CalculationTimeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CalculationTimeCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterDomainAclPolicyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterDomainAclPolicyList = append(m.InterDomainAclPolicyList, InterDomainAclPolicy{})
			if err := m.InterDomainAclPolicyList[len(m.InterDomainAclPolicyList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterDomainAclPolicyCount", wireType)
			}
			m.InterDomainAclPolicyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterDomainAclPolicyCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterDomainDclPolicyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterDomainDclPolicyList = append(m.InterDomainDclPolicyList, InterDomainDclPolicy{})
			if err := m.InterDomainDclPolicyList[len(m.InterDomainDclPolicyList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterDomainDclPolicyCount", wireType)
			}
			m.InterDomainDclPolicyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterDomainDclPolicyCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
