// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cdac/inter_domain_acl_policy.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InterDomainAclPolicy struct {
	Id                uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Label             string   `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	SubjectList       []string `protobuf:"bytes,3,rep,name=subjectList,proto3" json:"subjectList,omitempty"`
	ActionList        []string `protobuf:"bytes,4,rep,name=actionList,proto3" json:"actionList,omitempty"`
	ObjectList        []string `protobuf:"bytes,5,rep,name=objectList,proto3" json:"objectList,omitempty"`
	Status            string   `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	CreationTimestamp string   `protobuf:"bytes,7,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	UpdateTimestamp   string   `protobuf:"bytes,8,opt,name=updateTimestamp,proto3" json:"updateTimestamp,omitempty"`
	Creator           string   `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
	NbDelegations     uint64   `protobuf:"varint,10,opt,name=nbDelegations,proto3" json:"nbDelegations,omitempty"`
}

func (m *InterDomainAclPolicy) Reset()         { *m = InterDomainAclPolicy{} }
func (m *InterDomainAclPolicy) String() string { return proto.CompactTextString(m) }
func (*InterDomainAclPolicy) ProtoMessage()    {}
func (*InterDomainAclPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_36d23709503fca49, []int{0}
}
func (m *InterDomainAclPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterDomainAclPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterDomainAclPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterDomainAclPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterDomainAclPolicy.Merge(m, src)
}
func (m *InterDomainAclPolicy) XXX_Size() int {
	return m.Size()
}
func (m *InterDomainAclPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_InterDomainAclPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_InterDomainAclPolicy proto.InternalMessageInfo

func (m *InterDomainAclPolicy) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *InterDomainAclPolicy) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *InterDomainAclPolicy) GetSubjectList() []string {
	if m != nil {
		return m.SubjectList
	}
	return nil
}

func (m *InterDomainAclPolicy) GetActionList() []string {
	if m != nil {
		return m.ActionList
	}
	return nil
}

func (m *InterDomainAclPolicy) GetObjectList() []string {
	if m != nil {
		return m.ObjectList
	}
	return nil
}

func (m *InterDomainAclPolicy) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *InterDomainAclPolicy) GetCreationTimestamp() string {
	if m != nil {
		return m.CreationTimestamp
	}
	return ""
}

func (m *InterDomainAclPolicy) GetUpdateTimestamp() string {
	if m != nil {
		return m.UpdateTimestamp
	}
	return ""
}

func (m *InterDomainAclPolicy) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *InterDomainAclPolicy) GetNbDelegations() uint64 {
	if m != nil {
		return m.NbDelegations
	}
	return 0
}

func init() {
	proto.RegisterType((*InterDomainAclPolicy)(nil), "crossdomain.cdac.InterDomainAclPolicy")
}

func init() {
	proto.RegisterFile("cdac/inter_domain_acl_policy.proto", fileDescriptor_36d23709503fca49)
}

var fileDescriptor_36d23709503fca49 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcd, 0x4a, 0xf4, 0x30,
	0x14, 0x86, 0x27, 0x9d, 0xbf, 0x6f, 0xce, 0x87, 0x7f, 0x61, 0x90, 0xac, 0x42, 0x19, 0x5c, 0x74,
	0x21, 0x33, 0xa0, 0x57, 0xa0, 0xcc, 0x46, 0x70, 0x21, 0x83, 0x2b, 0x37, 0x43, 0x9a, 0x06, 0x89,
	0xa4, 0x4d, 0x69, 0x52, 0x70, 0xee, 0xc2, 0xcb, 0x72, 0x25, 0xb3, 0x74, 0x29, 0xed, 0x8d, 0x48,
	0x4f, 0x95, 0x56, 0x5d, 0x9e, 0xe7, 0x7d, 0xce, 0x1b, 0xc8, 0x81, 0x85, 0x4c, 0x84, 0x5c, 0xe9,
	0xcc, 0xab, 0x62, 0x9b, 0xd8, 0x54, 0xe8, 0x6c, 0x2b, 0xa4, 0xd9, 0xe6, 0xd6, 0x68, 0xb9, 0x5b,
	0xe6, 0x85, 0xf5, 0x96, 0x1e, 0xcb, 0xc2, 0x3a, 0xd7, 0xa6, 0xcb, 0xc6, 0x5f, 0xbc, 0x05, 0x30,
	0xbf, 0x69, 0x76, 0xd6, 0x08, 0xaf, 0xa4, 0xb9, 0xc3, 0x05, 0x7a, 0x08, 0x81, 0x4e, 0x18, 0x09,
	0x49, 0x34, 0xda, 0x04, 0x3a, 0xa1, 0x73, 0x18, 0x1b, 0x11, 0x2b, 0xc3, 0x82, 0x90, 0x44, 0xb3,
	0x4d, 0x3b, 0xd0, 0x10, 0xfe, 0xbb, 0x32, 0x7e, 0x52, 0xd2, 0xdf, 0x6a, 0xe7, 0xd9, 0x30, 0x1c,
	0x46, 0xb3, 0x4d, 0x1f, 0x51, 0x0e, 0x20, 0xa4, 0xd7, 0x36, 0x43, 0x61, 0x84, 0x42, 0x8f, 0x34,
	0xb9, 0xed, 0x0a, 0xc6, 0x6d, 0xde, 0x11, 0x7a, 0x0a, 0x13, 0xe7, 0x85, 0x2f, 0x1d, 0x9b, 0xe0,
	0xc3, 0x5f, 0x13, 0x3d, 0x87, 0x13, 0x59, 0x28, 0xd1, 0xf4, 0xdc, 0xeb, 0x54, 0x39, 0x2f, 0xd2,
	0x9c, 0x4d, 0x51, 0xf9, 0x1b, 0xd0, 0x08, 0x8e, 0xca, 0x3c, 0x11, 0x5e, 0x75, 0xee, 0x3f, 0x74,
	0x7f, 0x63, 0xca, 0x60, 0x8a, 0xeb, 0xb6, 0x60, 0x33, 0x34, 0xbe, 0x47, 0x7a, 0x06, 0x07, 0x59,
	0xbc, 0x56, 0x46, 0x3d, 0x62, 0xb9, 0x63, 0x80, 0x9f, 0xf3, 0x13, 0x5e, 0x5f, 0xbc, 0x56, 0x9c,
	0xec, 0x2b, 0x4e, 0x3e, 0x2a, 0x4e, 0x5e, 0x6a, 0x3e, 0xd8, 0xd7, 0x7c, 0xf0, 0x5e, 0xf3, 0xc1,
	0x03, 0xeb, 0x7d, 0xfe, 0xea, 0x79, 0x85, 0xe7, 0xf2, 0xbb, 0x5c, 0xb9, 0x78, 0x82, 0xd7, 0xb9,
	0xfc, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x78, 0xea, 0x96, 0xca, 0xc3, 0x01, 0x00, 0x00,
}

func (m *InterDomainAclPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterDomainAclPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterDomainAclPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NbDelegations != 0 {
		i = encodeVarintInterDomainAclPolicy(dAtA, i, uint64(m.NbDelegations))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintInterDomainAclPolicy(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UpdateTimestamp) > 0 {
		i -= len(m.UpdateTimestamp)
		copy(dAtA[i:], m.UpdateTimestamp)
		i = encodeVarintInterDomainAclPolicy(dAtA, i, uint64(len(m.UpdateTimestamp)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CreationTimestamp) > 0 {
		i -= len(m.CreationTimestamp)
		copy(dAtA[i:], m.CreationTimestamp)
		i = encodeVarintInterDomainAclPolicy(dAtA, i, uint64(len(m.CreationTimestamp)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintInterDomainAclPolicy(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ObjectList) > 0 {
		for iNdEx := len(m.ObjectList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ObjectList[iNdEx])
			copy(dAtA[i:], m.ObjectList[iNdEx])
			i = encodeVarintInterDomainAclPolicy(dAtA, i, uint64(len(m.ObjectList[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ActionList) > 0 {
		for iNdEx := len(m.ActionList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ActionList[iNdEx])
			copy(dAtA[i:], m.ActionList[iNdEx])
			i = encodeVarintInterDomainAclPolicy(dAtA, i, uint64(len(m.ActionList[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SubjectList) > 0 {
		for iNdEx := len(m.SubjectList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubjectList[iNdEx])
			copy(dAtA[i:], m.SubjectList[iNdEx])
			i = encodeVarintInterDomainAclPolicy(dAtA, i, uint64(len(m.SubjectList[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintInterDomainAclPolicy(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintInterDomainAclPolicy(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintInterDomainAclPolicy(dAtA []byte, offset int, v uint64) int {
	offset -= sovInterDomainAclPolicy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterDomainAclPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovInterDomainAclPolicy(uint64(m.Id))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovInterDomainAclPolicy(uint64(l))
	}
	if len(m.SubjectList) > 0 {
		for _, s := range m.SubjectList {
			l = len(s)
			n += 1 + l + sovInterDomainAclPolicy(uint64(l))
		}
	}
	if len(m.ActionList) > 0 {
		for _, s := range m.ActionList {
			l = len(s)
			n += 1 + l + sovInterDomainAclPolicy(uint64(l))
		}
	}
	if len(m.ObjectList) > 0 {
		for _, s := range m.ObjectList {
			l = len(s)
			n += 1 + l + sovInterDomainAclPolicy(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovInterDomainAclPolicy(uint64(l))
	}
	l = len(m.CreationTimestamp)
	if l > 0 {
		n += 1 + l + sovInterDomainAclPolicy(uint64(l))
	}
	l = len(m.UpdateTimestamp)
	if l > 0 {
		n += 1 + l + sovInterDomainAclPolicy(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovInterDomainAclPolicy(uint64(l))
	}
	if m.NbDelegations != 0 {
		n += 1 + sovInterDomainAclPolicy(uint64(m.NbDelegations))
	}
	return n
}

func sovInterDomainAclPolicy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInterDomainAclPolicy(x uint64) (n int) {
	return sovInterDomainAclPolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterDomainAclPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterDomainAclPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterDomainAclPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterDomainAclPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainAclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainAclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainAclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectList = append(m.SubjectList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainAclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionList = append(m.ActionList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainAclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectList = append(m.ObjectList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainAclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainAclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainAclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainAclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbDelegations", wireType)
			}
			m.NbDelegations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainAclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NbDelegations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterDomainAclPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterDomainAclPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterDomainAclPolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterDomainAclPolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterDomainAclPolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterDomainAclPolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInterDomainAclPolicy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInterDomainAclPolicy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInterDomainAclPolicy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInterDomainAclPolicy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterDomainAclPolicy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInterDomainAclPolicy = fmt.Errorf("proto: unexpected end of group")
)
