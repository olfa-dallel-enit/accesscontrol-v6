// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cdac/time_calculation.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TimeCalculation struct {
	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Operation      string `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	StartTimestamp string `protobuf:"bytes,3,opt,name=startTimestamp,proto3" json:"startTimestamp,omitempty"`
	EndTimestamp   string `protobuf:"bytes,4,opt,name=endTimestamp,proto3" json:"endTimestamp,omitempty"`
	Timing         uint64 `protobuf:"varint,5,opt,name=timing,proto3" json:"timing,omitempty"`
	Creator        string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *TimeCalculation) Reset()         { *m = TimeCalculation{} }
func (m *TimeCalculation) String() string { return proto.CompactTextString(m) }
func (*TimeCalculation) ProtoMessage()    {}
func (*TimeCalculation) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8456a491912bff, []int{0}
}
func (m *TimeCalculation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeCalculation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeCalculation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeCalculation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeCalculation.Merge(m, src)
}
func (m *TimeCalculation) XXX_Size() int {
	return m.Size()
}
func (m *TimeCalculation) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeCalculation.DiscardUnknown(m)
}

var xxx_messageInfo_TimeCalculation proto.InternalMessageInfo

func (m *TimeCalculation) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TimeCalculation) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *TimeCalculation) GetStartTimestamp() string {
	if m != nil {
		return m.StartTimestamp
	}
	return ""
}

func (m *TimeCalculation) GetEndTimestamp() string {
	if m != nil {
		return m.EndTimestamp
	}
	return ""
}

func (m *TimeCalculation) GetTiming() uint64 {
	if m != nil {
		return m.Timing
	}
	return 0
}

func (m *TimeCalculation) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*TimeCalculation)(nil), "crossdomain.cdac.TimeCalculation")
}

func init() { proto.RegisterFile("cdac/time_calculation.proto", fileDescriptor_8e8456a491912bff) }

var fileDescriptor_8e8456a491912bff = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0x4e, 0x49, 0x4c,
	0xd6, 0x2f, 0xc9, 0xcc, 0x4d, 0x8d, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0xcc,
	0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x48, 0x2e, 0xca, 0x2f, 0x2e, 0x4e, 0xc9,
	0xcf, 0x4d, 0xcc, 0xcc, 0xd3, 0x03, 0x29, 0x54, 0xda, 0xcb, 0xc8, 0xc5, 0x1f, 0x92, 0x99, 0x9b,
	0xea, 0x8c, 0x50, 0x2b, 0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x12,
	0xc4, 0x94, 0x99, 0x22, 0x24, 0xc3, 0xc5, 0x99, 0x5f, 0x90, 0x5a, 0x04, 0x96, 0x94, 0x60, 0x52,
	0x60, 0xd4, 0xe0, 0x0c, 0x42, 0x08, 0x08, 0xa9, 0x71, 0xf1, 0x15, 0x97, 0x24, 0x16, 0x95, 0x80,
	0x4c, 0x29, 0x2e, 0x49, 0xcc, 0x2d, 0x90, 0x60, 0x06, 0x2b, 0x41, 0x13, 0x15, 0x52, 0xe2, 0xe2,
	0x49, 0xcd, 0x4b, 0x41, 0xa8, 0x62, 0x01, 0xab, 0x42, 0x11, 0x13, 0x12, 0xe3, 0x62, 0x2b, 0xc9,
	0xcc, 0xcd, 0xcc, 0x4b, 0x97, 0x60, 0x05, 0xdb, 0x0e, 0xe5, 0x09, 0x49, 0x70, 0xb1, 0x27, 0x17,
	0xa5, 0x26, 0x96, 0xe4, 0x17, 0x49, 0xb0, 0x81, 0xb5, 0xc1, 0xb8, 0x4e, 0x46, 0x27, 0x1e, 0xc9,
	0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e,
	0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x25, 0x81, 0xe4, 0x57, 0xfd, 0x0a, 0x7d, 0x48, 0xb0,
	0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0x03, 0xc3, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xab,
	0x85, 0xe8, 0xb6, 0x2b, 0x01, 0x00, 0x00,
}

func (m *TimeCalculation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeCalculation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeCalculation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTimeCalculation(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if m.Timing != 0 {
		i = encodeVarintTimeCalculation(dAtA, i, uint64(m.Timing))
		i--
		dAtA[i] = 0x28
	}
	if len(m.EndTimestamp) > 0 {
		i -= len(m.EndTimestamp)
		copy(dAtA[i:], m.EndTimestamp)
		i = encodeVarintTimeCalculation(dAtA, i, uint64(len(m.EndTimestamp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StartTimestamp) > 0 {
		i -= len(m.StartTimestamp)
		copy(dAtA[i:], m.StartTimestamp)
		i = encodeVarintTimeCalculation(dAtA, i, uint64(len(m.StartTimestamp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Operation) > 0 {
		i -= len(m.Operation)
		copy(dAtA[i:], m.Operation)
		i = encodeVarintTimeCalculation(dAtA, i, uint64(len(m.Operation)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTimeCalculation(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTimeCalculation(dAtA []byte, offset int, v uint64) int {
	offset -= sovTimeCalculation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TimeCalculation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTimeCalculation(uint64(m.Id))
	}
	l = len(m.Operation)
	if l > 0 {
		n += 1 + l + sovTimeCalculation(uint64(l))
	}
	l = len(m.StartTimestamp)
	if l > 0 {
		n += 1 + l + sovTimeCalculation(uint64(l))
	}
	l = len(m.EndTimestamp)
	if l > 0 {
		n += 1 + l + sovTimeCalculation(uint64(l))
	}
	if m.Timing != 0 {
		n += 1 + sovTimeCalculation(uint64(m.Timing))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTimeCalculation(uint64(l))
	}
	return n
}

func sovTimeCalculation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTimeCalculation(x uint64) (n int) {
	return sovTimeCalculation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TimeCalculation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimeCalculation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeCalculation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeCalculation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimeCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimeCalculation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimeCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimeCalculation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimeCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimeCalculation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timing", wireType)
			}
			m.Timing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timing |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeCalculation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimeCalculation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimeCalculation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimeCalculation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimeCalculation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTimeCalculation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTimeCalculation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimeCalculation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimeCalculation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTimeCalculation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTimeCalculation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTimeCalculation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTimeCalculation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTimeCalculation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTimeCalculation = fmt.Errorf("proto: unexpected end of group")
)
