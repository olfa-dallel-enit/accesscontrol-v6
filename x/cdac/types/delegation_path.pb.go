// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cdac/delegation_path.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DelegationPath struct {
	Id        uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Delegator *CooperativeDomain `protobuf:"bytes,2,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Delegatee *CooperativeDomain `protobuf:"bytes,3,opt,name=delegatee,proto3" json:"delegatee,omitempty"`
	PathList  []*Path            `protobuf:"bytes,4,rep,name=pathList,proto3" json:"pathList,omitempty"`
	Creator   string             `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	Label     string             `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *DelegationPath) Reset()         { *m = DelegationPath{} }
func (m *DelegationPath) String() string { return proto.CompactTextString(m) }
func (*DelegationPath) ProtoMessage()    {}
func (*DelegationPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_1da1b4e090b47af4, []int{0}
}
func (m *DelegationPath) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationPath.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationPath.Merge(m, src)
}
func (m *DelegationPath) XXX_Size() int {
	return m.Size()
}
func (m *DelegationPath) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationPath.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationPath proto.InternalMessageInfo

func (m *DelegationPath) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DelegationPath) GetDelegator() *CooperativeDomain {
	if m != nil {
		return m.Delegator
	}
	return nil
}

func (m *DelegationPath) GetDelegatee() *CooperativeDomain {
	if m != nil {
		return m.Delegatee
	}
	return nil
}

func (m *DelegationPath) GetPathList() []*Path {
	if m != nil {
		return m.PathList
	}
	return nil
}

func (m *DelegationPath) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *DelegationPath) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func init() {
	proto.RegisterType((*DelegationPath)(nil), "crossdomain.cdac.DelegationPath")
}

func init() { proto.RegisterFile("cdac/delegation_path.proto", fileDescriptor_1da1b4e090b47af4) }

var fileDescriptor_1da1b4e090b47af4 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0x4e, 0x49, 0x4c,
	0xd6, 0x4f, 0x49, 0xcd, 0x49, 0x4d, 0x4f, 0x2c, 0xc9, 0xcc, 0xcf, 0x8b, 0x2f, 0x48, 0x2c, 0xc9,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x48, 0x2e, 0xca, 0x2f, 0x2e, 0x4e, 0xc9, 0xcf,
	0x4d, 0xcc, 0xcc, 0xd3, 0x03, 0xa9, 0x93, 0x92, 0x05, 0xab, 0x4e, 0xce, 0xcf, 0x2f, 0x48, 0x2d,
	0x4a, 0x2c, 0xc9, 0x2c, 0x4b, 0x8d, 0x87, 0xca, 0x82, 0x35, 0x48, 0xf1, 0x83, 0xa5, 0x11, 0x26,
	0x28, 0x75, 0x31, 0x71, 0xf1, 0xb9, 0xc0, 0xcd, 0x0e, 0x48, 0x2c, 0xc9, 0x10, 0xe2, 0xe3, 0x62,
	0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x09, 0x62, 0xca, 0x4c, 0x11, 0x72, 0xe4, 0xe2,
	0x84, 0xda, 0x9e, 0x5f, 0x24, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x6d, 0xa4, 0xac, 0x87, 0x6e, 0xb1,
	0x9e, 0x33, 0xc2, 0x4a, 0x17, 0xb0, 0x70, 0x10, 0x42, 0x17, 0x92, 0x11, 0xa9, 0xa9, 0x12, 0xcc,
	0xa4, 0x1b, 0x91, 0x9a, 0x2a, 0x64, 0xc4, 0xc5, 0x01, 0x72, 0xb6, 0x4f, 0x66, 0x71, 0x89, 0x04,
	0x8b, 0x02, 0xb3, 0x06, 0xb7, 0x91, 0x18, 0xa6, 0x09, 0x20, 0xf7, 0x07, 0xc1, 0xd5, 0x09, 0x49,
	0x70, 0xb1, 0x27, 0x17, 0xa5, 0x82, 0xdd, 0xcd, 0xaa, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe3, 0x0a,
	0x89, 0x70, 0xb1, 0xe6, 0x24, 0x26, 0xa5, 0xe6, 0x48, 0xb0, 0x81, 0xc5, 0x21, 0x1c, 0x27, 0xa3,
	0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39,
	0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0x92, 0x40, 0xb2, 0x4a, 0xbf, 0x42,
	0x1f, 0x1c, 0x8a, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0xe0, 0x70, 0x34, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x33, 0xa2, 0x01, 0x6b, 0xa7, 0x01, 0x00, 0x00,
}

func (m *DelegationPath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintDelegationPath(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDelegationPath(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PathList) > 0 {
		for iNdEx := len(m.PathList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PathList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegationPath(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Delegatee != nil {
		{
			size, err := m.Delegatee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDelegationPath(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Delegator != nil {
		{
			size, err := m.Delegator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDelegationPath(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDelegationPath(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDelegationPath(dAtA []byte, offset int, v uint64) int {
	offset -= sovDelegationPath(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegationPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDelegationPath(uint64(m.Id))
	}
	if m.Delegator != nil {
		l = m.Delegator.Size()
		n += 1 + l + sovDelegationPath(uint64(l))
	}
	if m.Delegatee != nil {
		l = m.Delegatee.Size()
		n += 1 + l + sovDelegationPath(uint64(l))
	}
	if len(m.PathList) > 0 {
		for _, e := range m.PathList {
			l = e.Size()
			n += 1 + l + sovDelegationPath(uint64(l))
		}
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDelegationPath(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovDelegationPath(uint64(l))
	}
	return n
}

func sovDelegationPath(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDelegationPath(x uint64) (n int) {
	return sovDelegationPath(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelegationPath) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegationPath
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationPath: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationPath: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationPath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationPath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegationPath
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationPath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Delegator == nil {
				m.Delegator = &CooperativeDomain{}
			}
			if err := m.Delegator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegatee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationPath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegationPath
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationPath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Delegatee == nil {
				m.Delegatee = &CooperativeDomain{}
			}
			if err := m.Delegatee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationPath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegationPath
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationPath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathList = append(m.PathList, &Path{})
			if err := m.PathList[len(m.PathList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationPath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationPath
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationPath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationPath
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationPath
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationPath
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegationPath(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegationPath
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDelegationPath(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDelegationPath
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegationPath
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegationPath
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDelegationPath
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDelegationPath
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDelegationPath
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDelegationPath        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDelegationPath          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDelegationPath = fmt.Errorf("proto: unexpected end of group")
)
