// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cdac/delegation_rule.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DelegationRule struct {
	Id                   uint64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Label                string                `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Effect               string                `protobuf:"bytes,3,opt,name=effect,proto3" json:"effect,omitempty"`
	DelegationConditions *DelegationConditions `protobuf:"bytes,4,opt,name=delegationConditions,proto3" json:"delegationConditions,omitempty"`
	Priority             uint64                `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	Creator              string                `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *DelegationRule) Reset()         { *m = DelegationRule{} }
func (m *DelegationRule) String() string { return proto.CompactTextString(m) }
func (*DelegationRule) ProtoMessage()    {}
func (*DelegationRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_e03c1a8fd8b40700, []int{0}
}
func (m *DelegationRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationRule.Merge(m, src)
}
func (m *DelegationRule) XXX_Size() int {
	return m.Size()
}
func (m *DelegationRule) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationRule.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationRule proto.InternalMessageInfo

func (m *DelegationRule) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DelegationRule) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *DelegationRule) GetEffect() string {
	if m != nil {
		return m.Effect
	}
	return ""
}

func (m *DelegationRule) GetDelegationConditions() *DelegationConditions {
	if m != nil {
		return m.DelegationConditions
	}
	return nil
}

func (m *DelegationRule) GetPriority() uint64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *DelegationRule) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*DelegationRule)(nil), "crossdomain.cdac.DelegationRule")
}

func init() { proto.RegisterFile("cdac/delegation_rule.proto", fileDescriptor_e03c1a8fd8b40700) }

var fileDescriptor_e03c1a8fd8b40700 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0x9b, 0xba, 0x55, 0x8d, 0x30, 0x24, 0x0c, 0x09, 0x3d, 0x84, 0xe2, 0x41, 0x7a, 0x6a,
	0x61, 0xbe, 0x81, 0xee, 0x09, 0x7a, 0xdc, 0x45, 0xb2, 0xe4, 0x9b, 0x04, 0x62, 0xbf, 0x92, 0x66,
	0xe0, 0xde, 0xc2, 0xc7, 0xf2, 0xb8, 0xa3, 0xc7, 0xd1, 0xbe, 0x88, 0x2c, 0xd3, 0x2a, 0xa3, 0xb7,
	0xfc, 0x92, 0x7f, 0xbe, 0xef, 0xc7, 0x9f, 0xa6, 0x4a, 0x4b, 0x55, 0x6a, 0xb0, 0xf0, 0x2a, 0xbd,
	0xc1, 0xfa, 0xc5, 0x6d, 0x2d, 0x14, 0x8d, 0x43, 0x8f, 0xec, 0x56, 0x39, 0x6c, 0x5b, 0x8d, 0x6f,
	0xd2, 0xd4, 0xc5, 0x31, 0x97, 0x66, 0xe7, 0x69, 0x85, 0xb5, 0x36, 0xc7, 0x53, 0x7b, 0xfa, 0x73,
	0x7f, 0x20, 0x74, 0xb6, 0x1c, 0xde, 0xab, 0xad, 0x05, 0x36, 0xa3, 0xb1, 0xd1, 0x9c, 0x64, 0x24,
	0x9f, 0x54, 0xb1, 0xd1, 0x6c, 0x4e, 0xa7, 0x56, 0xae, 0xc1, 0xf2, 0x38, 0x23, 0xf9, 0x75, 0x75,
	0x02, 0x76, 0x47, 0x13, 0xd8, 0x6c, 0x40, 0x79, 0x7e, 0x11, 0xae, 0x7f, 0x88, 0xad, 0xe8, 0xfc,
	0x6f, 0xdf, 0xf3, 0xb0, 0x8e, 0x4f, 0x32, 0x92, 0xdf, 0x2c, 0x1e, 0x8a, 0x73, 0xc7, 0x62, 0x39,
	0x92, 0xae, 0x46, 0x67, 0xb0, 0x94, 0x5e, 0x35, 0xce, 0xa0, 0x33, 0x7e, 0xc7, 0xa7, 0xc1, 0x6f,
	0x60, 0xc6, 0xe9, 0xa5, 0x72, 0x20, 0x3d, 0x3a, 0x9e, 0x04, 0xa1, 0x5f, 0x7c, 0x5a, 0x7c, 0x76,
	0x82, 0xec, 0x3b, 0x41, 0x0e, 0x9d, 0x20, 0x1f, 0xbd, 0x88, 0xf6, 0xbd, 0x88, 0xbe, 0x7a, 0x11,
	0xad, 0xf8, 0x3f, 0x99, 0xf2, 0xbd, 0x0c, 0x65, 0xf9, 0x5d, 0x03, 0xed, 0x3a, 0x09, 0xed, 0x3c,
	0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x17, 0x8b, 0x90, 0xcf, 0x6f, 0x01, 0x00, 0x00,
}

func (m *DelegationRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDelegationRule(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if m.Priority != 0 {
		i = encodeVarintDelegationRule(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x28
	}
	if m.DelegationConditions != nil {
		{
			size, err := m.DelegationConditions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDelegationRule(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Effect) > 0 {
		i -= len(m.Effect)
		copy(dAtA[i:], m.Effect)
		i = encodeVarintDelegationRule(dAtA, i, uint64(len(m.Effect)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintDelegationRule(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDelegationRule(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDelegationRule(dAtA []byte, offset int, v uint64) int {
	offset -= sovDelegationRule(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegationRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDelegationRule(uint64(m.Id))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovDelegationRule(uint64(l))
	}
	l = len(m.Effect)
	if l > 0 {
		n += 1 + l + sovDelegationRule(uint64(l))
	}
	if m.DelegationConditions != nil {
		l = m.DelegationConditions.Size()
		n += 1 + l + sovDelegationRule(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovDelegationRule(uint64(m.Priority))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDelegationRule(uint64(l))
	}
	return n
}

func sovDelegationRule(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDelegationRule(x uint64) (n int) {
	return sovDelegationRule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelegationRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegationRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Effect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegationRule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelegationConditions == nil {
				m.DelegationConditions = &DelegationConditions{}
			}
			if err := m.DelegationConditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationRule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegationRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegationRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDelegationRule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDelegationRule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegationRule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegationRule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDelegationRule
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDelegationRule
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDelegationRule
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDelegationRule        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDelegationRule          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDelegationRule = fmt.Errorf("proto: unexpected end of group")
)
