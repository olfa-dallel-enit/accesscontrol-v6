// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cdac/inter_domain_dcl_policy.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InterDomainDclPolicy struct {
	Id                uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Label             string    `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	DelegatorList     []string  `protobuf:"bytes,3,rep,name=delegatorList,proto3" json:"delegatorList,omitempty"`
	DelegateeList     []string  `protobuf:"bytes,4,rep,name=delegateeList,proto3" json:"delegateeList,omitempty"`
	PermissionList    []string  `protobuf:"bytes,5,rep,name=permissionList,proto3" json:"permissionList,omitempty"`
	CreationTimestamp string    `protobuf:"bytes,6,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	UpdateTimestamp   string    `protobuf:"bytes,7,opt,name=updateTimestamp,proto3" json:"updateTimestamp,omitempty"`
	Depth             uint64    `protobuf:"varint,8,opt,name=depth,proto3" json:"depth,omitempty"`
	MaxDelegations    uint64    `protobuf:"varint,9,opt,name=maxDelegations,proto3" json:"maxDelegations,omitempty"`
	Validity          *Validity `protobuf:"bytes,10,opt,name=validity,proto3" json:"validity,omitempty"`
	Creator           string    `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *InterDomainDclPolicy) Reset()         { *m = InterDomainDclPolicy{} }
func (m *InterDomainDclPolicy) String() string { return proto.CompactTextString(m) }
func (*InterDomainDclPolicy) ProtoMessage()    {}
func (*InterDomainDclPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_738f5fb08a4d8984, []int{0}
}
func (m *InterDomainDclPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterDomainDclPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterDomainDclPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterDomainDclPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterDomainDclPolicy.Merge(m, src)
}
func (m *InterDomainDclPolicy) XXX_Size() int {
	return m.Size()
}
func (m *InterDomainDclPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_InterDomainDclPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_InterDomainDclPolicy proto.InternalMessageInfo

func (m *InterDomainDclPolicy) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *InterDomainDclPolicy) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *InterDomainDclPolicy) GetDelegatorList() []string {
	if m != nil {
		return m.DelegatorList
	}
	return nil
}

func (m *InterDomainDclPolicy) GetDelegateeList() []string {
	if m != nil {
		return m.DelegateeList
	}
	return nil
}

func (m *InterDomainDclPolicy) GetPermissionList() []string {
	if m != nil {
		return m.PermissionList
	}
	return nil
}

func (m *InterDomainDclPolicy) GetCreationTimestamp() string {
	if m != nil {
		return m.CreationTimestamp
	}
	return ""
}

func (m *InterDomainDclPolicy) GetUpdateTimestamp() string {
	if m != nil {
		return m.UpdateTimestamp
	}
	return ""
}

func (m *InterDomainDclPolicy) GetDepth() uint64 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *InterDomainDclPolicy) GetMaxDelegations() uint64 {
	if m != nil {
		return m.MaxDelegations
	}
	return 0
}

func (m *InterDomainDclPolicy) GetValidity() *Validity {
	if m != nil {
		return m.Validity
	}
	return nil
}

func (m *InterDomainDclPolicy) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*InterDomainDclPolicy)(nil), "crossdomain.cdac.InterDomainDclPolicy")
}

func init() {
	proto.RegisterFile("cdac/inter_domain_dcl_policy.proto", fileDescriptor_738f5fb08a4d8984)
}

var fileDescriptor_738f5fb08a4d8984 = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcf, 0x4a, 0x2b, 0x31,
	0x14, 0xc6, 0x3b, 0xfd, 0xdf, 0x94, 0xdb, 0x7b, 0x6f, 0xec, 0x22, 0x74, 0x31, 0x0c, 0x45, 0x64,
	0x16, 0x32, 0x85, 0x0a, 0x3e, 0x80, 0x74, 0x23, 0xb8, 0x90, 0x41, 0x5c, 0xb8, 0x29, 0x69, 0x12,
	0x34, 0x90, 0x99, 0x84, 0x24, 0x4a, 0xfb, 0x16, 0x2e, 0x7d, 0x24, 0x97, 0x5d, 0xba, 0x94, 0xf6,
	0x45, 0x64, 0xce, 0xb4, 0xda, 0x8e, 0xcb, 0xf3, 0x9d, 0x5f, 0x3e, 0xbe, 0x93, 0x0f, 0x8d, 0x19,
	0xa7, 0x6c, 0x22, 0x73, 0x2f, 0xec, 0x9c, 0xeb, 0x8c, 0xca, 0x7c, 0xce, 0x99, 0x9a, 0x1b, 0xad,
	0x24, 0x5b, 0x25, 0xc6, 0x6a, 0xaf, 0xf1, 0x3f, 0x66, 0xb5, 0x73, 0xe5, 0x36, 0x29, 0xf8, 0xd1,
	0x09, 0xbc, 0x7a, 0xa1, 0x4a, 0x72, 0xe9, 0x77, 0xd8, 0xf8, 0xad, 0x81, 0x86, 0xd7, 0x85, 0xd1,
	0x0c, 0xc8, 0x19, 0x53, 0xb7, 0xe0, 0x82, 0x07, 0xa8, 0x2e, 0x39, 0x09, 0xa2, 0x20, 0x6e, 0xa6,
	0x75, 0xc9, 0xf1, 0x10, 0xb5, 0x14, 0x5d, 0x08, 0x45, 0xea, 0x51, 0x10, 0xf7, 0xd2, 0x72, 0xc0,
	0xa7, 0xe8, 0x0f, 0x17, 0x4a, 0x3c, 0x52, 0xaf, 0xed, 0x8d, 0x74, 0x9e, 0x34, 0xa2, 0x46, 0xdc,
	0x4b, 0x8f, 0xc5, 0x03, 0x4a, 0x08, 0xa0, 0x9a, 0x47, 0x54, 0x29, 0xe2, 0x33, 0x34, 0x30, 0xc2,
	0x66, 0xd2, 0x39, 0xa9, 0x73, 0xc0, 0x5a, 0x80, 0x55, 0x54, 0x7c, 0x8e, 0xfe, 0x33, 0x2b, 0xa8,
	0x97, 0x3a, 0xbf, 0x93, 0x99, 0x70, 0x9e, 0x66, 0x86, 0xb4, 0x21, 0xd5, 0xef, 0x05, 0x8e, 0xd1,
	0xdf, 0x67, 0xc3, 0xa9, 0x17, 0x3f, 0x6c, 0x07, 0xd8, 0xaa, 0x5c, 0x5c, 0xc8, 0x85, 0xf1, 0x4f,
	0xa4, 0x0b, 0x47, 0x97, 0x43, 0x91, 0x2a, 0xa3, 0xcb, 0x59, 0x99, 0x54, 0xea, 0xdc, 0x91, 0x1e,
	0xac, 0x2b, 0x2a, 0xbe, 0x44, 0xdd, 0xfd, 0xd7, 0x12, 0x14, 0x05, 0x71, 0x7f, 0x3a, 0x4a, 0xaa,
	0x15, 0x24, 0xf7, 0x3b, 0x22, 0xfd, 0x66, 0x31, 0x41, 0x1d, 0x08, 0xad, 0x2d, 0xe9, 0x43, 0xae,
	0xfd, 0x78, 0x35, 0x7d, 0xdf, 0x84, 0xc1, 0x7a, 0x13, 0x06, 0x9f, 0x9b, 0x30, 0x78, 0xdd, 0x86,
	0xb5, 0xf5, 0x36, 0xac, 0x7d, 0x6c, 0xc3, 0xda, 0x03, 0x39, 0x30, 0x9e, 0x2c, 0x27, 0xd0, 0xab,
	0x5f, 0x19, 0xe1, 0x16, 0x6d, 0x68, 0xf5, 0xe2, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x49, 0x6c, 0x15,
	0x87, 0x22, 0x02, 0x00, 0x00,
}

func (m *InterDomainDclPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterDomainDclPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterDomainDclPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintInterDomainDclPolicy(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Validity != nil {
		{
			size, err := m.Validity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInterDomainDclPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.MaxDelegations != 0 {
		i = encodeVarintInterDomainDclPolicy(dAtA, i, uint64(m.MaxDelegations))
		i--
		dAtA[i] = 0x48
	}
	if m.Depth != 0 {
		i = encodeVarintInterDomainDclPolicy(dAtA, i, uint64(m.Depth))
		i--
		dAtA[i] = 0x40
	}
	if len(m.UpdateTimestamp) > 0 {
		i -= len(m.UpdateTimestamp)
		copy(dAtA[i:], m.UpdateTimestamp)
		i = encodeVarintInterDomainDclPolicy(dAtA, i, uint64(len(m.UpdateTimestamp)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreationTimestamp) > 0 {
		i -= len(m.CreationTimestamp)
		copy(dAtA[i:], m.CreationTimestamp)
		i = encodeVarintInterDomainDclPolicy(dAtA, i, uint64(len(m.CreationTimestamp)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PermissionList) > 0 {
		for iNdEx := len(m.PermissionList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PermissionList[iNdEx])
			copy(dAtA[i:], m.PermissionList[iNdEx])
			i = encodeVarintInterDomainDclPolicy(dAtA, i, uint64(len(m.PermissionList[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DelegateeList) > 0 {
		for iNdEx := len(m.DelegateeList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DelegateeList[iNdEx])
			copy(dAtA[i:], m.DelegateeList[iNdEx])
			i = encodeVarintInterDomainDclPolicy(dAtA, i, uint64(len(m.DelegateeList[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DelegatorList) > 0 {
		for iNdEx := len(m.DelegatorList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DelegatorList[iNdEx])
			copy(dAtA[i:], m.DelegatorList[iNdEx])
			i = encodeVarintInterDomainDclPolicy(dAtA, i, uint64(len(m.DelegatorList[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintInterDomainDclPolicy(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintInterDomainDclPolicy(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintInterDomainDclPolicy(dAtA []byte, offset int, v uint64) int {
	offset -= sovInterDomainDclPolicy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterDomainDclPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovInterDomainDclPolicy(uint64(m.Id))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovInterDomainDclPolicy(uint64(l))
	}
	if len(m.DelegatorList) > 0 {
		for _, s := range m.DelegatorList {
			l = len(s)
			n += 1 + l + sovInterDomainDclPolicy(uint64(l))
		}
	}
	if len(m.DelegateeList) > 0 {
		for _, s := range m.DelegateeList {
			l = len(s)
			n += 1 + l + sovInterDomainDclPolicy(uint64(l))
		}
	}
	if len(m.PermissionList) > 0 {
		for _, s := range m.PermissionList {
			l = len(s)
			n += 1 + l + sovInterDomainDclPolicy(uint64(l))
		}
	}
	l = len(m.CreationTimestamp)
	if l > 0 {
		n += 1 + l + sovInterDomainDclPolicy(uint64(l))
	}
	l = len(m.UpdateTimestamp)
	if l > 0 {
		n += 1 + l + sovInterDomainDclPolicy(uint64(l))
	}
	if m.Depth != 0 {
		n += 1 + sovInterDomainDclPolicy(uint64(m.Depth))
	}
	if m.MaxDelegations != 0 {
		n += 1 + sovInterDomainDclPolicy(uint64(m.MaxDelegations))
	}
	if m.Validity != nil {
		l = m.Validity.Size()
		n += 1 + l + sovInterDomainDclPolicy(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovInterDomainDclPolicy(uint64(l))
	}
	return n
}

func sovInterDomainDclPolicy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInterDomainDclPolicy(x uint64) (n int) {
	return sovInterDomainDclPolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterDomainDclPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterDomainDclPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterDomainDclPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterDomainDclPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainDclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainDclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainDclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorList = append(m.DelegatorList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateeList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainDclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegateeList = append(m.DelegateeList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainDclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermissionList = append(m.PermissionList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainDclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainDclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depth", wireType)
			}
			m.Depth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainDclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Depth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDelegations", wireType)
			}
			m.MaxDelegations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainDclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDelegations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainDclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validity == nil {
				m.Validity = &Validity{}
			}
			if err := m.Validity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterDomainDclPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterDomainDclPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterDomainDclPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterDomainDclPolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterDomainDclPolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterDomainDclPolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterDomainDclPolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInterDomainDclPolicy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInterDomainDclPolicy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInterDomainDclPolicy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInterDomainDclPolicy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterDomainDclPolicy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInterDomainDclPolicy = fmt.Errorf("proto: unexpected end of group")
)
