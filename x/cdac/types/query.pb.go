// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cdac/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetPublicKeyRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPublicKeyRequest) Reset()         { *m = QueryGetPublicKeyRequest{} }
func (m *QueryGetPublicKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPublicKeyRequest) ProtoMessage()    {}
func (*QueryGetPublicKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{2}
}
func (m *QueryGetPublicKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPublicKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPublicKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPublicKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPublicKeyRequest.Merge(m, src)
}
func (m *QueryGetPublicKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPublicKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPublicKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPublicKeyRequest proto.InternalMessageInfo

func (m *QueryGetPublicKeyRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPublicKeyResponse struct {
	PublicKey PublicKey `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey"`
}

func (m *QueryGetPublicKeyResponse) Reset()         { *m = QueryGetPublicKeyResponse{} }
func (m *QueryGetPublicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPublicKeyResponse) ProtoMessage()    {}
func (*QueryGetPublicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{3}
}
func (m *QueryGetPublicKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPublicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPublicKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPublicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPublicKeyResponse.Merge(m, src)
}
func (m *QueryGetPublicKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPublicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPublicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPublicKeyResponse proto.InternalMessageInfo

func (m *QueryGetPublicKeyResponse) GetPublicKey() PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return PublicKey{}
}

type QueryAllPublicKeyRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPublicKeyRequest) Reset()         { *m = QueryAllPublicKeyRequest{} }
func (m *QueryAllPublicKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPublicKeyRequest) ProtoMessage()    {}
func (*QueryAllPublicKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{4}
}
func (m *QueryAllPublicKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPublicKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPublicKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPublicKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPublicKeyRequest.Merge(m, src)
}
func (m *QueryAllPublicKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPublicKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPublicKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPublicKeyRequest proto.InternalMessageInfo

func (m *QueryAllPublicKeyRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPublicKeyResponse struct {
	PublicKey  []PublicKey         `protobuf:"bytes,1,rep,name=PublicKey,proto3" json:"PublicKey"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPublicKeyResponse) Reset()         { *m = QueryAllPublicKeyResponse{} }
func (m *QueryAllPublicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPublicKeyResponse) ProtoMessage()    {}
func (*QueryAllPublicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{5}
}
func (m *QueryAllPublicKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPublicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPublicKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPublicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPublicKeyResponse.Merge(m, src)
}
func (m *QueryAllPublicKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPublicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPublicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPublicKeyResponse proto.InternalMessageInfo

func (m *QueryAllPublicKeyResponse) GetPublicKey() []PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *QueryAllPublicKeyResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetValidityRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetValidityRequest) Reset()         { *m = QueryGetValidityRequest{} }
func (m *QueryGetValidityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidityRequest) ProtoMessage()    {}
func (*QueryGetValidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{6}
}
func (m *QueryGetValidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidityRequest.Merge(m, src)
}
func (m *QueryGetValidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidityRequest proto.InternalMessageInfo

func (m *QueryGetValidityRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetValidityResponse struct {
	Validity Validity `protobuf:"bytes,1,opt,name=Validity,proto3" json:"Validity"`
}

func (m *QueryGetValidityResponse) Reset()         { *m = QueryGetValidityResponse{} }
func (m *QueryGetValidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidityResponse) ProtoMessage()    {}
func (*QueryGetValidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{7}
}
func (m *QueryGetValidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidityResponse.Merge(m, src)
}
func (m *QueryGetValidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidityResponse proto.InternalMessageInfo

func (m *QueryGetValidityResponse) GetValidity() Validity {
	if m != nil {
		return m.Validity
	}
	return Validity{}
}

type QueryAllValidityRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidityRequest) Reset()         { *m = QueryAllValidityRequest{} }
func (m *QueryAllValidityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidityRequest) ProtoMessage()    {}
func (*QueryAllValidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{8}
}
func (m *QueryAllValidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidityRequest.Merge(m, src)
}
func (m *QueryAllValidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidityRequest proto.InternalMessageInfo

func (m *QueryAllValidityRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllValidityResponse struct {
	Validity   []Validity          `protobuf:"bytes,1,rep,name=Validity,proto3" json:"Validity"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidityResponse) Reset()         { *m = QueryAllValidityResponse{} }
func (m *QueryAllValidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidityResponse) ProtoMessage()    {}
func (*QueryAllValidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{9}
}
func (m *QueryAllValidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidityResponse.Merge(m, src)
}
func (m *QueryAllValidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidityResponse proto.InternalMessageInfo

func (m *QueryAllValidityResponse) GetValidity() []Validity {
	if m != nil {
		return m.Validity
	}
	return nil
}

func (m *QueryAllValidityResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCertificateRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCertificateRequest) Reset()         { *m = QueryGetCertificateRequest{} }
func (m *QueryGetCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCertificateRequest) ProtoMessage()    {}
func (*QueryGetCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{10}
}
func (m *QueryGetCertificateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCertificateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCertificateRequest.Merge(m, src)
}
func (m *QueryGetCertificateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCertificateRequest proto.InternalMessageInfo

func (m *QueryGetCertificateRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCertificateResponse struct {
	Certificate Certificate `protobuf:"bytes,1,opt,name=Certificate,proto3" json:"Certificate"`
}

func (m *QueryGetCertificateResponse) Reset()         { *m = QueryGetCertificateResponse{} }
func (m *QueryGetCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCertificateResponse) ProtoMessage()    {}
func (*QueryGetCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{11}
}
func (m *QueryGetCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCertificateResponse.Merge(m, src)
}
func (m *QueryGetCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCertificateResponse proto.InternalMessageInfo

func (m *QueryGetCertificateResponse) GetCertificate() Certificate {
	if m != nil {
		return m.Certificate
	}
	return Certificate{}
}

type QueryAllCertificateRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCertificateRequest) Reset()         { *m = QueryAllCertificateRequest{} }
func (m *QueryAllCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCertificateRequest) ProtoMessage()    {}
func (*QueryAllCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{12}
}
func (m *QueryAllCertificateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCertificateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCertificateRequest.Merge(m, src)
}
func (m *QueryAllCertificateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCertificateRequest proto.InternalMessageInfo

func (m *QueryAllCertificateRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCertificateResponse struct {
	Certificate []Certificate       `protobuf:"bytes,1,rep,name=Certificate,proto3" json:"Certificate"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCertificateResponse) Reset()         { *m = QueryAllCertificateResponse{} }
func (m *QueryAllCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCertificateResponse) ProtoMessage()    {}
func (*QueryAllCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{13}
}
func (m *QueryAllCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCertificateResponse.Merge(m, src)
}
func (m *QueryAllCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCertificateResponse proto.InternalMessageInfo

func (m *QueryAllCertificateResponse) GetCertificate() []Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *QueryAllCertificateResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetIbcConnectionRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetIbcConnectionRequest) Reset()         { *m = QueryGetIbcConnectionRequest{} }
func (m *QueryGetIbcConnectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIbcConnectionRequest) ProtoMessage()    {}
func (*QueryGetIbcConnectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{14}
}
func (m *QueryGetIbcConnectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIbcConnectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIbcConnectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIbcConnectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIbcConnectionRequest.Merge(m, src)
}
func (m *QueryGetIbcConnectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIbcConnectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIbcConnectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIbcConnectionRequest proto.InternalMessageInfo

func (m *QueryGetIbcConnectionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetIbcConnectionResponse struct {
	IbcConnection IbcConnection `protobuf:"bytes,1,opt,name=IbcConnection,proto3" json:"IbcConnection"`
}

func (m *QueryGetIbcConnectionResponse) Reset()         { *m = QueryGetIbcConnectionResponse{} }
func (m *QueryGetIbcConnectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIbcConnectionResponse) ProtoMessage()    {}
func (*QueryGetIbcConnectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{15}
}
func (m *QueryGetIbcConnectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIbcConnectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIbcConnectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIbcConnectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIbcConnectionResponse.Merge(m, src)
}
func (m *QueryGetIbcConnectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIbcConnectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIbcConnectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIbcConnectionResponse proto.InternalMessageInfo

func (m *QueryGetIbcConnectionResponse) GetIbcConnection() IbcConnection {
	if m != nil {
		return m.IbcConnection
	}
	return IbcConnection{}
}

type QueryAllIbcConnectionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIbcConnectionRequest) Reset()         { *m = QueryAllIbcConnectionRequest{} }
func (m *QueryAllIbcConnectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllIbcConnectionRequest) ProtoMessage()    {}
func (*QueryAllIbcConnectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{16}
}
func (m *QueryAllIbcConnectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIbcConnectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIbcConnectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIbcConnectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIbcConnectionRequest.Merge(m, src)
}
func (m *QueryAllIbcConnectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIbcConnectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIbcConnectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIbcConnectionRequest proto.InternalMessageInfo

func (m *QueryAllIbcConnectionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllIbcConnectionResponse struct {
	IbcConnection []IbcConnection     `protobuf:"bytes,1,rep,name=IbcConnection,proto3" json:"IbcConnection"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIbcConnectionResponse) Reset()         { *m = QueryAllIbcConnectionResponse{} }
func (m *QueryAllIbcConnectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllIbcConnectionResponse) ProtoMessage()    {}
func (*QueryAllIbcConnectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{17}
}
func (m *QueryAllIbcConnectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIbcConnectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIbcConnectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIbcConnectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIbcConnectionResponse.Merge(m, src)
}
func (m *QueryAllIbcConnectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIbcConnectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIbcConnectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIbcConnectionResponse proto.InternalMessageInfo

func (m *QueryAllIbcConnectionResponse) GetIbcConnection() []IbcConnection {
	if m != nil {
		return m.IbcConnection
	}
	return nil
}

func (m *QueryAllIbcConnectionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDomainRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetDomainRequest) Reset()         { *m = QueryGetDomainRequest{} }
func (m *QueryGetDomainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDomainRequest) ProtoMessage()    {}
func (*QueryGetDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{18}
}
func (m *QueryGetDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDomainRequest.Merge(m, src)
}
func (m *QueryGetDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDomainRequest proto.InternalMessageInfo

func (m *QueryGetDomainRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetDomainResponse struct {
	Domain Domain `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain"`
}

func (m *QueryGetDomainResponse) Reset()         { *m = QueryGetDomainResponse{} }
func (m *QueryGetDomainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDomainResponse) ProtoMessage()    {}
func (*QueryGetDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{19}
}
func (m *QueryGetDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDomainResponse.Merge(m, src)
}
func (m *QueryGetDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDomainResponse proto.InternalMessageInfo

func (m *QueryGetDomainResponse) GetDomain() Domain {
	if m != nil {
		return m.Domain
	}
	return Domain{}
}

type QueryAllDomainRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDomainRequest) Reset()         { *m = QueryAllDomainRequest{} }
func (m *QueryAllDomainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDomainRequest) ProtoMessage()    {}
func (*QueryAllDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{20}
}
func (m *QueryAllDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDomainRequest.Merge(m, src)
}
func (m *QueryAllDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDomainRequest proto.InternalMessageInfo

func (m *QueryAllDomainRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDomainResponse struct {
	Domain     []Domain            `protobuf:"bytes,1,rep,name=Domain,proto3" json:"Domain"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDomainResponse) Reset()         { *m = QueryAllDomainResponse{} }
func (m *QueryAllDomainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDomainResponse) ProtoMessage()    {}
func (*QueryAllDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{21}
}
func (m *QueryAllDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDomainResponse.Merge(m, src)
}
func (m *QueryAllDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDomainResponse proto.InternalMessageInfo

func (m *QueryAllDomainResponse) GetDomain() []Domain {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *QueryAllDomainResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAuthenticationLogRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetAuthenticationLogRequest) Reset()         { *m = QueryGetAuthenticationLogRequest{} }
func (m *QueryGetAuthenticationLogRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuthenticationLogRequest) ProtoMessage()    {}
func (*QueryGetAuthenticationLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{22}
}
func (m *QueryGetAuthenticationLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuthenticationLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuthenticationLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuthenticationLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuthenticationLogRequest.Merge(m, src)
}
func (m *QueryGetAuthenticationLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuthenticationLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuthenticationLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuthenticationLogRequest proto.InternalMessageInfo

func (m *QueryGetAuthenticationLogRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetAuthenticationLogResponse struct {
	AuthenticationLog AuthenticationLog `protobuf:"bytes,1,opt,name=AuthenticationLog,proto3" json:"AuthenticationLog"`
}

func (m *QueryGetAuthenticationLogResponse) Reset()         { *m = QueryGetAuthenticationLogResponse{} }
func (m *QueryGetAuthenticationLogResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuthenticationLogResponse) ProtoMessage()    {}
func (*QueryGetAuthenticationLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{23}
}
func (m *QueryGetAuthenticationLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuthenticationLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuthenticationLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuthenticationLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuthenticationLogResponse.Merge(m, src)
}
func (m *QueryGetAuthenticationLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuthenticationLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuthenticationLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuthenticationLogResponse proto.InternalMessageInfo

func (m *QueryGetAuthenticationLogResponse) GetAuthenticationLog() AuthenticationLog {
	if m != nil {
		return m.AuthenticationLog
	}
	return AuthenticationLog{}
}

type QueryAllAuthenticationLogRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAuthenticationLogRequest) Reset()         { *m = QueryAllAuthenticationLogRequest{} }
func (m *QueryAllAuthenticationLogRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAuthenticationLogRequest) ProtoMessage()    {}
func (*QueryAllAuthenticationLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{24}
}
func (m *QueryAllAuthenticationLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAuthenticationLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAuthenticationLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAuthenticationLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAuthenticationLogRequest.Merge(m, src)
}
func (m *QueryAllAuthenticationLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAuthenticationLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAuthenticationLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAuthenticationLogRequest proto.InternalMessageInfo

func (m *QueryAllAuthenticationLogRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAuthenticationLogResponse struct {
	AuthenticationLog []AuthenticationLog `protobuf:"bytes,1,rep,name=AuthenticationLog,proto3" json:"AuthenticationLog"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAuthenticationLogResponse) Reset()         { *m = QueryAllAuthenticationLogResponse{} }
func (m *QueryAllAuthenticationLogResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAuthenticationLogResponse) ProtoMessage()    {}
func (*QueryAllAuthenticationLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{25}
}
func (m *QueryAllAuthenticationLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAuthenticationLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAuthenticationLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAuthenticationLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAuthenticationLogResponse.Merge(m, src)
}
func (m *QueryAllAuthenticationLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAuthenticationLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAuthenticationLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAuthenticationLogResponse proto.InternalMessageInfo

func (m *QueryAllAuthenticationLogResponse) GetAuthenticationLog() []AuthenticationLog {
	if m != nil {
		return m.AuthenticationLog
	}
	return nil
}

func (m *QueryAllAuthenticationLogResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDomainCooperationRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetDomainCooperationRequest) Reset()         { *m = QueryGetDomainCooperationRequest{} }
func (m *QueryGetDomainCooperationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDomainCooperationRequest) ProtoMessage()    {}
func (*QueryGetDomainCooperationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{26}
}
func (m *QueryGetDomainCooperationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDomainCooperationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDomainCooperationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDomainCooperationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDomainCooperationRequest.Merge(m, src)
}
func (m *QueryGetDomainCooperationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDomainCooperationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDomainCooperationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDomainCooperationRequest proto.InternalMessageInfo

func (m *QueryGetDomainCooperationRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetDomainCooperationResponse struct {
	DomainCooperation DomainCooperation `protobuf:"bytes,1,opt,name=DomainCooperation,proto3" json:"DomainCooperation"`
}

func (m *QueryGetDomainCooperationResponse) Reset()         { *m = QueryGetDomainCooperationResponse{} }
func (m *QueryGetDomainCooperationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDomainCooperationResponse) ProtoMessage()    {}
func (*QueryGetDomainCooperationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{27}
}
func (m *QueryGetDomainCooperationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDomainCooperationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDomainCooperationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDomainCooperationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDomainCooperationResponse.Merge(m, src)
}
func (m *QueryGetDomainCooperationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDomainCooperationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDomainCooperationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDomainCooperationResponse proto.InternalMessageInfo

func (m *QueryGetDomainCooperationResponse) GetDomainCooperation() DomainCooperation {
	if m != nil {
		return m.DomainCooperation
	}
	return DomainCooperation{}
}

type QueryAllDomainCooperationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDomainCooperationRequest) Reset()         { *m = QueryAllDomainCooperationRequest{} }
func (m *QueryAllDomainCooperationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDomainCooperationRequest) ProtoMessage()    {}
func (*QueryAllDomainCooperationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{28}
}
func (m *QueryAllDomainCooperationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDomainCooperationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDomainCooperationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDomainCooperationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDomainCooperationRequest.Merge(m, src)
}
func (m *QueryAllDomainCooperationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDomainCooperationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDomainCooperationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDomainCooperationRequest proto.InternalMessageInfo

func (m *QueryAllDomainCooperationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDomainCooperationResponse struct {
	DomainCooperation []DomainCooperation `protobuf:"bytes,1,rep,name=DomainCooperation,proto3" json:"DomainCooperation"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDomainCooperationResponse) Reset()         { *m = QueryAllDomainCooperationResponse{} }
func (m *QueryAllDomainCooperationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDomainCooperationResponse) ProtoMessage()    {}
func (*QueryAllDomainCooperationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{29}
}
func (m *QueryAllDomainCooperationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDomainCooperationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDomainCooperationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDomainCooperationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDomainCooperationResponse.Merge(m, src)
}
func (m *QueryAllDomainCooperationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDomainCooperationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDomainCooperationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDomainCooperationResponse proto.InternalMessageInfo

func (m *QueryAllDomainCooperationResponse) GetDomainCooperation() []DomainCooperation {
	if m != nil {
		return m.DomainCooperation
	}
	return nil
}

func (m *QueryAllDomainCooperationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCooperationLogRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCooperationLogRequest) Reset()         { *m = QueryGetCooperationLogRequest{} }
func (m *QueryGetCooperationLogRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCooperationLogRequest) ProtoMessage()    {}
func (*QueryGetCooperationLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{30}
}
func (m *QueryGetCooperationLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCooperationLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCooperationLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCooperationLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCooperationLogRequest.Merge(m, src)
}
func (m *QueryGetCooperationLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCooperationLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCooperationLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCooperationLogRequest proto.InternalMessageInfo

func (m *QueryGetCooperationLogRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCooperationLogResponse struct {
	CooperationLog CooperationLog `protobuf:"bytes,1,opt,name=CooperationLog,proto3" json:"CooperationLog"`
}

func (m *QueryGetCooperationLogResponse) Reset()         { *m = QueryGetCooperationLogResponse{} }
func (m *QueryGetCooperationLogResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCooperationLogResponse) ProtoMessage()    {}
func (*QueryGetCooperationLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{31}
}
func (m *QueryGetCooperationLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCooperationLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCooperationLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCooperationLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCooperationLogResponse.Merge(m, src)
}
func (m *QueryGetCooperationLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCooperationLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCooperationLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCooperationLogResponse proto.InternalMessageInfo

func (m *QueryGetCooperationLogResponse) GetCooperationLog() CooperationLog {
	if m != nil {
		return m.CooperationLog
	}
	return CooperationLog{}
}

type QueryAllCooperationLogRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCooperationLogRequest) Reset()         { *m = QueryAllCooperationLogRequest{} }
func (m *QueryAllCooperationLogRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCooperationLogRequest) ProtoMessage()    {}
func (*QueryAllCooperationLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{32}
}
func (m *QueryAllCooperationLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCooperationLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCooperationLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCooperationLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCooperationLogRequest.Merge(m, src)
}
func (m *QueryAllCooperationLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCooperationLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCooperationLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCooperationLogRequest proto.InternalMessageInfo

func (m *QueryAllCooperationLogRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCooperationLogResponse struct {
	CooperationLog []CooperationLog    `protobuf:"bytes,1,rep,name=CooperationLog,proto3" json:"CooperationLog"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCooperationLogResponse) Reset()         { *m = QueryAllCooperationLogResponse{} }
func (m *QueryAllCooperationLogResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCooperationLogResponse) ProtoMessage()    {}
func (*QueryAllCooperationLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{33}
}
func (m *QueryAllCooperationLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCooperationLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCooperationLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCooperationLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCooperationLogResponse.Merge(m, src)
}
func (m *QueryAllCooperationLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCooperationLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCooperationLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCooperationLogResponse proto.InternalMessageInfo

func (m *QueryAllCooperationLogResponse) GetCooperationLog() []CooperationLog {
	if m != nil {
		return m.CooperationLog
	}
	return nil
}

func (m *QueryAllCooperationLogResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryCheckEstablishedCooperationByChannelRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *QueryCheckEstablishedCooperationByChannelRequest) Reset() {
	*m = QueryCheckEstablishedCooperationByChannelRequest{}
}
func (m *QueryCheckEstablishedCooperationByChannelRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryCheckEstablishedCooperationByChannelRequest) ProtoMessage() {}
func (*QueryCheckEstablishedCooperationByChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{34}
}
func (m *QueryCheckEstablishedCooperationByChannelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckEstablishedCooperationByChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckEstablishedCooperationByChannelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckEstablishedCooperationByChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckEstablishedCooperationByChannelRequest.Merge(m, src)
}
func (m *QueryCheckEstablishedCooperationByChannelRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckEstablishedCooperationByChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckEstablishedCooperationByChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckEstablishedCooperationByChannelRequest proto.InternalMessageInfo

func (m *QueryCheckEstablishedCooperationByChannelRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type QueryCheckEstablishedCooperationByChannelResponse struct {
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Found bool   `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
}

func (m *QueryCheckEstablishedCooperationByChannelResponse) Reset() {
	*m = QueryCheckEstablishedCooperationByChannelResponse{}
}
func (m *QueryCheckEstablishedCooperationByChannelResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryCheckEstablishedCooperationByChannelResponse) ProtoMessage() {}
func (*QueryCheckEstablishedCooperationByChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{35}
}
func (m *QueryCheckEstablishedCooperationByChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckEstablishedCooperationByChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckEstablishedCooperationByChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckEstablishedCooperationByChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckEstablishedCooperationByChannelResponse.Merge(m, src)
}
func (m *QueryCheckEstablishedCooperationByChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckEstablishedCooperationByChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckEstablishedCooperationByChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckEstablishedCooperationByChannelResponse proto.InternalMessageInfo

func (m *QueryCheckEstablishedCooperationByChannelResponse) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *QueryCheckEstablishedCooperationByChannelResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

type QueryEstablishedCooperationByChannelRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *QueryEstablishedCooperationByChannelRequest) Reset() {
	*m = QueryEstablishedCooperationByChannelRequest{}
}
func (m *QueryEstablishedCooperationByChannelRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryEstablishedCooperationByChannelRequest) ProtoMessage() {}
func (*QueryEstablishedCooperationByChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{36}
}
func (m *QueryEstablishedCooperationByChannelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstablishedCooperationByChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstablishedCooperationByChannelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstablishedCooperationByChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstablishedCooperationByChannelRequest.Merge(m, src)
}
func (m *QueryEstablishedCooperationByChannelRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstablishedCooperationByChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstablishedCooperationByChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstablishedCooperationByChannelRequest proto.InternalMessageInfo

func (m *QueryEstablishedCooperationByChannelRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type QueryEstablishedCooperationByChannelResponse struct {
	DomainCooperation *DomainCooperation `protobuf:"bytes,1,opt,name=domainCooperation,proto3" json:"domainCooperation,omitempty"`
	Found             bool               `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
}

func (m *QueryEstablishedCooperationByChannelResponse) Reset() {
	*m = QueryEstablishedCooperationByChannelResponse{}
}
func (m *QueryEstablishedCooperationByChannelResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryEstablishedCooperationByChannelResponse) ProtoMessage() {}
func (*QueryEstablishedCooperationByChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{37}
}
func (m *QueryEstablishedCooperationByChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstablishedCooperationByChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstablishedCooperationByChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstablishedCooperationByChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstablishedCooperationByChannelResponse.Merge(m, src)
}
func (m *QueryEstablishedCooperationByChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstablishedCooperationByChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstablishedCooperationByChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstablishedCooperationByChannelResponse proto.InternalMessageInfo

func (m *QueryEstablishedCooperationByChannelResponse) GetDomainCooperation() *DomainCooperation {
	if m != nil {
		return m.DomainCooperation
	}
	return nil
}

func (m *QueryEstablishedCooperationByChannelResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

type QueryGetForwardPolicyRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetForwardPolicyRequest) Reset()         { *m = QueryGetForwardPolicyRequest{} }
func (m *QueryGetForwardPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetForwardPolicyRequest) ProtoMessage()    {}
func (*QueryGetForwardPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{38}
}
func (m *QueryGetForwardPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetForwardPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetForwardPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetForwardPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetForwardPolicyRequest.Merge(m, src)
}
func (m *QueryGetForwardPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetForwardPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetForwardPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetForwardPolicyRequest proto.InternalMessageInfo

func (m *QueryGetForwardPolicyRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetForwardPolicyResponse struct {
	ForwardPolicy ForwardPolicy `protobuf:"bytes,1,opt,name=ForwardPolicy,proto3" json:"ForwardPolicy"`
}

func (m *QueryGetForwardPolicyResponse) Reset()         { *m = QueryGetForwardPolicyResponse{} }
func (m *QueryGetForwardPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetForwardPolicyResponse) ProtoMessage()    {}
func (*QueryGetForwardPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{39}
}
func (m *QueryGetForwardPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetForwardPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetForwardPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetForwardPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetForwardPolicyResponse.Merge(m, src)
}
func (m *QueryGetForwardPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetForwardPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetForwardPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetForwardPolicyResponse proto.InternalMessageInfo

func (m *QueryGetForwardPolicyResponse) GetForwardPolicy() ForwardPolicy {
	if m != nil {
		return m.ForwardPolicy
	}
	return ForwardPolicy{}
}

type QueryAllForwardPolicyRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllForwardPolicyRequest) Reset()         { *m = QueryAllForwardPolicyRequest{} }
func (m *QueryAllForwardPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllForwardPolicyRequest) ProtoMessage()    {}
func (*QueryAllForwardPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{40}
}
func (m *QueryAllForwardPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllForwardPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllForwardPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllForwardPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllForwardPolicyRequest.Merge(m, src)
}
func (m *QueryAllForwardPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllForwardPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllForwardPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllForwardPolicyRequest proto.InternalMessageInfo

func (m *QueryAllForwardPolicyRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllForwardPolicyResponse struct {
	ForwardPolicy []ForwardPolicy     `protobuf:"bytes,1,rep,name=ForwardPolicy,proto3" json:"ForwardPolicy"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllForwardPolicyResponse) Reset()         { *m = QueryAllForwardPolicyResponse{} }
func (m *QueryAllForwardPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllForwardPolicyResponse) ProtoMessage()    {}
func (*QueryAllForwardPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{41}
}
func (m *QueryAllForwardPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllForwardPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllForwardPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllForwardPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllForwardPolicyResponse.Merge(m, src)
}
func (m *QueryAllForwardPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllForwardPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllForwardPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllForwardPolicyResponse proto.InternalMessageInfo

func (m *QueryAllForwardPolicyResponse) GetForwardPolicy() []ForwardPolicy {
	if m != nil {
		return m.ForwardPolicy
	}
	return nil
}

func (m *QueryAllForwardPolicyResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRetrieveForwardPolicyRequest struct {
}

func (m *QueryRetrieveForwardPolicyRequest) Reset()         { *m = QueryRetrieveForwardPolicyRequest{} }
func (m *QueryRetrieveForwardPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRetrieveForwardPolicyRequest) ProtoMessage()    {}
func (*QueryRetrieveForwardPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{42}
}
func (m *QueryRetrieveForwardPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRetrieveForwardPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRetrieveForwardPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRetrieveForwardPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRetrieveForwardPolicyRequest.Merge(m, src)
}
func (m *QueryRetrieveForwardPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRetrieveForwardPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRetrieveForwardPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRetrieveForwardPolicyRequest proto.InternalMessageInfo

type QueryRetrieveForwardPolicyResponse struct {
	ForwardPolicy *ForwardPolicy `protobuf:"bytes,1,opt,name=forwardPolicy,proto3" json:"forwardPolicy,omitempty"`
}

func (m *QueryRetrieveForwardPolicyResponse) Reset()         { *m = QueryRetrieveForwardPolicyResponse{} }
func (m *QueryRetrieveForwardPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRetrieveForwardPolicyResponse) ProtoMessage()    {}
func (*QueryRetrieveForwardPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{43}
}
func (m *QueryRetrieveForwardPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRetrieveForwardPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRetrieveForwardPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRetrieveForwardPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRetrieveForwardPolicyResponse.Merge(m, src)
}
func (m *QueryRetrieveForwardPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRetrieveForwardPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRetrieveForwardPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRetrieveForwardPolicyResponse proto.InternalMessageInfo

func (m *QueryRetrieveForwardPolicyResponse) GetForwardPolicy() *ForwardPolicy {
	if m != nil {
		return m.ForwardPolicy
	}
	return nil
}

type QueryGetDomainMapRequest struct {
	DomainIndex string `protobuf:"bytes,1,opt,name=domainIndex,proto3" json:"domainIndex,omitempty"`
}

func (m *QueryGetDomainMapRequest) Reset()         { *m = QueryGetDomainMapRequest{} }
func (m *QueryGetDomainMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDomainMapRequest) ProtoMessage()    {}
func (*QueryGetDomainMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{44}
}
func (m *QueryGetDomainMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDomainMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDomainMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDomainMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDomainMapRequest.Merge(m, src)
}
func (m *QueryGetDomainMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDomainMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDomainMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDomainMapRequest proto.InternalMessageInfo

func (m *QueryGetDomainMapRequest) GetDomainIndex() string {
	if m != nil {
		return m.DomainIndex
	}
	return ""
}

type QueryGetDomainMapResponse struct {
	DomainMap DomainMap `protobuf:"bytes,1,opt,name=domainMap,proto3" json:"domainMap"`
}

func (m *QueryGetDomainMapResponse) Reset()         { *m = QueryGetDomainMapResponse{} }
func (m *QueryGetDomainMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDomainMapResponse) ProtoMessage()    {}
func (*QueryGetDomainMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{45}
}
func (m *QueryGetDomainMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDomainMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDomainMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDomainMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDomainMapResponse.Merge(m, src)
}
func (m *QueryGetDomainMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDomainMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDomainMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDomainMapResponse proto.InternalMessageInfo

func (m *QueryGetDomainMapResponse) GetDomainMap() DomainMap {
	if m != nil {
		return m.DomainMap
	}
	return DomainMap{}
}

type QueryAllDomainMapRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDomainMapRequest) Reset()         { *m = QueryAllDomainMapRequest{} }
func (m *QueryAllDomainMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDomainMapRequest) ProtoMessage()    {}
func (*QueryAllDomainMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{46}
}
func (m *QueryAllDomainMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDomainMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDomainMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDomainMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDomainMapRequest.Merge(m, src)
}
func (m *QueryAllDomainMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDomainMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDomainMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDomainMapRequest proto.InternalMessageInfo

func (m *QueryAllDomainMapRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDomainMapResponse struct {
	DomainMap  []DomainMap         `protobuf:"bytes,1,rep,name=domainMap,proto3" json:"domainMap"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDomainMapResponse) Reset()         { *m = QueryAllDomainMapResponse{} }
func (m *QueryAllDomainMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDomainMapResponse) ProtoMessage()    {}
func (*QueryAllDomainMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{47}
}
func (m *QueryAllDomainMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDomainMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDomainMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDomainMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDomainMapResponse.Merge(m, src)
}
func (m *QueryAllDomainMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDomainMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDomainMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDomainMapResponse proto.InternalMessageInfo

func (m *QueryAllDomainMapResponse) GetDomainMap() []DomainMap {
	if m != nil {
		return m.DomainMap
	}
	return nil
}

func (m *QueryAllDomainMapResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCooperationNetworkFeaturesRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCooperationNetworkFeaturesRequest) Reset() {
	*m = QueryGetCooperationNetworkFeaturesRequest{}
}
func (m *QueryGetCooperationNetworkFeaturesRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCooperationNetworkFeaturesRequest) ProtoMessage() {}
func (*QueryGetCooperationNetworkFeaturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{48}
}
func (m *QueryGetCooperationNetworkFeaturesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCooperationNetworkFeaturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCooperationNetworkFeaturesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCooperationNetworkFeaturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCooperationNetworkFeaturesRequest.Merge(m, src)
}
func (m *QueryGetCooperationNetworkFeaturesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCooperationNetworkFeaturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCooperationNetworkFeaturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCooperationNetworkFeaturesRequest proto.InternalMessageInfo

func (m *QueryGetCooperationNetworkFeaturesRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCooperationNetworkFeaturesResponse struct {
	CooperationNetworkFeatures CooperationNetworkFeatures `protobuf:"bytes,1,opt,name=CooperationNetworkFeatures,proto3" json:"CooperationNetworkFeatures"`
}

func (m *QueryGetCooperationNetworkFeaturesResponse) Reset() {
	*m = QueryGetCooperationNetworkFeaturesResponse{}
}
func (m *QueryGetCooperationNetworkFeaturesResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCooperationNetworkFeaturesResponse) ProtoMessage() {}
func (*QueryGetCooperationNetworkFeaturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{49}
}
func (m *QueryGetCooperationNetworkFeaturesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCooperationNetworkFeaturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCooperationNetworkFeaturesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCooperationNetworkFeaturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCooperationNetworkFeaturesResponse.Merge(m, src)
}
func (m *QueryGetCooperationNetworkFeaturesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCooperationNetworkFeaturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCooperationNetworkFeaturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCooperationNetworkFeaturesResponse proto.InternalMessageInfo

func (m *QueryGetCooperationNetworkFeaturesResponse) GetCooperationNetworkFeatures() CooperationNetworkFeatures {
	if m != nil {
		return m.CooperationNetworkFeatures
	}
	return CooperationNetworkFeatures{}
}

type QueryAllCooperationNetworkFeaturesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCooperationNetworkFeaturesRequest) Reset() {
	*m = QueryAllCooperationNetworkFeaturesRequest{}
}
func (m *QueryAllCooperationNetworkFeaturesRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllCooperationNetworkFeaturesRequest) ProtoMessage() {}
func (*QueryAllCooperationNetworkFeaturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{50}
}
func (m *QueryAllCooperationNetworkFeaturesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCooperationNetworkFeaturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCooperationNetworkFeaturesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCooperationNetworkFeaturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCooperationNetworkFeaturesRequest.Merge(m, src)
}
func (m *QueryAllCooperationNetworkFeaturesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCooperationNetworkFeaturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCooperationNetworkFeaturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCooperationNetworkFeaturesRequest proto.InternalMessageInfo

func (m *QueryAllCooperationNetworkFeaturesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCooperationNetworkFeaturesResponse struct {
	CooperationNetworkFeatures []CooperationNetworkFeatures `protobuf:"bytes,1,rep,name=CooperationNetworkFeatures,proto3" json:"CooperationNetworkFeatures"`
	Pagination                 *query.PageResponse          `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCooperationNetworkFeaturesResponse) Reset() {
	*m = QueryAllCooperationNetworkFeaturesResponse{}
}
func (m *QueryAllCooperationNetworkFeaturesResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllCooperationNetworkFeaturesResponse) ProtoMessage() {}
func (*QueryAllCooperationNetworkFeaturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{51}
}
func (m *QueryAllCooperationNetworkFeaturesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCooperationNetworkFeaturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCooperationNetworkFeaturesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCooperationNetworkFeaturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCooperationNetworkFeaturesResponse.Merge(m, src)
}
func (m *QueryAllCooperationNetworkFeaturesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCooperationNetworkFeaturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCooperationNetworkFeaturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCooperationNetworkFeaturesResponse proto.InternalMessageInfo

func (m *QueryAllCooperationNetworkFeaturesResponse) GetCooperationNetworkFeatures() []CooperationNetworkFeatures {
	if m != nil {
		return m.CooperationNetworkFeatures
	}
	return nil
}

func (m *QueryAllCooperationNetworkFeaturesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCooperationDataRequest struct {
	LabelIndex string `protobuf:"bytes,1,opt,name=labelIndex,proto3" json:"labelIndex,omitempty"`
}

func (m *QueryGetCooperationDataRequest) Reset()         { *m = QueryGetCooperationDataRequest{} }
func (m *QueryGetCooperationDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCooperationDataRequest) ProtoMessage()    {}
func (*QueryGetCooperationDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{52}
}
func (m *QueryGetCooperationDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCooperationDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCooperationDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCooperationDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCooperationDataRequest.Merge(m, src)
}
func (m *QueryGetCooperationDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCooperationDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCooperationDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCooperationDataRequest proto.InternalMessageInfo

func (m *QueryGetCooperationDataRequest) GetLabelIndex() string {
	if m != nil {
		return m.LabelIndex
	}
	return ""
}

type QueryGetCooperationDataResponse struct {
	CooperationData CooperationData `protobuf:"bytes,1,opt,name=cooperationData,proto3" json:"cooperationData"`
}

func (m *QueryGetCooperationDataResponse) Reset()         { *m = QueryGetCooperationDataResponse{} }
func (m *QueryGetCooperationDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCooperationDataResponse) ProtoMessage()    {}
func (*QueryGetCooperationDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{53}
}
func (m *QueryGetCooperationDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCooperationDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCooperationDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCooperationDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCooperationDataResponse.Merge(m, src)
}
func (m *QueryGetCooperationDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCooperationDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCooperationDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCooperationDataResponse proto.InternalMessageInfo

func (m *QueryGetCooperationDataResponse) GetCooperationData() CooperationData {
	if m != nil {
		return m.CooperationData
	}
	return CooperationData{}
}

type QueryAllCooperationDataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCooperationDataRequest) Reset()         { *m = QueryAllCooperationDataRequest{} }
func (m *QueryAllCooperationDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCooperationDataRequest) ProtoMessage()    {}
func (*QueryAllCooperationDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{54}
}
func (m *QueryAllCooperationDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCooperationDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCooperationDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCooperationDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCooperationDataRequest.Merge(m, src)
}
func (m *QueryAllCooperationDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCooperationDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCooperationDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCooperationDataRequest proto.InternalMessageInfo

func (m *QueryAllCooperationDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCooperationDataResponse struct {
	CooperationData []CooperationData   `protobuf:"bytes,1,rep,name=cooperationData,proto3" json:"cooperationData"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCooperationDataResponse) Reset()         { *m = QueryAllCooperationDataResponse{} }
func (m *QueryAllCooperationDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCooperationDataResponse) ProtoMessage()    {}
func (*QueryAllCooperationDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{55}
}
func (m *QueryAllCooperationDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCooperationDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCooperationDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCooperationDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCooperationDataResponse.Merge(m, src)
}
func (m *QueryAllCooperationDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCooperationDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCooperationDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCooperationDataResponse proto.InternalMessageInfo

func (m *QueryAllCooperationDataResponse) GetCooperationData() []CooperationData {
	if m != nil {
		return m.CooperationData
	}
	return nil
}

func (m *QueryAllCooperationDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCooperationNetworkRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCooperationNetworkRequest) Reset()         { *m = QueryGetCooperationNetworkRequest{} }
func (m *QueryGetCooperationNetworkRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCooperationNetworkRequest) ProtoMessage()    {}
func (*QueryGetCooperationNetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{56}
}
func (m *QueryGetCooperationNetworkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCooperationNetworkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCooperationNetworkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCooperationNetworkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCooperationNetworkRequest.Merge(m, src)
}
func (m *QueryGetCooperationNetworkRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCooperationNetworkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCooperationNetworkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCooperationNetworkRequest proto.InternalMessageInfo

func (m *QueryGetCooperationNetworkRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCooperationNetworkResponse struct {
	CooperationNetwork CooperationNetwork `protobuf:"bytes,1,opt,name=CooperationNetwork,proto3" json:"CooperationNetwork"`
}

func (m *QueryGetCooperationNetworkResponse) Reset()         { *m = QueryGetCooperationNetworkResponse{} }
func (m *QueryGetCooperationNetworkResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCooperationNetworkResponse) ProtoMessage()    {}
func (*QueryGetCooperationNetworkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{57}
}
func (m *QueryGetCooperationNetworkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCooperationNetworkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCooperationNetworkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCooperationNetworkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCooperationNetworkResponse.Merge(m, src)
}
func (m *QueryGetCooperationNetworkResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCooperationNetworkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCooperationNetworkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCooperationNetworkResponse proto.InternalMessageInfo

func (m *QueryGetCooperationNetworkResponse) GetCooperationNetwork() CooperationNetwork {
	if m != nil {
		return m.CooperationNetwork
	}
	return CooperationNetwork{}
}

type QueryAllCooperationNetworkRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCooperationNetworkRequest) Reset()         { *m = QueryAllCooperationNetworkRequest{} }
func (m *QueryAllCooperationNetworkRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCooperationNetworkRequest) ProtoMessage()    {}
func (*QueryAllCooperationNetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{58}
}
func (m *QueryAllCooperationNetworkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCooperationNetworkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCooperationNetworkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCooperationNetworkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCooperationNetworkRequest.Merge(m, src)
}
func (m *QueryAllCooperationNetworkRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCooperationNetworkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCooperationNetworkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCooperationNetworkRequest proto.InternalMessageInfo

func (m *QueryAllCooperationNetworkRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCooperationNetworkResponse struct {
	CooperationNetwork []CooperationNetwork `protobuf:"bytes,1,rep,name=CooperationNetwork,proto3" json:"CooperationNetwork"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCooperationNetworkResponse) Reset()         { *m = QueryAllCooperationNetworkResponse{} }
func (m *QueryAllCooperationNetworkResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCooperationNetworkResponse) ProtoMessage()    {}
func (*QueryAllCooperationNetworkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{59}
}
func (m *QueryAllCooperationNetworkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCooperationNetworkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCooperationNetworkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCooperationNetworkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCooperationNetworkResponse.Merge(m, src)
}
func (m *QueryAllCooperationNetworkResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCooperationNetworkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCooperationNetworkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCooperationNetworkResponse proto.InternalMessageInfo

func (m *QueryAllCooperationNetworkResponse) GetCooperationNetwork() []CooperationNetwork {
	if m != nil {
		return m.CooperationNetwork
	}
	return nil
}

func (m *QueryAllCooperationNetworkResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetUpdatePolicyRequest struct {
}

func (m *QueryGetUpdatePolicyRequest) Reset()         { *m = QueryGetUpdatePolicyRequest{} }
func (m *QueryGetUpdatePolicyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUpdatePolicyRequest) ProtoMessage()    {}
func (*QueryGetUpdatePolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{60}
}
func (m *QueryGetUpdatePolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUpdatePolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUpdatePolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUpdatePolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUpdatePolicyRequest.Merge(m, src)
}
func (m *QueryGetUpdatePolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUpdatePolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUpdatePolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUpdatePolicyRequest proto.InternalMessageInfo

type QueryGetUpdatePolicyResponse struct {
	UpdatePolicy UpdatePolicy `protobuf:"bytes,1,opt,name=UpdatePolicy,proto3" json:"UpdatePolicy"`
}

func (m *QueryGetUpdatePolicyResponse) Reset()         { *m = QueryGetUpdatePolicyResponse{} }
func (m *QueryGetUpdatePolicyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUpdatePolicyResponse) ProtoMessage()    {}
func (*QueryGetUpdatePolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{61}
}
func (m *QueryGetUpdatePolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUpdatePolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUpdatePolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUpdatePolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUpdatePolicyResponse.Merge(m, src)
}
func (m *QueryGetUpdatePolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUpdatePolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUpdatePolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUpdatePolicyResponse proto.InternalMessageInfo

func (m *QueryGetUpdatePolicyResponse) GetUpdatePolicy() UpdatePolicy {
	if m != nil {
		return m.UpdatePolicy
	}
	return UpdatePolicy{}
}

type QueryGetCooperativeDomainRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCooperativeDomainRequest) Reset()         { *m = QueryGetCooperativeDomainRequest{} }
func (m *QueryGetCooperativeDomainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCooperativeDomainRequest) ProtoMessage()    {}
func (*QueryGetCooperativeDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{62}
}
func (m *QueryGetCooperativeDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCooperativeDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCooperativeDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCooperativeDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCooperativeDomainRequest.Merge(m, src)
}
func (m *QueryGetCooperativeDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCooperativeDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCooperativeDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCooperativeDomainRequest proto.InternalMessageInfo

func (m *QueryGetCooperativeDomainRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCooperativeDomainResponse struct {
	CooperativeDomain CooperativeDomain `protobuf:"bytes,1,opt,name=CooperativeDomain,proto3" json:"CooperativeDomain"`
}

func (m *QueryGetCooperativeDomainResponse) Reset()         { *m = QueryGetCooperativeDomainResponse{} }
func (m *QueryGetCooperativeDomainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCooperativeDomainResponse) ProtoMessage()    {}
func (*QueryGetCooperativeDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{63}
}
func (m *QueryGetCooperativeDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCooperativeDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCooperativeDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCooperativeDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCooperativeDomainResponse.Merge(m, src)
}
func (m *QueryGetCooperativeDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCooperativeDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCooperativeDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCooperativeDomainResponse proto.InternalMessageInfo

func (m *QueryGetCooperativeDomainResponse) GetCooperativeDomain() CooperativeDomain {
	if m != nil {
		return m.CooperativeDomain
	}
	return CooperativeDomain{}
}

type QueryAllCooperativeDomainRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCooperativeDomainRequest) Reset()         { *m = QueryAllCooperativeDomainRequest{} }
func (m *QueryAllCooperativeDomainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCooperativeDomainRequest) ProtoMessage()    {}
func (*QueryAllCooperativeDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{64}
}
func (m *QueryAllCooperativeDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCooperativeDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCooperativeDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCooperativeDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCooperativeDomainRequest.Merge(m, src)
}
func (m *QueryAllCooperativeDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCooperativeDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCooperativeDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCooperativeDomainRequest proto.InternalMessageInfo

func (m *QueryAllCooperativeDomainRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCooperativeDomainResponse struct {
	CooperativeDomain []CooperativeDomain `protobuf:"bytes,1,rep,name=CooperativeDomain,proto3" json:"CooperativeDomain"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCooperativeDomainResponse) Reset()         { *m = QueryAllCooperativeDomainResponse{} }
func (m *QueryAllCooperativeDomainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCooperativeDomainResponse) ProtoMessage()    {}
func (*QueryAllCooperativeDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{65}
}
func (m *QueryAllCooperativeDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCooperativeDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCooperativeDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCooperativeDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCooperativeDomainResponse.Merge(m, src)
}
func (m *QueryAllCooperativeDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCooperativeDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCooperativeDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCooperativeDomainResponse proto.InternalMessageInfo

func (m *QueryAllCooperativeDomainResponse) GetCooperativeDomain() []CooperativeDomain {
	if m != nil {
		return m.CooperativeDomain
	}
	return nil
}

func (m *QueryAllCooperativeDomainResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDelegationPathRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetDelegationPathRequest) Reset()         { *m = QueryGetDelegationPathRequest{} }
func (m *QueryGetDelegationPathRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDelegationPathRequest) ProtoMessage()    {}
func (*QueryGetDelegationPathRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{66}
}
func (m *QueryGetDelegationPathRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDelegationPathRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDelegationPathRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDelegationPathRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDelegationPathRequest.Merge(m, src)
}
func (m *QueryGetDelegationPathRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDelegationPathRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDelegationPathRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDelegationPathRequest proto.InternalMessageInfo

func (m *QueryGetDelegationPathRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetDelegationPathResponse struct {
	DelegationPath DelegationPath `protobuf:"bytes,1,opt,name=DelegationPath,proto3" json:"DelegationPath"`
}

func (m *QueryGetDelegationPathResponse) Reset()         { *m = QueryGetDelegationPathResponse{} }
func (m *QueryGetDelegationPathResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDelegationPathResponse) ProtoMessage()    {}
func (*QueryGetDelegationPathResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{67}
}
func (m *QueryGetDelegationPathResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDelegationPathResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDelegationPathResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDelegationPathResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDelegationPathResponse.Merge(m, src)
}
func (m *QueryGetDelegationPathResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDelegationPathResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDelegationPathResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDelegationPathResponse proto.InternalMessageInfo

func (m *QueryGetDelegationPathResponse) GetDelegationPath() DelegationPath {
	if m != nil {
		return m.DelegationPath
	}
	return DelegationPath{}
}

type QueryAllDelegationPathRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDelegationPathRequest) Reset()         { *m = QueryAllDelegationPathRequest{} }
func (m *QueryAllDelegationPathRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDelegationPathRequest) ProtoMessage()    {}
func (*QueryAllDelegationPathRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{68}
}
func (m *QueryAllDelegationPathRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDelegationPathRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDelegationPathRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDelegationPathRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDelegationPathRequest.Merge(m, src)
}
func (m *QueryAllDelegationPathRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDelegationPathRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDelegationPathRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDelegationPathRequest proto.InternalMessageInfo

func (m *QueryAllDelegationPathRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDelegationPathResponse struct {
	DelegationPath []DelegationPath    `protobuf:"bytes,1,rep,name=DelegationPath,proto3" json:"DelegationPath"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDelegationPathResponse) Reset()         { *m = QueryAllDelegationPathResponse{} }
func (m *QueryAllDelegationPathResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDelegationPathResponse) ProtoMessage()    {}
func (*QueryAllDelegationPathResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{69}
}
func (m *QueryAllDelegationPathResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDelegationPathResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDelegationPathResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDelegationPathResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDelegationPathResponse.Merge(m, src)
}
func (m *QueryAllDelegationPathResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDelegationPathResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDelegationPathResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDelegationPathResponse proto.InternalMessageInfo

func (m *QueryAllDelegationPathResponse) GetDelegationPath() []DelegationPath {
	if m != nil {
		return m.DelegationPath
	}
	return nil
}

func (m *QueryAllDelegationPathResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPathRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPathRequest) Reset()         { *m = QueryGetPathRequest{} }
func (m *QueryGetPathRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPathRequest) ProtoMessage()    {}
func (*QueryGetPathRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{70}
}
func (m *QueryGetPathRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPathRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPathRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPathRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPathRequest.Merge(m, src)
}
func (m *QueryGetPathRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPathRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPathRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPathRequest proto.InternalMessageInfo

func (m *QueryGetPathRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPathResponse struct {
	Path Path `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path"`
}

func (m *QueryGetPathResponse) Reset()         { *m = QueryGetPathResponse{} }
func (m *QueryGetPathResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPathResponse) ProtoMessage()    {}
func (*QueryGetPathResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{71}
}
func (m *QueryGetPathResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPathResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPathResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPathResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPathResponse.Merge(m, src)
}
func (m *QueryGetPathResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPathResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPathResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPathResponse proto.InternalMessageInfo

func (m *QueryGetPathResponse) GetPath() Path {
	if m != nil {
		return m.Path
	}
	return Path{}
}

type QueryAllPathRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPathRequest) Reset()         { *m = QueryAllPathRequest{} }
func (m *QueryAllPathRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPathRequest) ProtoMessage()    {}
func (*QueryAllPathRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{72}
}
func (m *QueryAllPathRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPathRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPathRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPathRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPathRequest.Merge(m, src)
}
func (m *QueryAllPathRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPathRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPathRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPathRequest proto.InternalMessageInfo

func (m *QueryAllPathRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPathResponse struct {
	Path       []Path              `protobuf:"bytes,1,rep,name=Path,proto3" json:"Path"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPathResponse) Reset()         { *m = QueryAllPathResponse{} }
func (m *QueryAllPathResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPathResponse) ProtoMessage()    {}
func (*QueryAllPathResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{73}
}
func (m *QueryAllPathResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPathResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPathResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPathResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPathResponse.Merge(m, src)
}
func (m *QueryAllPathResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPathResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPathResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPathResponse proto.InternalMessageInfo

func (m *QueryAllPathResponse) GetPath() []Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *QueryAllPathResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTimeCalculationRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetTimeCalculationRequest) Reset()         { *m = QueryGetTimeCalculationRequest{} }
func (m *QueryGetTimeCalculationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimeCalculationRequest) ProtoMessage()    {}
func (*QueryGetTimeCalculationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{74}
}
func (m *QueryGetTimeCalculationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimeCalculationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimeCalculationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimeCalculationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimeCalculationRequest.Merge(m, src)
}
func (m *QueryGetTimeCalculationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimeCalculationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimeCalculationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimeCalculationRequest proto.InternalMessageInfo

func (m *QueryGetTimeCalculationRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetTimeCalculationResponse struct {
	TimeCalculation TimeCalculation `protobuf:"bytes,1,opt,name=TimeCalculation,proto3" json:"TimeCalculation"`
}

func (m *QueryGetTimeCalculationResponse) Reset()         { *m = QueryGetTimeCalculationResponse{} }
func (m *QueryGetTimeCalculationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimeCalculationResponse) ProtoMessage()    {}
func (*QueryGetTimeCalculationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{75}
}
func (m *QueryGetTimeCalculationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimeCalculationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimeCalculationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimeCalculationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimeCalculationResponse.Merge(m, src)
}
func (m *QueryGetTimeCalculationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimeCalculationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimeCalculationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimeCalculationResponse proto.InternalMessageInfo

func (m *QueryGetTimeCalculationResponse) GetTimeCalculation() TimeCalculation {
	if m != nil {
		return m.TimeCalculation
	}
	return TimeCalculation{}
}

type QueryAllTimeCalculationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTimeCalculationRequest) Reset()         { *m = QueryAllTimeCalculationRequest{} }
func (m *QueryAllTimeCalculationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimeCalculationRequest) ProtoMessage()    {}
func (*QueryAllTimeCalculationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{76}
}
func (m *QueryAllTimeCalculationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimeCalculationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimeCalculationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimeCalculationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimeCalculationRequest.Merge(m, src)
}
func (m *QueryAllTimeCalculationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimeCalculationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimeCalculationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimeCalculationRequest proto.InternalMessageInfo

func (m *QueryAllTimeCalculationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTimeCalculationResponse struct {
	TimeCalculation []TimeCalculation   `protobuf:"bytes,1,rep,name=TimeCalculation,proto3" json:"TimeCalculation"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTimeCalculationResponse) Reset()         { *m = QueryAllTimeCalculationResponse{} }
func (m *QueryAllTimeCalculationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimeCalculationResponse) ProtoMessage()    {}
func (*QueryAllTimeCalculationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{77}
}
func (m *QueryAllTimeCalculationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimeCalculationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimeCalculationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimeCalculationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimeCalculationResponse.Merge(m, src)
}
func (m *QueryAllTimeCalculationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimeCalculationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimeCalculationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimeCalculationResponse proto.InternalMessageInfo

func (m *QueryAllTimeCalculationResponse) GetTimeCalculation() []TimeCalculation {
	if m != nil {
		return m.TimeCalculation
	}
	return nil
}

func (m *QueryAllTimeCalculationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCalculationTimeRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCalculationTimeRequest) Reset()         { *m = QueryGetCalculationTimeRequest{} }
func (m *QueryGetCalculationTimeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCalculationTimeRequest) ProtoMessage()    {}
func (*QueryGetCalculationTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{78}
}
func (m *QueryGetCalculationTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCalculationTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCalculationTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCalculationTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCalculationTimeRequest.Merge(m, src)
}
func (m *QueryGetCalculationTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCalculationTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCalculationTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCalculationTimeRequest proto.InternalMessageInfo

func (m *QueryGetCalculationTimeRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCalculationTimeResponse struct {
	CalculationTime CalculationTime `protobuf:"bytes,1,opt,name=CalculationTime,proto3" json:"CalculationTime"`
}

func (m *QueryGetCalculationTimeResponse) Reset()         { *m = QueryGetCalculationTimeResponse{} }
func (m *QueryGetCalculationTimeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCalculationTimeResponse) ProtoMessage()    {}
func (*QueryGetCalculationTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{79}
}
func (m *QueryGetCalculationTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCalculationTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCalculationTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCalculationTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCalculationTimeResponse.Merge(m, src)
}
func (m *QueryGetCalculationTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCalculationTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCalculationTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCalculationTimeResponse proto.InternalMessageInfo

func (m *QueryGetCalculationTimeResponse) GetCalculationTime() CalculationTime {
	if m != nil {
		return m.CalculationTime
	}
	return CalculationTime{}
}

type QueryAllCalculationTimeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCalculationTimeRequest) Reset()         { *m = QueryAllCalculationTimeRequest{} }
func (m *QueryAllCalculationTimeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCalculationTimeRequest) ProtoMessage()    {}
func (*QueryAllCalculationTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{80}
}
func (m *QueryAllCalculationTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCalculationTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCalculationTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCalculationTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCalculationTimeRequest.Merge(m, src)
}
func (m *QueryAllCalculationTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCalculationTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCalculationTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCalculationTimeRequest proto.InternalMessageInfo

func (m *QueryAllCalculationTimeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCalculationTimeResponse struct {
	CalculationTime []CalculationTime   `protobuf:"bytes,1,rep,name=CalculationTime,proto3" json:"CalculationTime"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCalculationTimeResponse) Reset()         { *m = QueryAllCalculationTimeResponse{} }
func (m *QueryAllCalculationTimeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCalculationTimeResponse) ProtoMessage()    {}
func (*QueryAllCalculationTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{81}
}
func (m *QueryAllCalculationTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCalculationTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCalculationTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCalculationTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCalculationTimeResponse.Merge(m, src)
}
func (m *QueryAllCalculationTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCalculationTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCalculationTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCalculationTimeResponse proto.InternalMessageInfo

func (m *QueryAllCalculationTimeResponse) GetCalculationTime() []CalculationTime {
	if m != nil {
		return m.CalculationTime
	}
	return nil
}

func (m *QueryAllCalculationTimeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRequestAccessRequest struct {
	Object string `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	Action string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (m *QueryRequestAccessRequest) Reset()         { *m = QueryRequestAccessRequest{} }
func (m *QueryRequestAccessRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequestAccessRequest) ProtoMessage()    {}
func (*QueryRequestAccessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{82}
}
func (m *QueryRequestAccessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequestAccessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequestAccessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequestAccessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequestAccessRequest.Merge(m, src)
}
func (m *QueryRequestAccessRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequestAccessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequestAccessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequestAccessRequest proto.InternalMessageInfo

func (m *QueryRequestAccessRequest) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *QueryRequestAccessRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type QueryRequestAccessResponse struct {
	Decision string `protobuf:"bytes,1,opt,name=decision,proto3" json:"decision,omitempty"`
}

func (m *QueryRequestAccessResponse) Reset()         { *m = QueryRequestAccessResponse{} }
func (m *QueryRequestAccessResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRequestAccessResponse) ProtoMessage()    {}
func (*QueryRequestAccessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{83}
}
func (m *QueryRequestAccessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequestAccessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequestAccessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequestAccessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequestAccessResponse.Merge(m, src)
}
func (m *QueryRequestAccessResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequestAccessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequestAccessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequestAccessResponse proto.InternalMessageInfo

func (m *QueryRequestAccessResponse) GetDecision() string {
	if m != nil {
		return m.Decision
	}
	return ""
}

type QueryGetInterDomainAclPolicyRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetInterDomainAclPolicyRequest) Reset()         { *m = QueryGetInterDomainAclPolicyRequest{} }
func (m *QueryGetInterDomainAclPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInterDomainAclPolicyRequest) ProtoMessage()    {}
func (*QueryGetInterDomainAclPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{84}
}
func (m *QueryGetInterDomainAclPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInterDomainAclPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInterDomainAclPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInterDomainAclPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInterDomainAclPolicyRequest.Merge(m, src)
}
func (m *QueryGetInterDomainAclPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInterDomainAclPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInterDomainAclPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInterDomainAclPolicyRequest proto.InternalMessageInfo

func (m *QueryGetInterDomainAclPolicyRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetInterDomainAclPolicyResponse struct {
	InterDomainAclPolicy InterDomainAclPolicy `protobuf:"bytes,1,opt,name=InterDomainAclPolicy,proto3" json:"InterDomainAclPolicy"`
}

func (m *QueryGetInterDomainAclPolicyResponse) Reset()         { *m = QueryGetInterDomainAclPolicyResponse{} }
func (m *QueryGetInterDomainAclPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInterDomainAclPolicyResponse) ProtoMessage()    {}
func (*QueryGetInterDomainAclPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{85}
}
func (m *QueryGetInterDomainAclPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInterDomainAclPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInterDomainAclPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInterDomainAclPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInterDomainAclPolicyResponse.Merge(m, src)
}
func (m *QueryGetInterDomainAclPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInterDomainAclPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInterDomainAclPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInterDomainAclPolicyResponse proto.InternalMessageInfo

func (m *QueryGetInterDomainAclPolicyResponse) GetInterDomainAclPolicy() InterDomainAclPolicy {
	if m != nil {
		return m.InterDomainAclPolicy
	}
	return InterDomainAclPolicy{}
}

type QueryAllInterDomainAclPolicyRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInterDomainAclPolicyRequest) Reset()         { *m = QueryAllInterDomainAclPolicyRequest{} }
func (m *QueryAllInterDomainAclPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInterDomainAclPolicyRequest) ProtoMessage()    {}
func (*QueryAllInterDomainAclPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{86}
}
func (m *QueryAllInterDomainAclPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInterDomainAclPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInterDomainAclPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInterDomainAclPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInterDomainAclPolicyRequest.Merge(m, src)
}
func (m *QueryAllInterDomainAclPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInterDomainAclPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInterDomainAclPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInterDomainAclPolicyRequest proto.InternalMessageInfo

func (m *QueryAllInterDomainAclPolicyRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInterDomainAclPolicyResponse struct {
	InterDomainAclPolicy []InterDomainAclPolicy `protobuf:"bytes,1,rep,name=InterDomainAclPolicy,proto3" json:"InterDomainAclPolicy"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInterDomainAclPolicyResponse) Reset()         { *m = QueryAllInterDomainAclPolicyResponse{} }
func (m *QueryAllInterDomainAclPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInterDomainAclPolicyResponse) ProtoMessage()    {}
func (*QueryAllInterDomainAclPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{87}
}
func (m *QueryAllInterDomainAclPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInterDomainAclPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInterDomainAclPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInterDomainAclPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInterDomainAclPolicyResponse.Merge(m, src)
}
func (m *QueryAllInterDomainAclPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInterDomainAclPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInterDomainAclPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInterDomainAclPolicyResponse proto.InternalMessageInfo

func (m *QueryAllInterDomainAclPolicyResponse) GetInterDomainAclPolicy() []InterDomainAclPolicy {
	if m != nil {
		return m.InterDomainAclPolicy
	}
	return nil
}

func (m *QueryAllInterDomainAclPolicyResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetInterDomainDclPolicyRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetInterDomainDclPolicyRequest) Reset()         { *m = QueryGetInterDomainDclPolicyRequest{} }
func (m *QueryGetInterDomainDclPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInterDomainDclPolicyRequest) ProtoMessage()    {}
func (*QueryGetInterDomainDclPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{88}
}
func (m *QueryGetInterDomainDclPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInterDomainDclPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInterDomainDclPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInterDomainDclPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInterDomainDclPolicyRequest.Merge(m, src)
}
func (m *QueryGetInterDomainDclPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInterDomainDclPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInterDomainDclPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInterDomainDclPolicyRequest proto.InternalMessageInfo

func (m *QueryGetInterDomainDclPolicyRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetInterDomainDclPolicyResponse struct {
	InterDomainDclPolicy InterDomainDclPolicy `protobuf:"bytes,1,opt,name=InterDomainDclPolicy,proto3" json:"InterDomainDclPolicy"`
}

func (m *QueryGetInterDomainDclPolicyResponse) Reset()         { *m = QueryGetInterDomainDclPolicyResponse{} }
func (m *QueryGetInterDomainDclPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInterDomainDclPolicyResponse) ProtoMessage()    {}
func (*QueryGetInterDomainDclPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{89}
}
func (m *QueryGetInterDomainDclPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInterDomainDclPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInterDomainDclPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInterDomainDclPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInterDomainDclPolicyResponse.Merge(m, src)
}
func (m *QueryGetInterDomainDclPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInterDomainDclPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInterDomainDclPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInterDomainDclPolicyResponse proto.InternalMessageInfo

func (m *QueryGetInterDomainDclPolicyResponse) GetInterDomainDclPolicy() InterDomainDclPolicy {
	if m != nil {
		return m.InterDomainDclPolicy
	}
	return InterDomainDclPolicy{}
}

type QueryAllInterDomainDclPolicyRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInterDomainDclPolicyRequest) Reset()         { *m = QueryAllInterDomainDclPolicyRequest{} }
func (m *QueryAllInterDomainDclPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInterDomainDclPolicyRequest) ProtoMessage()    {}
func (*QueryAllInterDomainDclPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{90}
}
func (m *QueryAllInterDomainDclPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInterDomainDclPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInterDomainDclPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInterDomainDclPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInterDomainDclPolicyRequest.Merge(m, src)
}
func (m *QueryAllInterDomainDclPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInterDomainDclPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInterDomainDclPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInterDomainDclPolicyRequest proto.InternalMessageInfo

func (m *QueryAllInterDomainDclPolicyRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInterDomainDclPolicyResponse struct {
	InterDomainDclPolicy []InterDomainDclPolicy `protobuf:"bytes,1,rep,name=InterDomainDclPolicy,proto3" json:"InterDomainDclPolicy"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInterDomainDclPolicyResponse) Reset()         { *m = QueryAllInterDomainDclPolicyResponse{} }
func (m *QueryAllInterDomainDclPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInterDomainDclPolicyResponse) ProtoMessage()    {}
func (*QueryAllInterDomainDclPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{91}
}
func (m *QueryAllInterDomainDclPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInterDomainDclPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInterDomainDclPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInterDomainDclPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInterDomainDclPolicyResponse.Merge(m, src)
}
func (m *QueryAllInterDomainDclPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInterDomainDclPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInterDomainDclPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInterDomainDclPolicyResponse proto.InternalMessageInfo

func (m *QueryAllInterDomainDclPolicyResponse) GetInterDomainDclPolicy() []InterDomainDclPolicy {
	if m != nil {
		return m.InterDomainDclPolicy
	}
	return nil
}

func (m *QueryAllInterDomainDclPolicyResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "crossdomain.cdac.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "crossdomain.cdac.QueryParamsResponse")
	proto.RegisterType((*QueryGetPublicKeyRequest)(nil), "crossdomain.cdac.QueryGetPublicKeyRequest")
	proto.RegisterType((*QueryGetPublicKeyResponse)(nil), "crossdomain.cdac.QueryGetPublicKeyResponse")
	proto.RegisterType((*QueryAllPublicKeyRequest)(nil), "crossdomain.cdac.QueryAllPublicKeyRequest")
	proto.RegisterType((*QueryAllPublicKeyResponse)(nil), "crossdomain.cdac.QueryAllPublicKeyResponse")
	proto.RegisterType((*QueryGetValidityRequest)(nil), "crossdomain.cdac.QueryGetValidityRequest")
	proto.RegisterType((*QueryGetValidityResponse)(nil), "crossdomain.cdac.QueryGetValidityResponse")
	proto.RegisterType((*QueryAllValidityRequest)(nil), "crossdomain.cdac.QueryAllValidityRequest")
	proto.RegisterType((*QueryAllValidityResponse)(nil), "crossdomain.cdac.QueryAllValidityResponse")
	proto.RegisterType((*QueryGetCertificateRequest)(nil), "crossdomain.cdac.QueryGetCertificateRequest")
	proto.RegisterType((*QueryGetCertificateResponse)(nil), "crossdomain.cdac.QueryGetCertificateResponse")
	proto.RegisterType((*QueryAllCertificateRequest)(nil), "crossdomain.cdac.QueryAllCertificateRequest")
	proto.RegisterType((*QueryAllCertificateResponse)(nil), "crossdomain.cdac.QueryAllCertificateResponse")
	proto.RegisterType((*QueryGetIbcConnectionRequest)(nil), "crossdomain.cdac.QueryGetIbcConnectionRequest")
	proto.RegisterType((*QueryGetIbcConnectionResponse)(nil), "crossdomain.cdac.QueryGetIbcConnectionResponse")
	proto.RegisterType((*QueryAllIbcConnectionRequest)(nil), "crossdomain.cdac.QueryAllIbcConnectionRequest")
	proto.RegisterType((*QueryAllIbcConnectionResponse)(nil), "crossdomain.cdac.QueryAllIbcConnectionResponse")
	proto.RegisterType((*QueryGetDomainRequest)(nil), "crossdomain.cdac.QueryGetDomainRequest")
	proto.RegisterType((*QueryGetDomainResponse)(nil), "crossdomain.cdac.QueryGetDomainResponse")
	proto.RegisterType((*QueryAllDomainRequest)(nil), "crossdomain.cdac.QueryAllDomainRequest")
	proto.RegisterType((*QueryAllDomainResponse)(nil), "crossdomain.cdac.QueryAllDomainResponse")
	proto.RegisterType((*QueryGetAuthenticationLogRequest)(nil), "crossdomain.cdac.QueryGetAuthenticationLogRequest")
	proto.RegisterType((*QueryGetAuthenticationLogResponse)(nil), "crossdomain.cdac.QueryGetAuthenticationLogResponse")
	proto.RegisterType((*QueryAllAuthenticationLogRequest)(nil), "crossdomain.cdac.QueryAllAuthenticationLogRequest")
	proto.RegisterType((*QueryAllAuthenticationLogResponse)(nil), "crossdomain.cdac.QueryAllAuthenticationLogResponse")
	proto.RegisterType((*QueryGetDomainCooperationRequest)(nil), "crossdomain.cdac.QueryGetDomainCooperationRequest")
	proto.RegisterType((*QueryGetDomainCooperationResponse)(nil), "crossdomain.cdac.QueryGetDomainCooperationResponse")
	proto.RegisterType((*QueryAllDomainCooperationRequest)(nil), "crossdomain.cdac.QueryAllDomainCooperationRequest")
	proto.RegisterType((*QueryAllDomainCooperationResponse)(nil), "crossdomain.cdac.QueryAllDomainCooperationResponse")
	proto.RegisterType((*QueryGetCooperationLogRequest)(nil), "crossdomain.cdac.QueryGetCooperationLogRequest")
	proto.RegisterType((*QueryGetCooperationLogResponse)(nil), "crossdomain.cdac.QueryGetCooperationLogResponse")
	proto.RegisterType((*QueryAllCooperationLogRequest)(nil), "crossdomain.cdac.QueryAllCooperationLogRequest")
	proto.RegisterType((*QueryAllCooperationLogResponse)(nil), "crossdomain.cdac.QueryAllCooperationLogResponse")
	proto.RegisterType((*QueryCheckEstablishedCooperationByChannelRequest)(nil), "crossdomain.cdac.QueryCheckEstablishedCooperationByChannelRequest")
	proto.RegisterType((*QueryCheckEstablishedCooperationByChannelResponse)(nil), "crossdomain.cdac.QueryCheckEstablishedCooperationByChannelResponse")
	proto.RegisterType((*QueryEstablishedCooperationByChannelRequest)(nil), "crossdomain.cdac.QueryEstablishedCooperationByChannelRequest")
	proto.RegisterType((*QueryEstablishedCooperationByChannelResponse)(nil), "crossdomain.cdac.QueryEstablishedCooperationByChannelResponse")
	proto.RegisterType((*QueryGetForwardPolicyRequest)(nil), "crossdomain.cdac.QueryGetForwardPolicyRequest")
	proto.RegisterType((*QueryGetForwardPolicyResponse)(nil), "crossdomain.cdac.QueryGetForwardPolicyResponse")
	proto.RegisterType((*QueryAllForwardPolicyRequest)(nil), "crossdomain.cdac.QueryAllForwardPolicyRequest")
	proto.RegisterType((*QueryAllForwardPolicyResponse)(nil), "crossdomain.cdac.QueryAllForwardPolicyResponse")
	proto.RegisterType((*QueryRetrieveForwardPolicyRequest)(nil), "crossdomain.cdac.QueryRetrieveForwardPolicyRequest")
	proto.RegisterType((*QueryRetrieveForwardPolicyResponse)(nil), "crossdomain.cdac.QueryRetrieveForwardPolicyResponse")
	proto.RegisterType((*QueryGetDomainMapRequest)(nil), "crossdomain.cdac.QueryGetDomainMapRequest")
	proto.RegisterType((*QueryGetDomainMapResponse)(nil), "crossdomain.cdac.QueryGetDomainMapResponse")
	proto.RegisterType((*QueryAllDomainMapRequest)(nil), "crossdomain.cdac.QueryAllDomainMapRequest")
	proto.RegisterType((*QueryAllDomainMapResponse)(nil), "crossdomain.cdac.QueryAllDomainMapResponse")
	proto.RegisterType((*QueryGetCooperationNetworkFeaturesRequest)(nil), "crossdomain.cdac.QueryGetCooperationNetworkFeaturesRequest")
	proto.RegisterType((*QueryGetCooperationNetworkFeaturesResponse)(nil), "crossdomain.cdac.QueryGetCooperationNetworkFeaturesResponse")
	proto.RegisterType((*QueryAllCooperationNetworkFeaturesRequest)(nil), "crossdomain.cdac.QueryAllCooperationNetworkFeaturesRequest")
	proto.RegisterType((*QueryAllCooperationNetworkFeaturesResponse)(nil), "crossdomain.cdac.QueryAllCooperationNetworkFeaturesResponse")
	proto.RegisterType((*QueryGetCooperationDataRequest)(nil), "crossdomain.cdac.QueryGetCooperationDataRequest")
	proto.RegisterType((*QueryGetCooperationDataResponse)(nil), "crossdomain.cdac.QueryGetCooperationDataResponse")
	proto.RegisterType((*QueryAllCooperationDataRequest)(nil), "crossdomain.cdac.QueryAllCooperationDataRequest")
	proto.RegisterType((*QueryAllCooperationDataResponse)(nil), "crossdomain.cdac.QueryAllCooperationDataResponse")
	proto.RegisterType((*QueryGetCooperationNetworkRequest)(nil), "crossdomain.cdac.QueryGetCooperationNetworkRequest")
	proto.RegisterType((*QueryGetCooperationNetworkResponse)(nil), "crossdomain.cdac.QueryGetCooperationNetworkResponse")
	proto.RegisterType((*QueryAllCooperationNetworkRequest)(nil), "crossdomain.cdac.QueryAllCooperationNetworkRequest")
	proto.RegisterType((*QueryAllCooperationNetworkResponse)(nil), "crossdomain.cdac.QueryAllCooperationNetworkResponse")
	proto.RegisterType((*QueryGetUpdatePolicyRequest)(nil), "crossdomain.cdac.QueryGetUpdatePolicyRequest")
	proto.RegisterType((*QueryGetUpdatePolicyResponse)(nil), "crossdomain.cdac.QueryGetUpdatePolicyResponse")
	proto.RegisterType((*QueryGetCooperativeDomainRequest)(nil), "crossdomain.cdac.QueryGetCooperativeDomainRequest")
	proto.RegisterType((*QueryGetCooperativeDomainResponse)(nil), "crossdomain.cdac.QueryGetCooperativeDomainResponse")
	proto.RegisterType((*QueryAllCooperativeDomainRequest)(nil), "crossdomain.cdac.QueryAllCooperativeDomainRequest")
	proto.RegisterType((*QueryAllCooperativeDomainResponse)(nil), "crossdomain.cdac.QueryAllCooperativeDomainResponse")
	proto.RegisterType((*QueryGetDelegationPathRequest)(nil), "crossdomain.cdac.QueryGetDelegationPathRequest")
	proto.RegisterType((*QueryGetDelegationPathResponse)(nil), "crossdomain.cdac.QueryGetDelegationPathResponse")
	proto.RegisterType((*QueryAllDelegationPathRequest)(nil), "crossdomain.cdac.QueryAllDelegationPathRequest")
	proto.RegisterType((*QueryAllDelegationPathResponse)(nil), "crossdomain.cdac.QueryAllDelegationPathResponse")
	proto.RegisterType((*QueryGetPathRequest)(nil), "crossdomain.cdac.QueryGetPathRequest")
	proto.RegisterType((*QueryGetPathResponse)(nil), "crossdomain.cdac.QueryGetPathResponse")
	proto.RegisterType((*QueryAllPathRequest)(nil), "crossdomain.cdac.QueryAllPathRequest")
	proto.RegisterType((*QueryAllPathResponse)(nil), "crossdomain.cdac.QueryAllPathResponse")
	proto.RegisterType((*QueryGetTimeCalculationRequest)(nil), "crossdomain.cdac.QueryGetTimeCalculationRequest")
	proto.RegisterType((*QueryGetTimeCalculationResponse)(nil), "crossdomain.cdac.QueryGetTimeCalculationResponse")
	proto.RegisterType((*QueryAllTimeCalculationRequest)(nil), "crossdomain.cdac.QueryAllTimeCalculationRequest")
	proto.RegisterType((*QueryAllTimeCalculationResponse)(nil), "crossdomain.cdac.QueryAllTimeCalculationResponse")
	proto.RegisterType((*QueryGetCalculationTimeRequest)(nil), "crossdomain.cdac.QueryGetCalculationTimeRequest")
	proto.RegisterType((*QueryGetCalculationTimeResponse)(nil), "crossdomain.cdac.QueryGetCalculationTimeResponse")
	proto.RegisterType((*QueryAllCalculationTimeRequest)(nil), "crossdomain.cdac.QueryAllCalculationTimeRequest")
	proto.RegisterType((*QueryAllCalculationTimeResponse)(nil), "crossdomain.cdac.QueryAllCalculationTimeResponse")
	proto.RegisterType((*QueryRequestAccessRequest)(nil), "crossdomain.cdac.QueryRequestAccessRequest")
	proto.RegisterType((*QueryRequestAccessResponse)(nil), "crossdomain.cdac.QueryRequestAccessResponse")
	proto.RegisterType((*QueryGetInterDomainAclPolicyRequest)(nil), "crossdomain.cdac.QueryGetInterDomainAclPolicyRequest")
	proto.RegisterType((*QueryGetInterDomainAclPolicyResponse)(nil), "crossdomain.cdac.QueryGetInterDomainAclPolicyResponse")
	proto.RegisterType((*QueryAllInterDomainAclPolicyRequest)(nil), "crossdomain.cdac.QueryAllInterDomainAclPolicyRequest")
	proto.RegisterType((*QueryAllInterDomainAclPolicyResponse)(nil), "crossdomain.cdac.QueryAllInterDomainAclPolicyResponse")
	proto.RegisterType((*QueryGetInterDomainDclPolicyRequest)(nil), "crossdomain.cdac.QueryGetInterDomainDclPolicyRequest")
	proto.RegisterType((*QueryGetInterDomainDclPolicyResponse)(nil), "crossdomain.cdac.QueryGetInterDomainDclPolicyResponse")
	proto.RegisterType((*QueryAllInterDomainDclPolicyRequest)(nil), "crossdomain.cdac.QueryAllInterDomainDclPolicyRequest")
	proto.RegisterType((*QueryAllInterDomainDclPolicyResponse)(nil), "crossdomain.cdac.QueryAllInterDomainDclPolicyResponse")
}

func init() { proto.RegisterFile("cdac/query.proto", fileDescriptor_2600184f6c888ee5) }

var fileDescriptor_2600184f6c888ee5 = []byte{
	// 2986 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5c, 0xcb, 0x6f, 0x1c, 0xc7,
	0xd1, 0x57, 0x6b, 0x6d, 0x59, 0x6a, 0x59, 0xaf, 0x36, 0x25, 0xd3, 0x23, 0x71, 0x49, 0x8d, 0x48,
	0x51, 0xa4, 0xe8, 0x5d, 0x91, 0xb4, 0xf4, 0x7d, 0x88, 0x14, 0xc7, 0x2b, 0xae, 0x25, 0x1b, 0x92,
	0x0c, 0x9a, 0xc8, 0x0b, 0x46, 0x82, 0xcd, 0x70, 0x76, 0x48, 0xae, 0x35, 0xdc, 0x59, 0xef, 0x0e,
	0x25, 0x31, 0xb4, 0x00, 0xc3, 0x27, 0x23, 0x40, 0x90, 0x04, 0x09, 0x9c, 0xe4, 0x10, 0x24, 0x46,
	0xe0, 0xe4, 0x64, 0x04, 0x41, 0xe0, 0x43, 0x10, 0xf8, 0x98, 0xc0, 0xb9, 0x39, 0x8f, 0x43, 0x4e,
	0x41, 0x20, 0xe5, 0x90, 0xfc, 0x11, 0x01, 0x82, 0xe9, 0xae, 0x79, 0xf4, 0xf4, 0x63, 0x66, 0x96,
	0xc3, 0xdc, 0xb8, 0xdd, 0x55, 0xd5, 0xbf, 0x5f, 0x55, 0xef, 0x74, 0xd5, 0x74, 0x2d, 0xf1, 0x71,
	0xbb, 0x6d, 0xd9, 0xf5, 0xb7, 0xb6, 0x9c, 0xfe, 0x76, 0xad, 0xd7, 0xf7, 0x7c, 0x8f, 0x1c, 0xb7,
	0xfb, 0xde, 0x60, 0xd0, 0xf6, 0x36, 0xad, 0x4e, 0xb7, 0x16, 0xcc, 0x1a, 0x23, 0xeb, 0xde, 0xba,
	0x47, 0x27, 0xeb, 0xc1, 0x5f, 0x4c, 0xce, 0x38, 0xb3, 0xee, 0x79, 0xeb, 0xae, 0x53, 0xb7, 0x7a,
	0x9d, 0xba, 0xd5, 0xed, 0x7a, 0xbe, 0xe5, 0x77, 0xbc, 0xee, 0x00, 0x66, 0x67, 0x6d, 0x6f, 0xb0,
	0xe9, 0x0d, 0xea, 0xab, 0xd6, 0xc0, 0x61, 0xe6, 0xeb, 0xf7, 0xe6, 0x57, 0x1d, 0xdf, 0x9a, 0xaf,
	0xf7, 0xac, 0xf5, 0x4e, 0x97, 0x0a, 0x83, 0xec, 0x09, 0x8a, 0xa1, 0x67, 0xf5, 0xad, 0xcd, 0x50,
	0xfd, 0x24, 0x1b, 0xda, 0x5a, 0x75, 0x3b, 0x76, 0xeb, 0xae, 0x03, 0xd8, 0x8c, 0x53, 0x74, 0xd8,
	0x76, 0xfa, 0x7e, 0x67, 0xad, 0x63, 0x5b, 0xbe, 0x03, 0xe3, 0xcf, 0xd1, 0xf1, 0xce, 0xaa, 0xdd,
	0xb2, 0xbd, 0x6e, 0xd7, 0xb1, 0x13, 0xc6, 0xc7, 0xe8, 0x94, 0xb5, 0xe5, 0x6f, 0x38, 0x5d, 0x3f,
	0xd0, 0xe9, 0x78, 0xdd, 0x96, 0xeb, 0xad, 0xc3, 0xb4, 0xc1, 0x2c, 0x7a, 0x5e, 0xcf, 0xe9, 0xa7,
	0xe7, 0x18, 0x08, 0xe6, 0x89, 0xd6, 0xa6, 0xd5, 0x83, 0xe1, 0x69, 0x41, 0xa5, 0xeb, 0xf8, 0xf7,
	0xbd, 0xfe, 0xdd, 0xd6, 0x9a, 0x63, 0xf9, 0x5b, 0x7d, 0x27, 0x24, 0x71, 0x5a, 0x10, 0x6c, 0x5b,
	0xbe, 0x05, 0x93, 0x55, 0x95, 0x15, 0x98, 0x1f, 0xa5, 0xf3, 0x5b, 0xbd, 0xb6, 0xe5, 0x3b, 0xad,
	0x9e, 0xe7, 0x76, 0xec, 0x6d, 0x8e, 0x51, 0xa4, 0x79, 0xcf, 0x69, 0x41, 0xb0, 0x92, 0x8c, 0xda,
	0x8e, 0xeb, 0xac, 0x33, 0xbb, 0x3d, 0xcb, 0xdf, 0x80, 0xb9, 0x63, 0xe0, 0xe9, 0x68, 0x80, 0x41,
	0xf4, 0x3b, 0x9b, 0x4e, 0xcb, 0xb6, 0x5c, 0x7b, 0xcb, 0x4d, 0xc6, 0x05, 0xf0, 0xc7, 0xe3, 0xad,
	0x40, 0x10, 0x26, 0x4d, 0xe6, 0xf2, 0xae, 0xef, 0xf4, 0x61, 0xfd, 0x96, 0x65, 0xbb, 0x3c, 0x52,
	0x89, 0x4c, 0x3b, 0x2d, 0xf3, 0x0c, 0x95, 0xb9, 0x67, 0xb9, 0x9d, 0x76, 0xc7, 0xdf, 0xe6, 0x76,
	0x04, 0x47, 0x8b, 0x85, 0x78, 0xcd, 0xeb, 0xdf, 0xb7, 0xfa, 0x6d, 0x99, 0x43, 0x60, 0x81, 0x84,
	0x47, 0xd9, 0xb4, 0x39, 0x82, 0xc9, 0xeb, 0xc1, 0x06, 0x5c, 0xa6, 0x1b, 0x6c, 0xc5, 0x79, 0x6b,
	0xcb, 0x19, 0xf8, 0xe6, 0x1d, 0xfc, 0x0c, 0x37, 0x3a, 0xe8, 0x79, 0xdd, 0x81, 0x43, 0xae, 0xe0,
	0x03, 0x6c, 0x23, 0x8e, 0xa2, 0x09, 0x74, 0xe1, 0xf0, 0xc2, 0x68, 0x2d, 0xfd, 0x75, 0xa8, 0x31,
	0x8d, 0xeb, 0x4f, 0x7c, 0xfa, 0xf7, 0xf1, 0x7d, 0x2b, 0x20, 0x6d, 0xce, 0xe2, 0x51, 0x6a, 0xee,
	0xa6, 0xe3, 0x2f, 0xd3, 0x5d, 0x7b, 0xcb, 0xd9, 0x86, 0xa5, 0xc8, 0x51, 0xbc, 0xbf, 0xd3, 0xa6,
	0xf6, 0x9e, 0x58, 0xd9, 0xdf, 0x69, 0x9b, 0x5f, 0xc3, 0xcf, 0x49, 0x64, 0x01, 0xc0, 0x17, 0xf0,
	0xa1, 0x68, 0x10, 0x30, 0x9c, 0x96, 0x60, 0x08, 0x45, 0x00, 0x46, 0xac, 0x63, 0xae, 0x02, 0x92,
	0x86, 0xeb, 0x0a, 0x48, 0x6e, 0x60, 0x1c, 0x7f, 0xfb, 0xc0, 0xfa, 0xf9, 0x1a, 0xfb, 0xaa, 0xd6,
	0x82, 0xaf, 0x6a, 0x8d, 0x3d, 0x09, 0xe0, 0xab, 0x5a, 0x5b, 0xb6, 0xd6, 0x1d, 0xd0, 0x5d, 0x49,
	0x68, 0x9a, 0x1f, 0x22, 0xa0, 0xc0, 0x2f, 0x22, 0xa7, 0x50, 0x29, 0x4a, 0x81, 0xdc, 0xe4, 0x60,
	0xee, 0xa7, 0x30, 0xa7, 0x33, 0x61, 0xb2, 0xd5, 0x39, 0x9c, 0x33, 0xf8, 0xd9, 0xd0, 0xd3, 0x5f,
	0x86, 0x1d, 0xa6, 0x0a, 0xca, 0x57, 0xe3, 0x00, 0xc6, 0xa2, 0x40, 0xe8, 0x1a, 0x3e, 0x18, 0x8e,
	0x81, 0xd3, 0x0c, 0x91, 0x4f, 0x28, 0x01, 0x74, 0x22, 0x0d, 0xd3, 0x02, 0x10, 0x0d, 0xd7, 0x4d,
	0x83, 0x28, 0x2b, 0x1e, 0x1f, 0xa0, 0x38, 0xe8, 0x19, 0xe8, 0x2b, 0xc5, 0xd0, 0x97, 0x17, 0x8b,
	0x39, 0x6c, 0x84, 0x0e, 0x5e, 0x8a, 0x1f, 0xe0, 0xaa, 0x70, 0xb4, 0xf1, 0x69, 0xa9, 0x34, 0x70,
	0x7a, 0x19, 0x1f, 0x4e, 0x0c, 0x83, 0xe7, 0xc6, 0x44, 0x5a, 0x09, 0x21, 0x60, 0x96, 0xd4, 0x33,
	0xdb, 0x80, 0xa9, 0xe1, 0xba, 0x12, 0x4c, 0x65, 0x45, 0xe7, 0x23, 0x04, 0x64, 0xd2, 0xcb, 0xa8,
	0xc8, 0x54, 0x86, 0x21, 0x53, 0x5e, 0xa4, 0x6a, 0xf8, 0x4c, 0xe8, 0xfb, 0x57, 0x57, 0xed, 0xa5,
	0xe8, 0x44, 0x55, 0xc5, 0xca, 0xc5, 0x63, 0x0a, 0x79, 0x20, 0x78, 0x0b, 0x1f, 0xe1, 0x26, 0xc0,
	0x97, 0xe3, 0x22, 0x45, 0x4e, 0x0c, 0x48, 0xf2, 0xba, 0xe6, 0x1a, 0xa0, 0x6b, 0xb8, 0xae, 0x14,
	0x5d, 0x59, 0x51, 0xfb, 0x18, 0x01, 0x2d, 0x71, 0x21, 0x35, 0xad, 0xca, 0xb0, 0xb4, 0xca, 0x8b,
	0xde, 0x34, 0x3e, 0x19, 0x46, 0xa3, 0x49, 0x21, 0xa8, 0xc2, 0xb6, 0x8c, 0x4f, 0xa5, 0x05, 0xe3,
	0x43, 0x90, 0x8d, 0xa8, 0x0f, 0x41, 0x36, 0x1f, 0x1e, 0x82, 0xec, 0x93, 0xd9, 0x82, 0xa5, 0x1b,
	0xae, 0xcb, 0x2f, 0x5d, 0x56, 0x4c, 0x7e, 0x8c, 0x00, 0x73, 0x62, 0x05, 0x09, 0xe6, 0x4a, 0x7e,
	0xcc, 0xe5, 0xf9, 0x7d, 0x01, 0x4f, 0x84, 0xee, 0x6c, 0x70, 0xd9, 0xe6, 0x6d, 0x6f, 0x5d, 0x15,
	0x82, 0xb7, 0xf1, 0x59, 0x8d, 0x0e, 0x30, 0xfb, 0x0a, 0x3e, 0x21, 0x4c, 0x82, 0x0f, 0xcf, 0x89,
	0x24, 0x05, 0x51, 0xe0, 0x2b, 0xda, 0x30, 0xdf, 0x04, 0xc4, 0x0d, 0xd7, 0x55, 0x22, 0x2e, 0x2b,
	0x72, 0xbf, 0x47, 0x40, 0x55, 0xbe, 0x98, 0x9e, 0x6a, 0x65, 0xb7, 0x54, 0xf7, 0x24, 0xca, 0x6c,
	0x03, 0x2d, 0xc5, 0xf9, 0x66, 0x8e, 0x28, 0x4b, 0x74, 0x62, 0xea, 0xc2, 0xa4, 0x3a, 0xca, 0x82,
	0x68, 0x48, 0x5d, 0x98, 0x48, 0x46, 0x59, 0x89, 0x78, 0x2f, 0xa2, 0x5c, 0x98, 0x6a, 0x65, 0xb7,
	0x54, 0xcb, 0x8b, 0x72, 0x3d, 0x3e, 0xd1, 0x12, 0xf6, 0x35, 0x5f, 0xe4, 0x1e, 0xae, 0xaa, 0x14,
	0x80, 0xf4, 0x6b, 0xf8, 0x28, 0x3f, 0x03, 0x6e, 0x9e, 0x90, 0x9c, 0xf3, 0x9c, 0x1c, 0xd0, 0x4d,
	0x69, 0x9b, 0xeb, 0xf1, 0xe9, 0x24, 0x87, 0x58, 0x56, 0x4c, 0x7f, 0x8b, 0x80, 0x9b, 0x64, 0x25,
	0x0d, 0xb7, 0xca, 0xf0, 0xdc, 0xca, 0x8b, 0xe3, 0x6d, 0x7c, 0x89, 0x42, 0x5f, 0xda, 0x70, 0xec,
	0xbb, 0x2f, 0x0f, 0x7c, 0x6b, 0xd5, 0xed, 0x0c, 0x36, 0x9c, 0x76, 0x72, 0x37, 0x6d, 0x2f, 0x6d,
	0x58, 0xdd, 0xae, 0xe3, 0x86, 0x7e, 0x1b, 0xc5, 0x4f, 0xd9, 0x6c, 0x84, 0x3a, 0xed, 0xd0, 0x4a,
	0xf8, 0xd1, 0x6c, 0xe1, 0xf9, 0x02, 0xd6, 0xc0, 0x37, 0x23, 0xf8, 0x49, 0xd7, 0x5a, 0x8d, 0x8c,
	0xb1, 0x0f, 0xc1, 0xe8, 0x9a, 0xb7, 0xd5, 0x6d, 0x53, 0x72, 0x07, 0x57, 0xd8, 0x07, 0xf3, 0x26,
	0xbe, 0x48, 0x17, 0xd8, 0x35, 0xd2, 0x1f, 0x22, 0x3c, 0x97, 0xcf, 0x12, 0xa0, 0x7c, 0x1d, 0x9f,
	0x68, 0xef, 0xe2, 0xe9, 0xb3, 0x22, 0x6a, 0x2b, 0x28, 0x26, 0x72, 0xcb, 0x1b, 0xac, 0x96, 0x5f,
	0xa6, 0xa5, 0x7c, 0x8e, 0xdc, 0x32, 0x25, 0x1f, 0x27, 0x61, 0xdc, 0x84, 0x3a, 0xb7, 0xe4, 0xc4,
	0xc2, 0x24, 0x8c, 0x1b, 0x4c, 0xe6, 0x96, 0x52, 0x74, 0x7b, 0x91, 0x5b, 0xe6, 0xa6, 0x55, 0x19,
	0x96, 0x56, 0x79, 0xdf, 0xa7, 0x73, 0xf0, 0x78, 0x5f, 0x71, 0xfc, 0x7e, 0xc7, 0xb9, 0xe7, 0xc8,
	0x9c, 0x64, 0xde, 0xc5, 0xa6, 0x4e, 0x28, 0x2a, 0x7a, 0x8e, 0xac, 0x0d, 0x11, 0xb7, 0x15, 0x5e,
	0xcb, 0xbc, 0x16, 0x97, 0xed, 0x6c, 0x57, 0xde, 0xb1, 0x7a, 0x61, 0xb4, 0x26, 0xf0, 0x61, 0x66,
	0xe7, 0xd5, 0x6e, 0xdb, 0x79, 0x00, 0xdf, 0x91, 0xe4, 0x50, 0xf2, 0x4d, 0x4c, 0x42, 0x3b, 0x7e,
	0x8d, 0xd1, 0x0e, 0x07, 0xd5, 0x6f, 0x62, 0x22, 0xbd, 0xf0, 0x35, 0x46, 0xa4, 0x93, 0x7c, 0x13,
	0x23, 0x60, 0xdb, 0x8b, 0x37, 0x31, 0x99, 0x14, 0x2a, 0x45, 0x29, 0x94, 0xb7, 0x73, 0xae, 0xe2,
	0x19, 0xc9, 0x01, 0xf9, 0x1a, 0x7b, 0xe5, 0x79, 0x03, 0xde, 0x9b, 0xaa, 0x1e, 0x02, 0x3f, 0x43,
	0x78, 0x36, 0x8f, 0x36, 0xb0, 0xee, 0x63, 0x43, 0x2d, 0x05, 0xbe, 0x9e, 0xd3, 0x1e, 0x4d, 0x29,
	0x1d, 0xf0, 0x8b, 0xc6, 0xaa, 0x39, 0x00, 0x7e, 0xfc, 0x21, 0xa9, 0xe0, 0x57, 0x56, 0xf0, 0xff,
	0x1d, 0xfa, 0x25, 0x63, 0xd5, 0x9c, 0x7e, 0xa9, 0x94, 0xef, 0x97, 0xf2, 0x36, 0xd0, 0x4b, 0xd2,
	0x0c, 0xab, 0x69, 0xf9, 0x56, 0xe8, 0xd5, 0x2a, 0xc6, 0xf4, 0x70, 0x4d, 0x7e, 0xdb, 0x13, 0x23,
	0xa6, 0x8f, 0xc7, 0x95, 0x16, 0xa2, 0x63, 0xf0, 0x98, 0xcd, 0x4f, 0x41, 0x74, 0xce, 0x6a, 0xdd,
	0x12, 0x08, 0x82, 0x2f, 0xd2, 0xfa, 0xe6, 0x86, 0x34, 0x7b, 0x4a, 0xe2, 0x2e, 0x6b, 0x37, 0x7c,
	0x82, 0x80, 0xa0, 0x6c, 0x29, 0x1d, 0xc1, 0xca, 0x6e, 0x08, 0x96, 0x17, 0xe1, 0xc5, 0xb8, 0x4c,
	0x12, 0x37, 0x94, 0xea, 0xd1, 0xf0, 0x0e, 0x82, 0xd3, 0x46, 0xa1, 0x05, 0xbc, 0xdf, 0xc0, 0x44,
	0x9c, 0x05, 0x5f, 0x4f, 0xe6, 0xd9, 0xf2, 0xc0, 0x5e, 0x62, 0xc5, 0xbc, 0x1b, 0xd7, 0x3c, 0x6a,
	0xdc, 0x65, 0x05, 0xf9, 0x8f, 0x21, 0x5f, 0xc5, 0x6a, 0x19, 0x7c, 0x2b, 0xbb, 0xe7, 0x5b, 0x5e,
	0xc0, 0xc7, 0xe2, 0x77, 0xbc, 0x5f, 0xa2, 0xf7, 0x5c, 0x7c, 0x1e, 0xb1, 0x11, 0xa7, 0x8a, 0xfc,
	0x34, 0x70, 0x7c, 0x05, 0x3f, 0x9d, 0x1c, 0x07, 0xa7, 0x56, 0x45, 0x76, 0x49, 0x29, 0xe0, 0xc5,
	0x69, 0x26, 0x8b, 0xfa, 0xa5, 0xf8, 0x5a, 0x4d, 0xff, 0xf6, 0xec, 0x6d, 0xc9, 0x6e, 0x8d, 0x75,
	0xe2, 0x4a, 0x57, 0x98, 0x54, 0xa7, 0xd5, 0x82, 0x68, 0x58, 0xe9, 0x0a, 0x13, 0xc9, 0xa2, 0x5e,
	0x89, 0x78, 0x2f, 0x8a, 0xfa, 0xc2, 0x54, 0x2b, 0xbb, 0xa5, 0xba, 0x27, 0x45, 0x7d, 0x33, 0xba,
	0x1d, 0x5d, 0xb6, 0xfc, 0x8d, 0x1c, 0x45, 0x7d, 0x5a, 0x21, 0x2e, 0x7c, 0xf9, 0x19, 0x75, 0x51,
	0xcf, 0xcb, 0x85, 0x85, 0x2f, 0x3f, 0x9a, 0x2c, 0xea, 0xe5, 0x10, 0xf7, 0xa2, 0xa8, 0x2f, 0xc0,
	0xad, 0x32, 0x3c, 0xb7, 0xf2, 0xe2, 0x38, 0x05, 0x37, 0xb7, 0x37, 0x1d, 0x5f, 0x17, 0xbd, 0x57,
	0xf0, 0x08, 0x2f, 0x06, 0xbc, 0x2e, 0xe1, 0x27, 0x12, 0x91, 0x3a, 0x25, 0xbb, 0xdf, 0x8d, 0x38,
	0x50, 0x49, 0xf3, 0xeb, 0xb0, 0x60, 0xc3, 0x75, 0xf7, 0x22, 0x16, 0xdf, 0x43, 0x80, 0x34, 0xb2,
	0x2f, 0x20, 0xad, 0xe4, 0x43, 0x5a, 0x9e, 0x8f, 0x2f, 0xc5, 0x5b, 0xff, 0x8b, 0x9d, 0x4d, 0x67,
	0x29, 0xee, 0x01, 0x50, 0xb9, 0x3b, 0x91, 0x5d, 0x09, 0x1a, 0x71, 0xf2, 0x91, 0x9a, 0x52, 0x67,
	0x57, 0x29, 0xc1, 0x30, 0xf9, 0x48, 0x0d, 0x27, 0xb3, 0x2b, 0x05, 0xce, 0xbd, 0xc8, 0xae, 0x0a,
	0x11, 0xac, 0xec, 0x86, 0xe0, 0x9e, 0x44, 0x34, 0x61, 0x3f, 0x58, 0x2e, 0x47, 0x44, 0x05, 0x8d,
	0x98, 0x70, 0x6a, 0x4a, 0x93, 0x2f, 0xf3, 0x82, 0x21, 0xe1, 0xd4, 0x30, 0x97, 0x2f, 0xcb, 0x71,
	0xee, 0x49, 0xbe, 0x5c, 0x84, 0x60, 0x65, 0x37, 0x04, 0xcb, 0x8b, 0xe8, 0x2d, 0xa8, 0xfc, 0x81,
	0x5b, 0xc3, 0xb6, 0x9d, 0x41, 0x54, 0x62, 0x9e, 0xc2, 0x07, 0xbc, 0xd5, 0x37, 0x1d, 0xdb, 0x87,
	0x42, 0x08, 0x3e, 0x05, 0xe3, 0x96, 0x1d, 0xad, 0x7c, 0x68, 0x05, 0x3e, 0x99, 0xff, 0x0f, 0x37,
	0xe1, 0x29, 0x63, 0xe0, 0x06, 0x03, 0x1f, 0x6c, 0x3b, 0x76, 0x67, 0x10, 0x3a, 0xfc, 0xd0, 0x4a,
	0xf4, 0xd9, 0xbc, 0x8c, 0xcf, 0x45, 0xb7, 0xbf, 0x5d, 0xdf, 0xe9, 0xb3, 0x63, 0xbb, 0x61, 0xbb,
	0xfa, 0x17, 0x7b, 0xef, 0x21, 0x3c, 0xa9, 0xd7, 0x83, 0xb5, 0xbf, 0x81, 0x47, 0x64, 0xf3, 0x71,
	0xe0, 0x85, 0xcb, 0x56, 0x89, 0x34, 0x04, 0x43, 0x6a, 0xc9, 0xdc, 0x04, 0x06, 0x0d, 0xd7, 0xd5,
	0x31, 0x28, 0x6b, 0xdf, 0xfd, 0x29, 0x64, 0xae, 0x5c, 0x2f, 0x93, 0x79, 0xa5, 0x1c, 0xe6, 0xe5,
	0xed, 0x45, 0xf9, 0x26, 0x68, 0x0e, 0xb9, 0x09, 0x9a, 0x19, 0xae, 0x68, 0x16, 0xda, 0x04, 0x4d,
	0x8d, 0x2b, 0x9a, 0x19, 0x9b, 0xa0, 0xf9, 0x3f, 0xde, 0x04, 0x45, 0x98, 0x57, 0xca, 0x61, 0x5e,
	0xda, 0x26, 0x58, 0xf8, 0xc3, 0x35, 0xfc, 0x24, 0xe5, 0x44, 0xee, 0xe3, 0x03, 0xac, 0x4b, 0x8e,
	0x48, 0x8a, 0x4d, 0xb1, 0x19, 0xcf, 0x98, 0xca, 0x90, 0x62, 0x8b, 0x99, 0x13, 0xef, 0xfe, 0xe5,
	0x9f, 0xdf, 0xdf, 0x6f, 0x90, 0xd1, 0x7a, 0x42, 0xbc, 0x9e, 0xe8, 0x1e, 0x25, 0xdf, 0x41, 0x89,
	0xde, 0x33, 0x32, 0xab, 0x30, 0x2b, 0x69, 0xd2, 0x33, 0x2e, 0xe6, 0x92, 0x05, 0x20, 0x33, 0x14,
	0xc8, 0x39, 0x72, 0x56, 0x02, 0x24, 0xea, 0x59, 0xad, 0xef, 0x74, 0xda, 0x0f, 0xc9, 0xb7, 0x11,
	0x7e, 0x3a, 0x32, 0xd0, 0x70, 0x5d, 0x25, 0x28, 0x49, 0xbf, 0x9e, 0x12, 0x94, 0xac, 0xed, 0xce,
	0x9c, 0xa4, 0xa0, 0xaa, 0xe4, 0x8c, 0x0e, 0x14, 0xf9, 0x16, 0x8a, 0xdb, 0xc1, 0xc8, 0x8c, 0x9a,
	0x74, 0xaa, 0x55, 0xcd, 0x98, 0xcd, 0x23, 0x0a, 0x48, 0xa6, 0x29, 0x92, 0xb3, 0x64, 0x5c, 0x44,
	0x12, 0x36, 0x7a, 0x32, 0xe7, 0xbc, 0x87, 0xf0, 0xe1, 0x50, 0x3b, 0xf0, 0xcd, 0x8c, 0x9a, 0x6f,
	0x5e, 0x3c, 0x92, 0x0e, 0x38, 0xd3, 0xa4, 0x78, 0xce, 0x10, 0x43, 0x8d, 0x87, 0xbc, 0x8f, 0xb8,
	0x2e, 0x2c, 0x32, 0xa7, 0xe6, 0x2b, 0xb6, 0x8a, 0x19, 0xcf, 0xe7, 0x94, 0x06, 0x40, 0xb3, 0x14,
	0xd0, 0x24, 0x31, 0x45, 0x40, 0x89, 0xe6, 0x66, 0xe6, 0xa3, 0x1f, 0x20, 0x7c, 0x34, 0x61, 0x23,
	0x70, 0xd3, 0x9c, 0x9a, 0x7b, 0x01, 0x6c, 0xf2, 0x6e, 0x34, 0x73, 0x8a, 0x62, 0x1b, 0x27, 0x63,
	0x5a, 0x6c, 0xe4, 0xa7, 0x28, 0xd5, 0xfd, 0x44, 0x6a, 0x6a, 0x1f, 0xc8, 0x1a, 0xb5, 0x8c, 0x7a,
	0x6e, 0x79, 0x40, 0xf6, 0x3c, 0x45, 0x36, 0x4d, 0xa6, 0x44, 0x64, 0x7c, 0xeb, 0x37, 0x73, 0xdc,
	0x4f, 0x10, 0x3e, 0xce, 0x19, 0x0a, 0x5c, 0x57, 0x53, 0x3b, 0xa3, 0x10, 0x48, 0x55, 0x53, 0x98,
	0x79, 0x81, 0x82, 0x34, 0xc9, 0x44, 0x16, 0x48, 0xf2, 0x2e, 0x0a, 0x5b, 0x96, 0xc8, 0xb4, 0xda,
	0x15, 0xdc, 0x3b, 0x1d, 0xe3, 0x42, 0xb6, 0x60, 0x76, 0x18, 0xe1, 0x6f, 0xea, 0xa4, 0x77, 0x10,
	0x3e, 0x04, 0x59, 0x81, 0xeb, 0x2a, 0x71, 0xa4, 0x1b, 0xba, 0x94, 0x38, 0x84, 0xbe, 0x2c, 0xdd,
	0x33, 0x9b, 0xfd, 0x4d, 0x7e, 0x85, 0x24, 0x5d, 0x3f, 0x64, 0x41, 0xcd, 0x54, 0xd5, 0xac, 0x64,
	0x2c, 0x16, 0xd2, 0x01, 0x80, 0xf3, 0x14, 0xe0, 0x45, 0x32, 0x23, 0x02, 0x14, 0x7f, 0x35, 0xc0,
	0x9c, 0xf6, 0x11, 0xc2, 0x23, 0x82, 0xc1, 0xc0, 0x7f, 0x0b, 0x6a, 0xb7, 0x14, 0x06, 0xad, 0x6b,
	0x94, 0x32, 0xe7, 0x28, 0xe8, 0xf3, 0x64, 0x32, 0x0f, 0x68, 0xea, 0x61, 0xb1, 0x5b, 0x66, 0x21,
	0x6b, 0x2f, 0x89, 0x8d, 0x42, 0x3a, 0x0f, 0x2b, 0xfb, 0x7d, 0x74, 0x1e, 0x16, 0x9b, 0xf6, 0x63,
	0x0f, 0x0b, 0x06, 0x33, 0x3c, 0x5c, 0x18, 0xb4, 0xae, 0x49, 0x49, 0xe7, 0x61, 0x11, 0x34, 0xf9,
	0x39, 0x4a, 0xb7, 0xc0, 0x10, 0xcd, 0xe3, 0x4d, 0xda, 0xb0, 0x63, 0x5c, 0xca, 0xaf, 0x00, 0x18,
	0x6b, 0x14, 0xe3, 0x05, 0x72, 0x5e, 0xf2, 0xa8, 0xe6, 0x7f, 0xd1, 0xc2, 0xbc, 0xfa, 0x01, 0x4a,
	0xbc, 0xa4, 0x8d, 0x36, 0xad, 0xe6, 0x11, 0x57, 0x0c, 0xa8, 0xb2, 0x41, 0x48, 0x97, 0x2f, 0xa5,
	0x80, 0x92, 0xff, 0x20, 0x3c, 0x99, 0xa7, 0xc1, 0x86, 0x5c, 0x57, 0xa0, 0x28, 0xd0, 0xeb, 0x63,
	0x2c, 0xed, 0xca, 0x06, 0x90, 0xbb, 0x4d, 0xc9, 0xdd, 0x20, 0x4d, 0x09, 0xb9, 0xc0, 0x4e, 0xcb,
	0x89, 0x0d, 0x25, 0x37, 0x4d, 0x6b, 0x75, 0xbb, 0x05, 0x0d, 0x3b, 0xf5, 0x1d, 0xf8, 0xe3, 0x21,
	0xf9, 0x17, 0xc2, 0xe3, 0x59, 0xd4, 0x3f, 0xaf, 0x80, 0x9d, 0x93, 0xf5, 0x8b, 0xc3, 0xaa, 0x03,
	0xe1, 0x1b, 0x94, 0xf0, 0x4b, 0xe4, 0x45, 0x91, 0x70, 0x21, 0xaa, 0x41, 0x0a, 0xc1, 0x37, 0xaa,
	0x68, 0x52, 0x08, 0x59, 0xab, 0x89, 0x2e, 0x85, 0x90, 0x76, 0x9d, 0xe8, 0x52, 0x08, 0xfe, 0xa7,
	0x45, 0x71, 0x0a, 0xc1, 0x19, 0xca, 0x48, 0x21, 0x0a, 0x81, 0x54, 0xf5, 0xfe, 0xe8, 0x52, 0x08,
	0x1e, 0x24, 0xf9, 0x18, 0xe1, 0x93, 0xd2, 0x36, 0x1b, 0xa2, 0x7a, 0xe6, 0xe9, 0x3a, 0x77, 0x8c,
	0x17, 0x8a, 0x29, 0x65, 0x3f, 0xde, 0xfb, 0xa0, 0xd8, 0x4a, 0xe1, 0xfe, 0x51, 0x94, 0x75, 0xdc,
	0xb1, 0x7a, 0xba, 0x32, 0x2d, 0xdd, 0x37, 0xa3, 0x2b, 0xd3, 0x84, 0xf6, 0x17, 0x73, 0x81, 0x22,
	0x9b, 0x23, 0xb3, 0xca, 0x67, 0xf8, 0xa6, 0xd5, 0xab, 0xef, 0x24, 0x3a, 0x82, 0x58, 0xbd, 0x16,
	0x59, 0xca, 0xa8, 0xd7, 0x72, 0xa3, 0x93, 0x35, 0xe7, 0xe8, 0xea, 0xb5, 0x18, 0x1d, 0xf9, 0x2b,
	0xd2, 0x75, 0x6d, 0x90, 0xab, 0xb9, 0x0e, 0x0d, 0x79, 0x1f, 0x8a, 0x71, 0x6d, 0x38, 0x65, 0xc0,
	0x7f, 0x95, 0xe2, 0xbf, 0x4c, 0x16, 0xf5, 0x0f, 0xf5, 0xf4, 0x8f, 0x23, 0xd9, 0x37, 0xeb, 0xcf,
	0x08, 0x8f, 0xa9, 0xd7, 0x08, 0xfc, 0x7e, 0x35, 0xd7, 0x29, 0x53, 0x90, 0x59, 0xae, 0x46, 0x19,
	0xf3, 0x0a, 0x65, 0x76, 0x89, 0xd4, 0x8a, 0x31, 0x0b, 0xf2, 0xac, 0x63, 0xa9, 0xae, 0x09, 0x92,
	0xef, 0x54, 0x4f, 0xf4, 0x83, 0x18, 0xf3, 0x05, 0x34, 0x00, 0xf0, 0xff, 0x51, 0xc0, 0xf3, 0xa4,
	0xae, 0x07, 0xdc, 0xb6, 0x7c, 0xab, 0xbe, 0x13, 0xb7, 0xc4, 0x3c, 0x24, 0x1f, 0x22, 0xae, 0x51,
	0x20, 0x30, 0x1a, 0xf8, 0x3e, 0xdf, 0x09, 0x9f, 0x07, 0xb4, 0xba, 0x17, 0x45, 0x5b, 0x04, 0xa7,
	0x40, 0x93, 0xdf, 0x20, 0x59, 0x43, 0x03, 0x59, 0x2c, 0xb2, 0x81, 0xb3, 0x9e, 0x72, 0xda, 0x0e,
	0x12, 0xdd, 0xb3, 0x44, 0xb2, 0x27, 0xd8, 0x26, 0xff, 0x35, 0xc2, 0x27, 0x45, 0x93, 0x81, 0x83,
	0x17, 0x8b, 0xec, 0xcf, 0x2c, 0xe0, 0xda, 0x56, 0x10, 0xdd, 0x91, 0x27, 0x01, 0x4e, 0xde, 0x47,
	0x7c, 0x5b, 0x05, 0xd1, 0xbc, 0xda, 0x90, 0x74, 0x6d, 0x18, 0xb5, 0xbc, 0xe2, 0xd9, 0xef, 0x8a,
	0xb8, 0x1f, 0x3f, 0xd3, 0x22, 0x46, 0xec, 0x0e, 0x58, 0xc8, 0x11, 0xcc, 0x54, 0x63, 0x84, 0xb1,
	0x58, 0x48, 0x27, 0xfb, 0x94, 0x13, 0x7f, 0x8a, 0x1d, 0x17, 0x31, 0x82, 0xc1, 0x8c, 0x22, 0xa6,
	0x30, 0x68, 0x5d, 0x53, 0x86, 0xae, 0x88, 0x11, 0x41, 0xd3, 0x22, 0x26, 0x75, 0x69, 0xaf, 0x49,
	0xb0, 0xa4, 0x0d, 0x0a, 0xba, 0x22, 0x46, 0xde, 0x67, 0xa0, 0x2b, 0x62, 0x52, 0x3f, 0x62, 0x8f,
	0x8b, 0x18, 0xde, 0x54, 0x46, 0x11, 0x53, 0x0c, 0xa8, 0xb2, 0x21, 0x42, 0x57, 0xc4, 0xa4, 0x80,
	0x92, 0x6f, 0xb2, 0x9b, 0x7b, 0x32, 0xa5, 0x79, 0xa9, 0x9c, 0xc0, 0x72, 0x3e, 0x4b, 0x0c, 0x10,
	0x9c, 0xa3, 0x08, 0xc6, 0xc8, 0x69, 0xd9, 0xfb, 0xef, 0xd0, 0x3f, 0x0f, 0xf0, 0x53, 0xa1, 0x53,
	0xa6, 0x34, 0xaf, 0x8f, 0x73, 0x2c, 0x9f, 0xea, 0x47, 0x30, 0xab, 0x74, 0xf9, 0x51, 0x72, 0x4a,
	0xbe, 0x3c, 0xf9, 0x25, 0x12, 0xee, 0xbf, 0x75, 0xc7, 0x9f, 0xfc, 0xc2, 0x5e, 0x77, 0xfc, 0x29,
	0xee, 0xdd, 0xcd, 0x3a, 0x05, 0x36, 0x43, 0xa6, 0x45, 0x60, 0xe9, 0x7f, 0x6d, 0xc0, 0x7c, 0x14,
	0x1c, 0x7b, 0x29, 0x63, 0x19, 0xc7, 0x5e, 0x41, 0xb0, 0xea, 0x26, 0x01, 0xdd, 0xb1, 0x97, 0x06,
	0x4b, 0x3d, 0x9a, 0xbe, 0x3f, 0xd6, 0x25, 0x14, 0xd2, 0x0b, 0x73, 0x6d, 0x42, 0x21, 0xbf, 0xf7,
	0xd6, 0x79, 0x34, 0xfd, 0xff, 0x20, 0x62, 0x8f, 0xa6, 0x8c, 0x65, 0x25, 0x12, 0xc5, 0xc0, 0xaa,
	0x2f, 0xe9, 0xb5, 0x89, 0x44, 0x0a, 0x2c, 0xf9, 0x05, 0xc2, 0x47, 0xb8, 0x3b, 0x6e, 0x72, 0x51,
	0x59, 0xf4, 0x88, 0xd7, 0xea, 0xc6, 0x5c, 0x3e, 0x61, 0x00, 0xf6, 0x39, 0x0a, 0xec, 0x05, 0xb2,
	0x20, 0xab, 0x8c, 0xa8, 0x42, 0xcb, 0xa2, 0x1a, 0xf5, 0x1d, 0x76, 0x3d, 0xff, 0xb0, 0xbe, 0xc3,
	0xee, 0xe3, 0x1f, 0x92, 0x4f, 0x90, 0xfc, 0xf6, 0x97, 0x5c, 0xd6, 0xbc, 0x36, 0x57, 0xdf, 0x5e,
	0x1b, 0x57, 0x8a, 0xaa, 0x65, 0xe7, 0xc2, 0x8a, 0x7f, 0xfe, 0xc1, 0x36, 0xc4, 0xef, 0x10, 0x7e,
	0x56, 0x66, 0x38, 0xd8, 0x15, 0x97, 0x35, 0x2f, 0xd5, 0x87, 0xa0, 0x90, 0x71, 0x8f, 0xae, 0x3b,
	0xba, 0x15, 0x14, 0xd2, 0xde, 0x6f, 0x16, 0xf4, 0x7e, 0x73, 0x38, 0xef, 0x37, 0x87, 0xf6, 0x7e,
	0x5b, 0xef, 0xfd, 0x66, 0x71, 0xef, 0x37, 0x87, 0xf3, 0x7e, 0x73, 0x68, 0xef, 0xc7, 0x14, 0xae,
	0x2f, 0x7c, 0xfa, 0xa8, 0x8a, 0x3e, 0x7b, 0x54, 0x45, 0xff, 0x78, 0x54, 0x45, 0xdf, 0x7d, 0x5c,
	0xdd, 0xf7, 0xd9, 0xe3, 0xea, 0xbe, 0xbf, 0x3d, 0xae, 0xee, 0x7b, 0x63, 0x34, 0x69, 0xe3, 0x01,
	0x3c, 0x35, 0xb7, 0x7b, 0xce, 0x60, 0xf5, 0x00, 0xfd, 0x67, 0x2f, 0x8b, 0xff, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0xe2, 0x94, 0x6b, 0x4c, 0xd1, 0x48, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a PublicKey by id.
	PublicKey(ctx context.Context, in *QueryGetPublicKeyRequest, opts ...grpc.CallOption) (*QueryGetPublicKeyResponse, error)
	// Queries a list of PublicKey items.
	PublicKeyAll(ctx context.Context, in *QueryAllPublicKeyRequest, opts ...grpc.CallOption) (*QueryAllPublicKeyResponse, error)
	// Queries a Validity by id.
	Validity(ctx context.Context, in *QueryGetValidityRequest, opts ...grpc.CallOption) (*QueryGetValidityResponse, error)
	// Queries a list of Validity items.
	ValidityAll(ctx context.Context, in *QueryAllValidityRequest, opts ...grpc.CallOption) (*QueryAllValidityResponse, error)
	// Queries a Certificate by id.
	Certificate(ctx context.Context, in *QueryGetCertificateRequest, opts ...grpc.CallOption) (*QueryGetCertificateResponse, error)
	// Queries a list of Certificate items.
	CertificateAll(ctx context.Context, in *QueryAllCertificateRequest, opts ...grpc.CallOption) (*QueryAllCertificateResponse, error)
	// Queries a IbcConnection by id.
	IbcConnection(ctx context.Context, in *QueryGetIbcConnectionRequest, opts ...grpc.CallOption) (*QueryGetIbcConnectionResponse, error)
	// Queries a list of IbcConnection items.
	IbcConnectionAll(ctx context.Context, in *QueryAllIbcConnectionRequest, opts ...grpc.CallOption) (*QueryAllIbcConnectionResponse, error)
	// Queries a Domain by id.
	Domain(ctx context.Context, in *QueryGetDomainRequest, opts ...grpc.CallOption) (*QueryGetDomainResponse, error)
	// Queries a list of Domain items.
	DomainAll(ctx context.Context, in *QueryAllDomainRequest, opts ...grpc.CallOption) (*QueryAllDomainResponse, error)
	// Queries a AuthenticationLog by id.
	AuthenticationLog(ctx context.Context, in *QueryGetAuthenticationLogRequest, opts ...grpc.CallOption) (*QueryGetAuthenticationLogResponse, error)
	// Queries a list of AuthenticationLog items.
	AuthenticationLogAll(ctx context.Context, in *QueryAllAuthenticationLogRequest, opts ...grpc.CallOption) (*QueryAllAuthenticationLogResponse, error)
	// Queries a DomainCooperation by id.
	DomainCooperation(ctx context.Context, in *QueryGetDomainCooperationRequest, opts ...grpc.CallOption) (*QueryGetDomainCooperationResponse, error)
	// Queries a list of DomainCooperation items.
	DomainCooperationAll(ctx context.Context, in *QueryAllDomainCooperationRequest, opts ...grpc.CallOption) (*QueryAllDomainCooperationResponse, error)
	// Queries a CooperationLog by id.
	CooperationLog(ctx context.Context, in *QueryGetCooperationLogRequest, opts ...grpc.CallOption) (*QueryGetCooperationLogResponse, error)
	// Queries a list of CooperationLog items.
	CooperationLogAll(ctx context.Context, in *QueryAllCooperationLogRequest, opts ...grpc.CallOption) (*QueryAllCooperationLogResponse, error)
	// Queries a list of CheckEstablishedCooperationByChannel items.
	CheckEstablishedCooperationByChannel(ctx context.Context, in *QueryCheckEstablishedCooperationByChannelRequest, opts ...grpc.CallOption) (*QueryCheckEstablishedCooperationByChannelResponse, error)
	// Queries a list of EstablishedCooperationByChannel items.
	EstablishedCooperationByChannel(ctx context.Context, in *QueryEstablishedCooperationByChannelRequest, opts ...grpc.CallOption) (*QueryEstablishedCooperationByChannelResponse, error)
	// Queries a ForwardPolicy by id.
	ForwardPolicy(ctx context.Context, in *QueryGetForwardPolicyRequest, opts ...grpc.CallOption) (*QueryGetForwardPolicyResponse, error)
	// Queries a list of ForwardPolicy items.
	ForwardPolicyAll(ctx context.Context, in *QueryAllForwardPolicyRequest, opts ...grpc.CallOption) (*QueryAllForwardPolicyResponse, error)
	// Queries a list of RetrieveForwardPolicy items.
	RetrieveForwardPolicy(ctx context.Context, in *QueryRetrieveForwardPolicyRequest, opts ...grpc.CallOption) (*QueryRetrieveForwardPolicyResponse, error)
	// Queries a DomainMap by index.
	DomainMap(ctx context.Context, in *QueryGetDomainMapRequest, opts ...grpc.CallOption) (*QueryGetDomainMapResponse, error)
	// Queries a list of DomainMap items.
	DomainMapAll(ctx context.Context, in *QueryAllDomainMapRequest, opts ...grpc.CallOption) (*QueryAllDomainMapResponse, error)
	// Queries a CooperationNetworkFeatures by id.
	CooperationNetworkFeatures(ctx context.Context, in *QueryGetCooperationNetworkFeaturesRequest, opts ...grpc.CallOption) (*QueryGetCooperationNetworkFeaturesResponse, error)
	// Queries a list of CooperationNetworkFeatures items.
	CooperationNetworkFeaturesAll(ctx context.Context, in *QueryAllCooperationNetworkFeaturesRequest, opts ...grpc.CallOption) (*QueryAllCooperationNetworkFeaturesResponse, error)
	// Queries a CooperationData by index.
	CooperationData(ctx context.Context, in *QueryGetCooperationDataRequest, opts ...grpc.CallOption) (*QueryGetCooperationDataResponse, error)
	// Queries a list of CooperationData items.
	CooperationDataAll(ctx context.Context, in *QueryAllCooperationDataRequest, opts ...grpc.CallOption) (*QueryAllCooperationDataResponse, error)
	// Queries a CooperationNetwork by id.
	CooperationNetwork(ctx context.Context, in *QueryGetCooperationNetworkRequest, opts ...grpc.CallOption) (*QueryGetCooperationNetworkResponse, error)
	// Queries a list of CooperationNetwork items.
	CooperationNetworkAll(ctx context.Context, in *QueryAllCooperationNetworkRequest, opts ...grpc.CallOption) (*QueryAllCooperationNetworkResponse, error)
	// Queries a UpdatePolicy by index.
	UpdatePolicy(ctx context.Context, in *QueryGetUpdatePolicyRequest, opts ...grpc.CallOption) (*QueryGetUpdatePolicyResponse, error)
	// Queries a CooperativeDomain by id.
	CooperativeDomain(ctx context.Context, in *QueryGetCooperativeDomainRequest, opts ...grpc.CallOption) (*QueryGetCooperativeDomainResponse, error)
	// Queries a list of CooperativeDomain items.
	CooperativeDomainAll(ctx context.Context, in *QueryAllCooperativeDomainRequest, opts ...grpc.CallOption) (*QueryAllCooperativeDomainResponse, error)
	// Queries a DelegationPath by id.
	DelegationPath(ctx context.Context, in *QueryGetDelegationPathRequest, opts ...grpc.CallOption) (*QueryGetDelegationPathResponse, error)
	// Queries a list of DelegationPath items.
	DelegationPathAll(ctx context.Context, in *QueryAllDelegationPathRequest, opts ...grpc.CallOption) (*QueryAllDelegationPathResponse, error)
	// Queries a Path by id.
	Path(ctx context.Context, in *QueryGetPathRequest, opts ...grpc.CallOption) (*QueryGetPathResponse, error)
	// Queries a list of Path items.
	PathAll(ctx context.Context, in *QueryAllPathRequest, opts ...grpc.CallOption) (*QueryAllPathResponse, error)
	// Queries a TimeCalculation by id.
	TimeCalculation(ctx context.Context, in *QueryGetTimeCalculationRequest, opts ...grpc.CallOption) (*QueryGetTimeCalculationResponse, error)
	// Queries a list of TimeCalculation items.
	TimeCalculationAll(ctx context.Context, in *QueryAllTimeCalculationRequest, opts ...grpc.CallOption) (*QueryAllTimeCalculationResponse, error)
	// Queries a CalculationTime by id.
	CalculationTime(ctx context.Context, in *QueryGetCalculationTimeRequest, opts ...grpc.CallOption) (*QueryGetCalculationTimeResponse, error)
	// Queries a list of CalculationTime items.
	CalculationTimeAll(ctx context.Context, in *QueryAllCalculationTimeRequest, opts ...grpc.CallOption) (*QueryAllCalculationTimeResponse, error)
	// Queries a list of RequestAccess items.
	RequestAccess(ctx context.Context, in *QueryRequestAccessRequest, opts ...grpc.CallOption) (*QueryRequestAccessResponse, error)
	// Queries a InterDomainAclPolicy by id.
	InterDomainAclPolicy(ctx context.Context, in *QueryGetInterDomainAclPolicyRequest, opts ...grpc.CallOption) (*QueryGetInterDomainAclPolicyResponse, error)
	// Queries a list of InterDomainAclPolicy items.
	InterDomainAclPolicyAll(ctx context.Context, in *QueryAllInterDomainAclPolicyRequest, opts ...grpc.CallOption) (*QueryAllInterDomainAclPolicyResponse, error)
	// Queries a InterDomainDclPolicy by id.
	InterDomainDclPolicy(ctx context.Context, in *QueryGetInterDomainDclPolicyRequest, opts ...grpc.CallOption) (*QueryGetInterDomainDclPolicyResponse, error)
	// Queries a list of InterDomainDclPolicy items.
	InterDomainDclPolicyAll(ctx context.Context, in *QueryAllInterDomainDclPolicyRequest, opts ...grpc.CallOption) (*QueryAllInterDomainDclPolicyResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PublicKey(ctx context.Context, in *QueryGetPublicKeyRequest, opts ...grpc.CallOption) (*QueryGetPublicKeyResponse, error) {
	out := new(QueryGetPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/PublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PublicKeyAll(ctx context.Context, in *QueryAllPublicKeyRequest, opts ...grpc.CallOption) (*QueryAllPublicKeyResponse, error) {
	out := new(QueryAllPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/PublicKeyAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Validity(ctx context.Context, in *QueryGetValidityRequest, opts ...grpc.CallOption) (*QueryGetValidityResponse, error) {
	out := new(QueryGetValidityResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/Validity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidityAll(ctx context.Context, in *QueryAllValidityRequest, opts ...grpc.CallOption) (*QueryAllValidityResponse, error) {
	out := new(QueryAllValidityResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/ValidityAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Certificate(ctx context.Context, in *QueryGetCertificateRequest, opts ...grpc.CallOption) (*QueryGetCertificateResponse, error) {
	out := new(QueryGetCertificateResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/Certificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CertificateAll(ctx context.Context, in *QueryAllCertificateRequest, opts ...grpc.CallOption) (*QueryAllCertificateResponse, error) {
	out := new(QueryAllCertificateResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CertificateAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IbcConnection(ctx context.Context, in *QueryGetIbcConnectionRequest, opts ...grpc.CallOption) (*QueryGetIbcConnectionResponse, error) {
	out := new(QueryGetIbcConnectionResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/IbcConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IbcConnectionAll(ctx context.Context, in *QueryAllIbcConnectionRequest, opts ...grpc.CallOption) (*QueryAllIbcConnectionResponse, error) {
	out := new(QueryAllIbcConnectionResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/IbcConnectionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Domain(ctx context.Context, in *QueryGetDomainRequest, opts ...grpc.CallOption) (*QueryGetDomainResponse, error) {
	out := new(QueryGetDomainResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/Domain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DomainAll(ctx context.Context, in *QueryAllDomainRequest, opts ...grpc.CallOption) (*QueryAllDomainResponse, error) {
	out := new(QueryAllDomainResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/DomainAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuthenticationLog(ctx context.Context, in *QueryGetAuthenticationLogRequest, opts ...grpc.CallOption) (*QueryGetAuthenticationLogResponse, error) {
	out := new(QueryGetAuthenticationLogResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/AuthenticationLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuthenticationLogAll(ctx context.Context, in *QueryAllAuthenticationLogRequest, opts ...grpc.CallOption) (*QueryAllAuthenticationLogResponse, error) {
	out := new(QueryAllAuthenticationLogResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/AuthenticationLogAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DomainCooperation(ctx context.Context, in *QueryGetDomainCooperationRequest, opts ...grpc.CallOption) (*QueryGetDomainCooperationResponse, error) {
	out := new(QueryGetDomainCooperationResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/DomainCooperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DomainCooperationAll(ctx context.Context, in *QueryAllDomainCooperationRequest, opts ...grpc.CallOption) (*QueryAllDomainCooperationResponse, error) {
	out := new(QueryAllDomainCooperationResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/DomainCooperationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CooperationLog(ctx context.Context, in *QueryGetCooperationLogRequest, opts ...grpc.CallOption) (*QueryGetCooperationLogResponse, error) {
	out := new(QueryGetCooperationLogResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CooperationLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CooperationLogAll(ctx context.Context, in *QueryAllCooperationLogRequest, opts ...grpc.CallOption) (*QueryAllCooperationLogResponse, error) {
	out := new(QueryAllCooperationLogResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CooperationLogAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckEstablishedCooperationByChannel(ctx context.Context, in *QueryCheckEstablishedCooperationByChannelRequest, opts ...grpc.CallOption) (*QueryCheckEstablishedCooperationByChannelResponse, error) {
	out := new(QueryCheckEstablishedCooperationByChannelResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CheckEstablishedCooperationByChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstablishedCooperationByChannel(ctx context.Context, in *QueryEstablishedCooperationByChannelRequest, opts ...grpc.CallOption) (*QueryEstablishedCooperationByChannelResponse, error) {
	out := new(QueryEstablishedCooperationByChannelResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/EstablishedCooperationByChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ForwardPolicy(ctx context.Context, in *QueryGetForwardPolicyRequest, opts ...grpc.CallOption) (*QueryGetForwardPolicyResponse, error) {
	out := new(QueryGetForwardPolicyResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/ForwardPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ForwardPolicyAll(ctx context.Context, in *QueryAllForwardPolicyRequest, opts ...grpc.CallOption) (*QueryAllForwardPolicyResponse, error) {
	out := new(QueryAllForwardPolicyResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/ForwardPolicyAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RetrieveForwardPolicy(ctx context.Context, in *QueryRetrieveForwardPolicyRequest, opts ...grpc.CallOption) (*QueryRetrieveForwardPolicyResponse, error) {
	out := new(QueryRetrieveForwardPolicyResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/RetrieveForwardPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DomainMap(ctx context.Context, in *QueryGetDomainMapRequest, opts ...grpc.CallOption) (*QueryGetDomainMapResponse, error) {
	out := new(QueryGetDomainMapResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/DomainMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DomainMapAll(ctx context.Context, in *QueryAllDomainMapRequest, opts ...grpc.CallOption) (*QueryAllDomainMapResponse, error) {
	out := new(QueryAllDomainMapResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/DomainMapAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CooperationNetworkFeatures(ctx context.Context, in *QueryGetCooperationNetworkFeaturesRequest, opts ...grpc.CallOption) (*QueryGetCooperationNetworkFeaturesResponse, error) {
	out := new(QueryGetCooperationNetworkFeaturesResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CooperationNetworkFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CooperationNetworkFeaturesAll(ctx context.Context, in *QueryAllCooperationNetworkFeaturesRequest, opts ...grpc.CallOption) (*QueryAllCooperationNetworkFeaturesResponse, error) {
	out := new(QueryAllCooperationNetworkFeaturesResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CooperationNetworkFeaturesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CooperationData(ctx context.Context, in *QueryGetCooperationDataRequest, opts ...grpc.CallOption) (*QueryGetCooperationDataResponse, error) {
	out := new(QueryGetCooperationDataResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CooperationData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CooperationDataAll(ctx context.Context, in *QueryAllCooperationDataRequest, opts ...grpc.CallOption) (*QueryAllCooperationDataResponse, error) {
	out := new(QueryAllCooperationDataResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CooperationDataAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CooperationNetwork(ctx context.Context, in *QueryGetCooperationNetworkRequest, opts ...grpc.CallOption) (*QueryGetCooperationNetworkResponse, error) {
	out := new(QueryGetCooperationNetworkResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CooperationNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CooperationNetworkAll(ctx context.Context, in *QueryAllCooperationNetworkRequest, opts ...grpc.CallOption) (*QueryAllCooperationNetworkResponse, error) {
	out := new(QueryAllCooperationNetworkResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CooperationNetworkAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UpdatePolicy(ctx context.Context, in *QueryGetUpdatePolicyRequest, opts ...grpc.CallOption) (*QueryGetUpdatePolicyResponse, error) {
	out := new(QueryGetUpdatePolicyResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/UpdatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CooperativeDomain(ctx context.Context, in *QueryGetCooperativeDomainRequest, opts ...grpc.CallOption) (*QueryGetCooperativeDomainResponse, error) {
	out := new(QueryGetCooperativeDomainResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CooperativeDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CooperativeDomainAll(ctx context.Context, in *QueryAllCooperativeDomainRequest, opts ...grpc.CallOption) (*QueryAllCooperativeDomainResponse, error) {
	out := new(QueryAllCooperativeDomainResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CooperativeDomainAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationPath(ctx context.Context, in *QueryGetDelegationPathRequest, opts ...grpc.CallOption) (*QueryGetDelegationPathResponse, error) {
	out := new(QueryGetDelegationPathResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/DelegationPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationPathAll(ctx context.Context, in *QueryAllDelegationPathRequest, opts ...grpc.CallOption) (*QueryAllDelegationPathResponse, error) {
	out := new(QueryAllDelegationPathResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/DelegationPathAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Path(ctx context.Context, in *QueryGetPathRequest, opts ...grpc.CallOption) (*QueryGetPathResponse, error) {
	out := new(QueryGetPathResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/Path", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PathAll(ctx context.Context, in *QueryAllPathRequest, opts ...grpc.CallOption) (*QueryAllPathResponse, error) {
	out := new(QueryAllPathResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/PathAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimeCalculation(ctx context.Context, in *QueryGetTimeCalculationRequest, opts ...grpc.CallOption) (*QueryGetTimeCalculationResponse, error) {
	out := new(QueryGetTimeCalculationResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/TimeCalculation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimeCalculationAll(ctx context.Context, in *QueryAllTimeCalculationRequest, opts ...grpc.CallOption) (*QueryAllTimeCalculationResponse, error) {
	out := new(QueryAllTimeCalculationResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/TimeCalculationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CalculationTime(ctx context.Context, in *QueryGetCalculationTimeRequest, opts ...grpc.CallOption) (*QueryGetCalculationTimeResponse, error) {
	out := new(QueryGetCalculationTimeResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CalculationTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CalculationTimeAll(ctx context.Context, in *QueryAllCalculationTimeRequest, opts ...grpc.CallOption) (*QueryAllCalculationTimeResponse, error) {
	out := new(QueryAllCalculationTimeResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CalculationTimeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RequestAccess(ctx context.Context, in *QueryRequestAccessRequest, opts ...grpc.CallOption) (*QueryRequestAccessResponse, error) {
	out := new(QueryRequestAccessResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/RequestAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InterDomainAclPolicy(ctx context.Context, in *QueryGetInterDomainAclPolicyRequest, opts ...grpc.CallOption) (*QueryGetInterDomainAclPolicyResponse, error) {
	out := new(QueryGetInterDomainAclPolicyResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/InterDomainAclPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InterDomainAclPolicyAll(ctx context.Context, in *QueryAllInterDomainAclPolicyRequest, opts ...grpc.CallOption) (*QueryAllInterDomainAclPolicyResponse, error) {
	out := new(QueryAllInterDomainAclPolicyResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/InterDomainAclPolicyAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InterDomainDclPolicy(ctx context.Context, in *QueryGetInterDomainDclPolicyRequest, opts ...grpc.CallOption) (*QueryGetInterDomainDclPolicyResponse, error) {
	out := new(QueryGetInterDomainDclPolicyResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/InterDomainDclPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InterDomainDclPolicyAll(ctx context.Context, in *QueryAllInterDomainDclPolicyRequest, opts ...grpc.CallOption) (*QueryAllInterDomainDclPolicyResponse, error) {
	out := new(QueryAllInterDomainDclPolicyResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/InterDomainDclPolicyAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a PublicKey by id.
	PublicKey(context.Context, *QueryGetPublicKeyRequest) (*QueryGetPublicKeyResponse, error)
	// Queries a list of PublicKey items.
	PublicKeyAll(context.Context, *QueryAllPublicKeyRequest) (*QueryAllPublicKeyResponse, error)
	// Queries a Validity by id.
	Validity(context.Context, *QueryGetValidityRequest) (*QueryGetValidityResponse, error)
	// Queries a list of Validity items.
	ValidityAll(context.Context, *QueryAllValidityRequest) (*QueryAllValidityResponse, error)
	// Queries a Certificate by id.
	Certificate(context.Context, *QueryGetCertificateRequest) (*QueryGetCertificateResponse, error)
	// Queries a list of Certificate items.
	CertificateAll(context.Context, *QueryAllCertificateRequest) (*QueryAllCertificateResponse, error)
	// Queries a IbcConnection by id.
	IbcConnection(context.Context, *QueryGetIbcConnectionRequest) (*QueryGetIbcConnectionResponse, error)
	// Queries a list of IbcConnection items.
	IbcConnectionAll(context.Context, *QueryAllIbcConnectionRequest) (*QueryAllIbcConnectionResponse, error)
	// Queries a Domain by id.
	Domain(context.Context, *QueryGetDomainRequest) (*QueryGetDomainResponse, error)
	// Queries a list of Domain items.
	DomainAll(context.Context, *QueryAllDomainRequest) (*QueryAllDomainResponse, error)
	// Queries a AuthenticationLog by id.
	AuthenticationLog(context.Context, *QueryGetAuthenticationLogRequest) (*QueryGetAuthenticationLogResponse, error)
	// Queries a list of AuthenticationLog items.
	AuthenticationLogAll(context.Context, *QueryAllAuthenticationLogRequest) (*QueryAllAuthenticationLogResponse, error)
	// Queries a DomainCooperation by id.
	DomainCooperation(context.Context, *QueryGetDomainCooperationRequest) (*QueryGetDomainCooperationResponse, error)
	// Queries a list of DomainCooperation items.
	DomainCooperationAll(context.Context, *QueryAllDomainCooperationRequest) (*QueryAllDomainCooperationResponse, error)
	// Queries a CooperationLog by id.
	CooperationLog(context.Context, *QueryGetCooperationLogRequest) (*QueryGetCooperationLogResponse, error)
	// Queries a list of CooperationLog items.
	CooperationLogAll(context.Context, *QueryAllCooperationLogRequest) (*QueryAllCooperationLogResponse, error)
	// Queries a list of CheckEstablishedCooperationByChannel items.
	CheckEstablishedCooperationByChannel(context.Context, *QueryCheckEstablishedCooperationByChannelRequest) (*QueryCheckEstablishedCooperationByChannelResponse, error)
	// Queries a list of EstablishedCooperationByChannel items.
	EstablishedCooperationByChannel(context.Context, *QueryEstablishedCooperationByChannelRequest) (*QueryEstablishedCooperationByChannelResponse, error)
	// Queries a ForwardPolicy by id.
	ForwardPolicy(context.Context, *QueryGetForwardPolicyRequest) (*QueryGetForwardPolicyResponse, error)
	// Queries a list of ForwardPolicy items.
	ForwardPolicyAll(context.Context, *QueryAllForwardPolicyRequest) (*QueryAllForwardPolicyResponse, error)
	// Queries a list of RetrieveForwardPolicy items.
	RetrieveForwardPolicy(context.Context, *QueryRetrieveForwardPolicyRequest) (*QueryRetrieveForwardPolicyResponse, error)
	// Queries a DomainMap by index.
	DomainMap(context.Context, *QueryGetDomainMapRequest) (*QueryGetDomainMapResponse, error)
	// Queries a list of DomainMap items.
	DomainMapAll(context.Context, *QueryAllDomainMapRequest) (*QueryAllDomainMapResponse, error)
	// Queries a CooperationNetworkFeatures by id.
	CooperationNetworkFeatures(context.Context, *QueryGetCooperationNetworkFeaturesRequest) (*QueryGetCooperationNetworkFeaturesResponse, error)
	// Queries a list of CooperationNetworkFeatures items.
	CooperationNetworkFeaturesAll(context.Context, *QueryAllCooperationNetworkFeaturesRequest) (*QueryAllCooperationNetworkFeaturesResponse, error)
	// Queries a CooperationData by index.
	CooperationData(context.Context, *QueryGetCooperationDataRequest) (*QueryGetCooperationDataResponse, error)
	// Queries a list of CooperationData items.
	CooperationDataAll(context.Context, *QueryAllCooperationDataRequest) (*QueryAllCooperationDataResponse, error)
	// Queries a CooperationNetwork by id.
	CooperationNetwork(context.Context, *QueryGetCooperationNetworkRequest) (*QueryGetCooperationNetworkResponse, error)
	// Queries a list of CooperationNetwork items.
	CooperationNetworkAll(context.Context, *QueryAllCooperationNetworkRequest) (*QueryAllCooperationNetworkResponse, error)
	// Queries a UpdatePolicy by index.
	UpdatePolicy(context.Context, *QueryGetUpdatePolicyRequest) (*QueryGetUpdatePolicyResponse, error)
	// Queries a CooperativeDomain by id.
	CooperativeDomain(context.Context, *QueryGetCooperativeDomainRequest) (*QueryGetCooperativeDomainResponse, error)
	// Queries a list of CooperativeDomain items.
	CooperativeDomainAll(context.Context, *QueryAllCooperativeDomainRequest) (*QueryAllCooperativeDomainResponse, error)
	// Queries a DelegationPath by id.
	DelegationPath(context.Context, *QueryGetDelegationPathRequest) (*QueryGetDelegationPathResponse, error)
	// Queries a list of DelegationPath items.
	DelegationPathAll(context.Context, *QueryAllDelegationPathRequest) (*QueryAllDelegationPathResponse, error)
	// Queries a Path by id.
	Path(context.Context, *QueryGetPathRequest) (*QueryGetPathResponse, error)
	// Queries a list of Path items.
	PathAll(context.Context, *QueryAllPathRequest) (*QueryAllPathResponse, error)
	// Queries a TimeCalculation by id.
	TimeCalculation(context.Context, *QueryGetTimeCalculationRequest) (*QueryGetTimeCalculationResponse, error)
	// Queries a list of TimeCalculation items.
	TimeCalculationAll(context.Context, *QueryAllTimeCalculationRequest) (*QueryAllTimeCalculationResponse, error)
	// Queries a CalculationTime by id.
	CalculationTime(context.Context, *QueryGetCalculationTimeRequest) (*QueryGetCalculationTimeResponse, error)
	// Queries a list of CalculationTime items.
	CalculationTimeAll(context.Context, *QueryAllCalculationTimeRequest) (*QueryAllCalculationTimeResponse, error)
	// Queries a list of RequestAccess items.
	RequestAccess(context.Context, *QueryRequestAccessRequest) (*QueryRequestAccessResponse, error)
	// Queries a InterDomainAclPolicy by id.
	InterDomainAclPolicy(context.Context, *QueryGetInterDomainAclPolicyRequest) (*QueryGetInterDomainAclPolicyResponse, error)
	// Queries a list of InterDomainAclPolicy items.
	InterDomainAclPolicyAll(context.Context, *QueryAllInterDomainAclPolicyRequest) (*QueryAllInterDomainAclPolicyResponse, error)
	// Queries a InterDomainDclPolicy by id.
	InterDomainDclPolicy(context.Context, *QueryGetInterDomainDclPolicyRequest) (*QueryGetInterDomainDclPolicyResponse, error)
	// Queries a list of InterDomainDclPolicy items.
	InterDomainDclPolicyAll(context.Context, *QueryAllInterDomainDclPolicyRequest) (*QueryAllInterDomainDclPolicyResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) PublicKey(ctx context.Context, req *QueryGetPublicKeyRequest) (*QueryGetPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKey not implemented")
}
func (*UnimplementedQueryServer) PublicKeyAll(ctx context.Context, req *QueryAllPublicKeyRequest) (*QueryAllPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKeyAll not implemented")
}
func (*UnimplementedQueryServer) Validity(ctx context.Context, req *QueryGetValidityRequest) (*QueryGetValidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validity not implemented")
}
func (*UnimplementedQueryServer) ValidityAll(ctx context.Context, req *QueryAllValidityRequest) (*QueryAllValidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidityAll not implemented")
}
func (*UnimplementedQueryServer) Certificate(ctx context.Context, req *QueryGetCertificateRequest) (*QueryGetCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Certificate not implemented")
}
func (*UnimplementedQueryServer) CertificateAll(ctx context.Context, req *QueryAllCertificateRequest) (*QueryAllCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificateAll not implemented")
}
func (*UnimplementedQueryServer) IbcConnection(ctx context.Context, req *QueryGetIbcConnectionRequest) (*QueryGetIbcConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbcConnection not implemented")
}
func (*UnimplementedQueryServer) IbcConnectionAll(ctx context.Context, req *QueryAllIbcConnectionRequest) (*QueryAllIbcConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbcConnectionAll not implemented")
}
func (*UnimplementedQueryServer) Domain(ctx context.Context, req *QueryGetDomainRequest) (*QueryGetDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Domain not implemented")
}
func (*UnimplementedQueryServer) DomainAll(ctx context.Context, req *QueryAllDomainRequest) (*QueryAllDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainAll not implemented")
}
func (*UnimplementedQueryServer) AuthenticationLog(ctx context.Context, req *QueryGetAuthenticationLogRequest) (*QueryGetAuthenticationLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticationLog not implemented")
}
func (*UnimplementedQueryServer) AuthenticationLogAll(ctx context.Context, req *QueryAllAuthenticationLogRequest) (*QueryAllAuthenticationLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticationLogAll not implemented")
}
func (*UnimplementedQueryServer) DomainCooperation(ctx context.Context, req *QueryGetDomainCooperationRequest) (*QueryGetDomainCooperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainCooperation not implemented")
}
func (*UnimplementedQueryServer) DomainCooperationAll(ctx context.Context, req *QueryAllDomainCooperationRequest) (*QueryAllDomainCooperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainCooperationAll not implemented")
}
func (*UnimplementedQueryServer) CooperationLog(ctx context.Context, req *QueryGetCooperationLogRequest) (*QueryGetCooperationLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CooperationLog not implemented")
}
func (*UnimplementedQueryServer) CooperationLogAll(ctx context.Context, req *QueryAllCooperationLogRequest) (*QueryAllCooperationLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CooperationLogAll not implemented")
}
func (*UnimplementedQueryServer) CheckEstablishedCooperationByChannel(ctx context.Context, req *QueryCheckEstablishedCooperationByChannelRequest) (*QueryCheckEstablishedCooperationByChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEstablishedCooperationByChannel not implemented")
}
func (*UnimplementedQueryServer) EstablishedCooperationByChannel(ctx context.Context, req *QueryEstablishedCooperationByChannelRequest) (*QueryEstablishedCooperationByChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstablishedCooperationByChannel not implemented")
}
func (*UnimplementedQueryServer) ForwardPolicy(ctx context.Context, req *QueryGetForwardPolicyRequest) (*QueryGetForwardPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardPolicy not implemented")
}
func (*UnimplementedQueryServer) ForwardPolicyAll(ctx context.Context, req *QueryAllForwardPolicyRequest) (*QueryAllForwardPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardPolicyAll not implemented")
}
func (*UnimplementedQueryServer) RetrieveForwardPolicy(ctx context.Context, req *QueryRetrieveForwardPolicyRequest) (*QueryRetrieveForwardPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveForwardPolicy not implemented")
}
func (*UnimplementedQueryServer) DomainMap(ctx context.Context, req *QueryGetDomainMapRequest) (*QueryGetDomainMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainMap not implemented")
}
func (*UnimplementedQueryServer) DomainMapAll(ctx context.Context, req *QueryAllDomainMapRequest) (*QueryAllDomainMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainMapAll not implemented")
}
func (*UnimplementedQueryServer) CooperationNetworkFeatures(ctx context.Context, req *QueryGetCooperationNetworkFeaturesRequest) (*QueryGetCooperationNetworkFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CooperationNetworkFeatures not implemented")
}
func (*UnimplementedQueryServer) CooperationNetworkFeaturesAll(ctx context.Context, req *QueryAllCooperationNetworkFeaturesRequest) (*QueryAllCooperationNetworkFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CooperationNetworkFeaturesAll not implemented")
}
func (*UnimplementedQueryServer) CooperationData(ctx context.Context, req *QueryGetCooperationDataRequest) (*QueryGetCooperationDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CooperationData not implemented")
}
func (*UnimplementedQueryServer) CooperationDataAll(ctx context.Context, req *QueryAllCooperationDataRequest) (*QueryAllCooperationDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CooperationDataAll not implemented")
}
func (*UnimplementedQueryServer) CooperationNetwork(ctx context.Context, req *QueryGetCooperationNetworkRequest) (*QueryGetCooperationNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CooperationNetwork not implemented")
}
func (*UnimplementedQueryServer) CooperationNetworkAll(ctx context.Context, req *QueryAllCooperationNetworkRequest) (*QueryAllCooperationNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CooperationNetworkAll not implemented")
}
func (*UnimplementedQueryServer) UpdatePolicy(ctx context.Context, req *QueryGetUpdatePolicyRequest) (*QueryGetUpdatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (*UnimplementedQueryServer) CooperativeDomain(ctx context.Context, req *QueryGetCooperativeDomainRequest) (*QueryGetCooperativeDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CooperativeDomain not implemented")
}
func (*UnimplementedQueryServer) CooperativeDomainAll(ctx context.Context, req *QueryAllCooperativeDomainRequest) (*QueryAllCooperativeDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CooperativeDomainAll not implemented")
}
func (*UnimplementedQueryServer) DelegationPath(ctx context.Context, req *QueryGetDelegationPathRequest) (*QueryGetDelegationPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegationPath not implemented")
}
func (*UnimplementedQueryServer) DelegationPathAll(ctx context.Context, req *QueryAllDelegationPathRequest) (*QueryAllDelegationPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegationPathAll not implemented")
}
func (*UnimplementedQueryServer) Path(ctx context.Context, req *QueryGetPathRequest) (*QueryGetPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Path not implemented")
}
func (*UnimplementedQueryServer) PathAll(ctx context.Context, req *QueryAllPathRequest) (*QueryAllPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PathAll not implemented")
}
func (*UnimplementedQueryServer) TimeCalculation(ctx context.Context, req *QueryGetTimeCalculationRequest) (*QueryGetTimeCalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeCalculation not implemented")
}
func (*UnimplementedQueryServer) TimeCalculationAll(ctx context.Context, req *QueryAllTimeCalculationRequest) (*QueryAllTimeCalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeCalculationAll not implemented")
}
func (*UnimplementedQueryServer) CalculationTime(ctx context.Context, req *QueryGetCalculationTimeRequest) (*QueryGetCalculationTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculationTime not implemented")
}
func (*UnimplementedQueryServer) CalculationTimeAll(ctx context.Context, req *QueryAllCalculationTimeRequest) (*QueryAllCalculationTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculationTimeAll not implemented")
}
func (*UnimplementedQueryServer) RequestAccess(ctx context.Context, req *QueryRequestAccessRequest) (*QueryRequestAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAccess not implemented")
}
func (*UnimplementedQueryServer) InterDomainAclPolicy(ctx context.Context, req *QueryGetInterDomainAclPolicyRequest) (*QueryGetInterDomainAclPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterDomainAclPolicy not implemented")
}
func (*UnimplementedQueryServer) InterDomainAclPolicyAll(ctx context.Context, req *QueryAllInterDomainAclPolicyRequest) (*QueryAllInterDomainAclPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterDomainAclPolicyAll not implemented")
}
func (*UnimplementedQueryServer) InterDomainDclPolicy(ctx context.Context, req *QueryGetInterDomainDclPolicyRequest) (*QueryGetInterDomainDclPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterDomainDclPolicy not implemented")
}
func (*UnimplementedQueryServer) InterDomainDclPolicyAll(ctx context.Context, req *QueryAllInterDomainDclPolicyRequest) (*QueryAllInterDomainDclPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterDomainDclPolicyAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/PublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PublicKey(ctx, req.(*QueryGetPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PublicKeyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PublicKeyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/PublicKeyAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PublicKeyAll(ctx, req.(*QueryAllPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Validity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/Validity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validity(ctx, req.(*QueryGetValidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidityAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllValidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidityAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/ValidityAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidityAll(ctx, req.(*QueryAllValidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Certificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Certificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/Certificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Certificate(ctx, req.(*QueryGetCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CertificateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CertificateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CertificateAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CertificateAll(ctx, req.(*QueryAllCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IbcConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIbcConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IbcConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/IbcConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IbcConnection(ctx, req.(*QueryGetIbcConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IbcConnectionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIbcConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IbcConnectionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/IbcConnectionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IbcConnectionAll(ctx, req.(*QueryAllIbcConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Domain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Domain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/Domain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Domain(ctx, req.(*QueryGetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DomainAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DomainAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/DomainAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DomainAll(ctx, req.(*QueryAllDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuthenticationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAuthenticationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuthenticationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/AuthenticationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuthenticationLog(ctx, req.(*QueryGetAuthenticationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuthenticationLogAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAuthenticationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuthenticationLogAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/AuthenticationLogAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuthenticationLogAll(ctx, req.(*QueryAllAuthenticationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DomainCooperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDomainCooperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DomainCooperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/DomainCooperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DomainCooperation(ctx, req.(*QueryGetDomainCooperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DomainCooperationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDomainCooperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DomainCooperationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/DomainCooperationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DomainCooperationAll(ctx, req.(*QueryAllDomainCooperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CooperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCooperationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CooperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CooperationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CooperationLog(ctx, req.(*QueryGetCooperationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CooperationLogAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCooperationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CooperationLogAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CooperationLogAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CooperationLogAll(ctx, req.(*QueryAllCooperationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckEstablishedCooperationByChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckEstablishedCooperationByChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckEstablishedCooperationByChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CheckEstablishedCooperationByChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckEstablishedCooperationByChannel(ctx, req.(*QueryCheckEstablishedCooperationByChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstablishedCooperationByChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstablishedCooperationByChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstablishedCooperationByChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/EstablishedCooperationByChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstablishedCooperationByChannel(ctx, req.(*QueryEstablishedCooperationByChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ForwardPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetForwardPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ForwardPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/ForwardPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ForwardPolicy(ctx, req.(*QueryGetForwardPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ForwardPolicyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllForwardPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ForwardPolicyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/ForwardPolicyAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ForwardPolicyAll(ctx, req.(*QueryAllForwardPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RetrieveForwardPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRetrieveForwardPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RetrieveForwardPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/RetrieveForwardPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RetrieveForwardPolicy(ctx, req.(*QueryRetrieveForwardPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DomainMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDomainMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DomainMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/DomainMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DomainMap(ctx, req.(*QueryGetDomainMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DomainMapAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDomainMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DomainMapAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/DomainMapAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DomainMapAll(ctx, req.(*QueryAllDomainMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CooperationNetworkFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCooperationNetworkFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CooperationNetworkFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CooperationNetworkFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CooperationNetworkFeatures(ctx, req.(*QueryGetCooperationNetworkFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CooperationNetworkFeaturesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCooperationNetworkFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CooperationNetworkFeaturesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CooperationNetworkFeaturesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CooperationNetworkFeaturesAll(ctx, req.(*QueryAllCooperationNetworkFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CooperationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCooperationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CooperationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CooperationData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CooperationData(ctx, req.(*QueryGetCooperationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CooperationDataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCooperationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CooperationDataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CooperationDataAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CooperationDataAll(ctx, req.(*QueryAllCooperationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CooperationNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCooperationNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CooperationNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CooperationNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CooperationNetwork(ctx, req.(*QueryGetCooperationNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CooperationNetworkAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCooperationNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CooperationNetworkAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CooperationNetworkAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CooperationNetworkAll(ctx, req.(*QueryAllCooperationNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/UpdatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UpdatePolicy(ctx, req.(*QueryGetUpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CooperativeDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCooperativeDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CooperativeDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CooperativeDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CooperativeDomain(ctx, req.(*QueryGetCooperativeDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CooperativeDomainAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCooperativeDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CooperativeDomainAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CooperativeDomainAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CooperativeDomainAll(ctx, req.(*QueryAllCooperativeDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDelegationPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/DelegationPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationPath(ctx, req.(*QueryGetDelegationPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationPathAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDelegationPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationPathAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/DelegationPathAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationPathAll(ctx, req.(*QueryAllDelegationPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Path_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Path(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/Path",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Path(ctx, req.(*QueryGetPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PathAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PathAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/PathAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PathAll(ctx, req.(*QueryAllPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimeCalculation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTimeCalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimeCalculation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/TimeCalculation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimeCalculation(ctx, req.(*QueryGetTimeCalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimeCalculationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTimeCalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimeCalculationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/TimeCalculationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimeCalculationAll(ctx, req.(*QueryAllTimeCalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CalculationTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCalculationTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CalculationTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CalculationTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CalculationTime(ctx, req.(*QueryGetCalculationTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CalculationTimeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCalculationTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CalculationTimeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CalculationTimeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CalculationTimeAll(ctx, req.(*QueryAllCalculationTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RequestAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequestAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RequestAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/RequestAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RequestAccess(ctx, req.(*QueryRequestAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InterDomainAclPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInterDomainAclPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InterDomainAclPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/InterDomainAclPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InterDomainAclPolicy(ctx, req.(*QueryGetInterDomainAclPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InterDomainAclPolicyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInterDomainAclPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InterDomainAclPolicyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/InterDomainAclPolicyAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InterDomainAclPolicyAll(ctx, req.(*QueryAllInterDomainAclPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InterDomainDclPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInterDomainDclPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InterDomainDclPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/InterDomainDclPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InterDomainDclPolicy(ctx, req.(*QueryGetInterDomainDclPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InterDomainDclPolicyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInterDomainDclPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InterDomainDclPolicyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/InterDomainDclPolicyAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InterDomainDclPolicyAll(ctx, req.(*QueryAllInterDomainDclPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crossdomain.cdac.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "PublicKey",
			Handler:    _Query_PublicKey_Handler,
		},
		{
			MethodName: "PublicKeyAll",
			Handler:    _Query_PublicKeyAll_Handler,
		},
		{
			MethodName: "Validity",
			Handler:    _Query_Validity_Handler,
		},
		{
			MethodName: "ValidityAll",
			Handler:    _Query_ValidityAll_Handler,
		},
		{
			MethodName: "Certificate",
			Handler:    _Query_Certificate_Handler,
		},
		{
			MethodName: "CertificateAll",
			Handler:    _Query_CertificateAll_Handler,
		},
		{
			MethodName: "IbcConnection",
			Handler:    _Query_IbcConnection_Handler,
		},
		{
			MethodName: "IbcConnectionAll",
			Handler:    _Query_IbcConnectionAll_Handler,
		},
		{
			MethodName: "Domain",
			Handler:    _Query_Domain_Handler,
		},
		{
			MethodName: "DomainAll",
			Handler:    _Query_DomainAll_Handler,
		},
		{
			MethodName: "AuthenticationLog",
			Handler:    _Query_AuthenticationLog_Handler,
		},
		{
			MethodName: "AuthenticationLogAll",
			Handler:    _Query_AuthenticationLogAll_Handler,
		},
		{
			MethodName: "DomainCooperation",
			Handler:    _Query_DomainCooperation_Handler,
		},
		{
			MethodName: "DomainCooperationAll",
			Handler:    _Query_DomainCooperationAll_Handler,
		},
		{
			MethodName: "CooperationLog",
			Handler:    _Query_CooperationLog_Handler,
		},
		{
			MethodName: "CooperationLogAll",
			Handler:    _Query_CooperationLogAll_Handler,
		},
		{
			MethodName: "CheckEstablishedCooperationByChannel",
			Handler:    _Query_CheckEstablishedCooperationByChannel_Handler,
		},
		{
			MethodName: "EstablishedCooperationByChannel",
			Handler:    _Query_EstablishedCooperationByChannel_Handler,
		},
		{
			MethodName: "ForwardPolicy",
			Handler:    _Query_ForwardPolicy_Handler,
		},
		{
			MethodName: "ForwardPolicyAll",
			Handler:    _Query_ForwardPolicyAll_Handler,
		},
		{
			MethodName: "RetrieveForwardPolicy",
			Handler:    _Query_RetrieveForwardPolicy_Handler,
		},
		{
			MethodName: "DomainMap",
			Handler:    _Query_DomainMap_Handler,
		},
		{
			MethodName: "DomainMapAll",
			Handler:    _Query_DomainMapAll_Handler,
		},
		{
			MethodName: "CooperationNetworkFeatures",
			Handler:    _Query_CooperationNetworkFeatures_Handler,
		},
		{
			MethodName: "CooperationNetworkFeaturesAll",
			Handler:    _Query_CooperationNetworkFeaturesAll_Handler,
		},
		{
			MethodName: "CooperationData",
			Handler:    _Query_CooperationData_Handler,
		},
		{
			MethodName: "CooperationDataAll",
			Handler:    _Query_CooperationDataAll_Handler,
		},
		{
			MethodName: "CooperationNetwork",
			Handler:    _Query_CooperationNetwork_Handler,
		},
		{
			MethodName: "CooperationNetworkAll",
			Handler:    _Query_CooperationNetworkAll_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _Query_UpdatePolicy_Handler,
		},
		{
			MethodName: "CooperativeDomain",
			Handler:    _Query_CooperativeDomain_Handler,
		},
		{
			MethodName: "CooperativeDomainAll",
			Handler:    _Query_CooperativeDomainAll_Handler,
		},
		{
			MethodName: "DelegationPath",
			Handler:    _Query_DelegationPath_Handler,
		},
		{
			MethodName: "DelegationPathAll",
			Handler:    _Query_DelegationPathAll_Handler,
		},
		{
			MethodName: "Path",
			Handler:    _Query_Path_Handler,
		},
		{
			MethodName: "PathAll",
			Handler:    _Query_PathAll_Handler,
		},
		{
			MethodName: "TimeCalculation",
			Handler:    _Query_TimeCalculation_Handler,
		},
		{
			MethodName: "TimeCalculationAll",
			Handler:    _Query_TimeCalculationAll_Handler,
		},
		{
			MethodName: "CalculationTime",
			Handler:    _Query_CalculationTime_Handler,
		},
		{
			MethodName: "CalculationTimeAll",
			Handler:    _Query_CalculationTimeAll_Handler,
		},
		{
			MethodName: "RequestAccess",
			Handler:    _Query_RequestAccess_Handler,
		},
		{
			MethodName: "InterDomainAclPolicy",
			Handler:    _Query_InterDomainAclPolicy_Handler,
		},
		{
			MethodName: "InterDomainAclPolicyAll",
			Handler:    _Query_InterDomainAclPolicyAll_Handler,
		},
		{
			MethodName: "InterDomainDclPolicy",
			Handler:    _Query_InterDomainDclPolicy_Handler,
		},
		{
			MethodName: "InterDomainDclPolicyAll",
			Handler:    _Query_InterDomainDclPolicyAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cdac/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPublicKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPublicKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPublicKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPublicKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPublicKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPublicKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PublicKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPublicKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPublicKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPublicKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPublicKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPublicKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPublicKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		for iNdEx := len(m.PublicKey) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PublicKey[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Validity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllValidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validity) > 0 {
		for iNdEx := len(m.Validity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCertificateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCertificateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCertificateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Certificate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCertificateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCertificateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCertificateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Certificate) > 0 {
		for iNdEx := len(m.Certificate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIbcConnectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIbcConnectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIbcConnectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIbcConnectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIbcConnectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIbcConnectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IbcConnection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllIbcConnectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIbcConnectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIbcConnectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIbcConnectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIbcConnectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIbcConnectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IbcConnection) > 0 {
		for iNdEx := len(m.IbcConnection) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IbcConnection[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		for iNdEx := len(m.Domain) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Domain[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAuthenticationLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuthenticationLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuthenticationLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAuthenticationLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuthenticationLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuthenticationLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AuthenticationLog.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAuthenticationLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAuthenticationLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAuthenticationLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAuthenticationLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAuthenticationLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAuthenticationLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AuthenticationLog) > 0 {
		for iNdEx := len(m.AuthenticationLog) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuthenticationLog[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDomainCooperationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDomainCooperationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDomainCooperationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDomainCooperationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDomainCooperationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDomainCooperationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DomainCooperation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDomainCooperationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDomainCooperationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDomainCooperationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDomainCooperationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDomainCooperationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDomainCooperationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DomainCooperation) > 0 {
		for iNdEx := len(m.DomainCooperation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DomainCooperation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCooperationLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCooperationLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCooperationLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCooperationLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCooperationLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCooperationLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CooperationLog.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCooperationLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCooperationLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCooperationLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCooperationLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCooperationLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCooperationLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CooperationLog) > 0 {
		for iNdEx := len(m.CooperationLog) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CooperationLog[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckEstablishedCooperationByChannelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckEstablishedCooperationByChannelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckEstablishedCooperationByChannelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckEstablishedCooperationByChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckEstablishedCooperationByChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckEstablishedCooperationByChannelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstablishedCooperationByChannelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstablishedCooperationByChannelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstablishedCooperationByChannelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstablishedCooperationByChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstablishedCooperationByChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstablishedCooperationByChannelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.DomainCooperation != nil {
		{
			size, err := m.DomainCooperation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetForwardPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetForwardPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetForwardPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetForwardPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetForwardPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetForwardPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ForwardPolicy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllForwardPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllForwardPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllForwardPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllForwardPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllForwardPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllForwardPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ForwardPolicy) > 0 {
		for iNdEx := len(m.ForwardPolicy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForwardPolicy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRetrieveForwardPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRetrieveForwardPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRetrieveForwardPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRetrieveForwardPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRetrieveForwardPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRetrieveForwardPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForwardPolicy != nil {
		{
			size, err := m.ForwardPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDomainMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDomainMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDomainMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DomainIndex) > 0 {
		i -= len(m.DomainIndex)
		copy(dAtA[i:], m.DomainIndex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DomainIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDomainMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDomainMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDomainMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DomainMap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDomainMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDomainMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDomainMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDomainMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDomainMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDomainMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DomainMap) > 0 {
		for iNdEx := len(m.DomainMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DomainMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCooperationNetworkFeaturesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCooperationNetworkFeaturesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCooperationNetworkFeaturesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCooperationNetworkFeaturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCooperationNetworkFeaturesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCooperationNetworkFeaturesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CooperationNetworkFeatures.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCooperationNetworkFeaturesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCooperationNetworkFeaturesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCooperationNetworkFeaturesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCooperationNetworkFeaturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCooperationNetworkFeaturesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCooperationNetworkFeaturesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CooperationNetworkFeatures) > 0 {
		for iNdEx := len(m.CooperationNetworkFeatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CooperationNetworkFeatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCooperationDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCooperationDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCooperationDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LabelIndex) > 0 {
		i -= len(m.LabelIndex)
		copy(dAtA[i:], m.LabelIndex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LabelIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCooperationDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCooperationDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCooperationDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CooperationData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCooperationDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCooperationDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCooperationDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCooperationDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCooperationDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCooperationDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CooperationData) > 0 {
		for iNdEx := len(m.CooperationData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CooperationData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCooperationNetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCooperationNetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCooperationNetworkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCooperationNetworkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCooperationNetworkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCooperationNetworkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CooperationNetwork.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCooperationNetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCooperationNetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCooperationNetworkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCooperationNetworkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCooperationNetworkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCooperationNetworkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CooperationNetwork) > 0 {
		for iNdEx := len(m.CooperationNetwork) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CooperationNetwork[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUpdatePolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUpdatePolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUpdatePolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetUpdatePolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUpdatePolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUpdatePolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UpdatePolicy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetCooperativeDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCooperativeDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCooperativeDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCooperativeDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCooperativeDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCooperativeDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CooperativeDomain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCooperativeDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCooperativeDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCooperativeDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCooperativeDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCooperativeDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCooperativeDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CooperativeDomain) > 0 {
		for iNdEx := len(m.CooperativeDomain) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CooperativeDomain[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDelegationPathRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDelegationPathRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDelegationPathRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDelegationPathResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDelegationPathResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDelegationPathResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DelegationPath.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDelegationPathRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDelegationPathRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDelegationPathRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDelegationPathResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDelegationPathResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDelegationPathResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegationPath) > 0 {
		for iNdEx := len(m.DelegationPath) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationPath[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPathRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPathRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPathRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPathResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPathResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPathResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPathRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPathRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPathRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPathResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPathResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPathResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		for iNdEx := len(m.Path) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Path[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTimeCalculationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimeCalculationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimeCalculationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTimeCalculationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimeCalculationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimeCalculationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TimeCalculation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTimeCalculationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimeCalculationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimeCalculationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTimeCalculationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimeCalculationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimeCalculationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TimeCalculation) > 0 {
		for iNdEx := len(m.TimeCalculation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimeCalculation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCalculationTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCalculationTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCalculationTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCalculationTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCalculationTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCalculationTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CalculationTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCalculationTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCalculationTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCalculationTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCalculationTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCalculationTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCalculationTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CalculationTime) > 0 {
		for iNdEx := len(m.CalculationTime) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CalculationTime[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequestAccessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequestAccessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequestAccessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Object) > 0 {
		i -= len(m.Object)
		copy(dAtA[i:], m.Object)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Object)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequestAccessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequestAccessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequestAccessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Decision) > 0 {
		i -= len(m.Decision)
		copy(dAtA[i:], m.Decision)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Decision)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInterDomainAclPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInterDomainAclPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInterDomainAclPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInterDomainAclPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInterDomainAclPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInterDomainAclPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InterDomainAclPolicy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllInterDomainAclPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInterDomainAclPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInterDomainAclPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInterDomainAclPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInterDomainAclPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInterDomainAclPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InterDomainAclPolicy) > 0 {
		for iNdEx := len(m.InterDomainAclPolicy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InterDomainAclPolicy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInterDomainDclPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInterDomainDclPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInterDomainDclPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInterDomainDclPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInterDomainDclPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInterDomainDclPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InterDomainDclPolicy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllInterDomainDclPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInterDomainDclPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInterDomainDclPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInterDomainDclPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInterDomainDclPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInterDomainDclPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InterDomainDclPolicy) > 0 {
		for iNdEx := len(m.InterDomainDclPolicy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InterDomainDclPolicy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPublicKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPublicKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PublicKey.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPublicKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPublicKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		for _, e := range m.PublicKey {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetValidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Validity.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllValidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validity) > 0 {
		for _, e := range m.Validity {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCertificateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Certificate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCertificateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Certificate) > 0 {
		for _, e := range m.Certificate {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIbcConnectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetIbcConnectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IbcConnection.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllIbcConnectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIbcConnectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IbcConnection) > 0 {
		for _, e := range m.IbcConnection {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Domain.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domain) > 0 {
		for _, e := range m.Domain {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAuthenticationLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetAuthenticationLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AuthenticationLog.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAuthenticationLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAuthenticationLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuthenticationLog) > 0 {
		for _, e := range m.AuthenticationLog {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDomainCooperationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetDomainCooperationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DomainCooperation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDomainCooperationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDomainCooperationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DomainCooperation) > 0 {
		for _, e := range m.DomainCooperation {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCooperationLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCooperationLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CooperationLog.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCooperationLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCooperationLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CooperationLog) > 0 {
		for _, e := range m.CooperationLog {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCheckEstablishedCooperationByChannelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCheckEstablishedCooperationByChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Found {
		n += 2
	}
	return n
}

func (m *QueryEstablishedCooperationByChannelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstablishedCooperationByChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainCooperation != nil {
		l = m.DomainCooperation.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Found {
		n += 2
	}
	return n
}

func (m *QueryGetForwardPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetForwardPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ForwardPolicy.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllForwardPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllForwardPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ForwardPolicy) > 0 {
		for _, e := range m.ForwardPolicy {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRetrieveForwardPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRetrieveForwardPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardPolicy != nil {
		l = m.ForwardPolicy.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDomainMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainIndex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDomainMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DomainMap.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDomainMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDomainMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DomainMap) > 0 {
		for _, e := range m.DomainMap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCooperationNetworkFeaturesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCooperationNetworkFeaturesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CooperationNetworkFeatures.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCooperationNetworkFeaturesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCooperationNetworkFeaturesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CooperationNetworkFeatures) > 0 {
		for _, e := range m.CooperationNetworkFeatures {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCooperationDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LabelIndex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCooperationDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CooperationData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCooperationDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCooperationDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CooperationData) > 0 {
		for _, e := range m.CooperationData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCooperationNetworkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCooperationNetworkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CooperationNetwork.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCooperationNetworkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCooperationNetworkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CooperationNetwork) > 0 {
		for _, e := range m.CooperationNetwork {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUpdatePolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetUpdatePolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UpdatePolicy.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetCooperativeDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCooperativeDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CooperativeDomain.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCooperativeDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCooperativeDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CooperativeDomain) > 0 {
		for _, e := range m.CooperativeDomain {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDelegationPathRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetDelegationPathResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DelegationPath.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDelegationPathRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDelegationPathResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DelegationPath) > 0 {
		for _, e := range m.DelegationPath {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPathRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPathResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Path.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPathRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPathResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Path) > 0 {
		for _, e := range m.Path {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTimeCalculationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetTimeCalculationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TimeCalculation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTimeCalculationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTimeCalculationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TimeCalculation) > 0 {
		for _, e := range m.TimeCalculation {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCalculationTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCalculationTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CalculationTime.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCalculationTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCalculationTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CalculationTime) > 0 {
		for _, e := range m.CalculationTime {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRequestAccessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Object)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRequestAccessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Decision)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInterDomainAclPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetInterDomainAclPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InterDomainAclPolicy.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllInterDomainAclPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInterDomainAclPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InterDomainAclPolicy) > 0 {
		for _, e := range m.InterDomainAclPolicy {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInterDomainDclPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetInterDomainDclPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InterDomainDclPolicy.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllInterDomainDclPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInterDomainDclPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InterDomainDclPolicy) > 0 {
		for _, e := range m.InterDomainDclPolicy {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPublicKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPublicKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPublicKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPublicKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPublicKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPublicKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PublicKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPublicKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPublicKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPublicKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPublicKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPublicKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPublicKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey, PublicKey{})
			if err := m.PublicKey[len(m.PublicKey)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Validity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validity = append(m.Validity, Validity{})
			if err := m.Validity[len(m.Validity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCertificateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCertificateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCertificateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Certificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCertificateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCertificateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCertificateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificate = append(m.Certificate, Certificate{})
			if err := m.Certificate[len(m.Certificate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIbcConnectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIbcConnectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIbcConnectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIbcConnectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIbcConnectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIbcConnectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcConnection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IbcConnection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIbcConnectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIbcConnectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIbcConnectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIbcConnectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIbcConnectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIbcConnectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcConnection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcConnection = append(m.IbcConnection, IbcConnection{})
			if err := m.IbcConnection[len(m.IbcConnection)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = append(m.Domain, Domain{})
			if err := m.Domain[len(m.Domain)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuthenticationLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuthenticationLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuthenticationLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuthenticationLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuthenticationLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuthenticationLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AuthenticationLog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAuthenticationLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAuthenticationLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAuthenticationLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAuthenticationLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAuthenticationLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAuthenticationLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationLog = append(m.AuthenticationLog, AuthenticationLog{})
			if err := m.AuthenticationLog[len(m.AuthenticationLog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDomainCooperationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDomainCooperationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDomainCooperationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDomainCooperationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDomainCooperationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDomainCooperationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainCooperation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DomainCooperation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDomainCooperationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDomainCooperationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDomainCooperationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDomainCooperationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDomainCooperationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDomainCooperationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainCooperation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainCooperation = append(m.DomainCooperation, DomainCooperation{})
			if err := m.DomainCooperation[len(m.DomainCooperation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCooperationLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCooperationLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCooperationLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCooperationLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCooperationLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCooperationLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CooperationLog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCooperationLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCooperationLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCooperationLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCooperationLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCooperationLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCooperationLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CooperationLog = append(m.CooperationLog, CooperationLog{})
			if err := m.CooperationLog[len(m.CooperationLog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckEstablishedCooperationByChannelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckEstablishedCooperationByChannelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckEstablishedCooperationByChannelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckEstablishedCooperationByChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckEstablishedCooperationByChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckEstablishedCooperationByChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstablishedCooperationByChannelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstablishedCooperationByChannelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstablishedCooperationByChannelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstablishedCooperationByChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstablishedCooperationByChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstablishedCooperationByChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainCooperation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DomainCooperation == nil {
				m.DomainCooperation = &DomainCooperation{}
			}
			if err := m.DomainCooperation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetForwardPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetForwardPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetForwardPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetForwardPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetForwardPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetForwardPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ForwardPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllForwardPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllForwardPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllForwardPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllForwardPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllForwardPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllForwardPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardPolicy = append(m.ForwardPolicy, ForwardPolicy{})
			if err := m.ForwardPolicy[len(m.ForwardPolicy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRetrieveForwardPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRetrieveForwardPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRetrieveForwardPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRetrieveForwardPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRetrieveForwardPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRetrieveForwardPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForwardPolicy == nil {
				m.ForwardPolicy = &ForwardPolicy{}
			}
			if err := m.ForwardPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDomainMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDomainMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDomainMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDomainMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDomainMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDomainMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DomainMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDomainMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDomainMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDomainMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDomainMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDomainMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDomainMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainMap = append(m.DomainMap, DomainMap{})
			if err := m.DomainMap[len(m.DomainMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCooperationNetworkFeaturesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCooperationNetworkFeaturesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCooperationNetworkFeaturesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCooperationNetworkFeaturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCooperationNetworkFeaturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCooperationNetworkFeaturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationNetworkFeatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CooperationNetworkFeatures.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCooperationNetworkFeaturesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCooperationNetworkFeaturesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCooperationNetworkFeaturesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCooperationNetworkFeaturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCooperationNetworkFeaturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCooperationNetworkFeaturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationNetworkFeatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CooperationNetworkFeatures = append(m.CooperationNetworkFeatures, CooperationNetworkFeatures{})
			if err := m.CooperationNetworkFeatures[len(m.CooperationNetworkFeatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCooperationDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCooperationDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCooperationDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCooperationDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCooperationDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCooperationDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CooperationData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCooperationDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCooperationDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCooperationDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCooperationDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCooperationDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCooperationDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CooperationData = append(m.CooperationData, CooperationData{})
			if err := m.CooperationData[len(m.CooperationData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCooperationNetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCooperationNetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCooperationNetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCooperationNetworkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCooperationNetworkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCooperationNetworkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CooperationNetwork.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCooperationNetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCooperationNetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCooperationNetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCooperationNetworkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCooperationNetworkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCooperationNetworkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CooperationNetwork = append(m.CooperationNetwork, CooperationNetwork{})
			if err := m.CooperationNetwork[len(m.CooperationNetwork)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUpdatePolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUpdatePolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUpdatePolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUpdatePolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUpdatePolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUpdatePolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdatePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCooperativeDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCooperativeDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCooperativeDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCooperativeDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCooperativeDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCooperativeDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperativeDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CooperativeDomain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCooperativeDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCooperativeDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCooperativeDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCooperativeDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCooperativeDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCooperativeDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperativeDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CooperativeDomain = append(m.CooperativeDomain, CooperativeDomain{})
			if err := m.CooperativeDomain[len(m.CooperativeDomain)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDelegationPathRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDelegationPathRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDelegationPathRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDelegationPathResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDelegationPathResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDelegationPathResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationPath.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDelegationPathRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDelegationPathRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDelegationPathRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDelegationPathResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDelegationPathResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDelegationPathResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationPath = append(m.DelegationPath, DelegationPath{})
			if err := m.DelegationPath[len(m.DelegationPath)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPathRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPathRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPathRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPathResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPathResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPathResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPathRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPathRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPathRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPathResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPathResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPathResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = append(m.Path, Path{})
			if err := m.Path[len(m.Path)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimeCalculationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimeCalculationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimeCalculationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimeCalculationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimeCalculationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimeCalculationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCalculation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeCalculation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimeCalculationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimeCalculationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimeCalculationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimeCalculationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimeCalculationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimeCalculationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCalculation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeCalculation = append(m.TimeCalculation, TimeCalculation{})
			if err := m.TimeCalculation[len(m.TimeCalculation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCalculationTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCalculationTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCalculationTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCalculationTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCalculationTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCalculationTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CalculationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCalculationTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCalculationTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCalculationTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCalculationTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCalculationTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCalculationTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CalculationTime = append(m.CalculationTime, CalculationTime{})
			if err := m.CalculationTime[len(m.CalculationTime)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequestAccessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequestAccessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequestAccessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Object = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequestAccessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequestAccessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequestAccessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInterDomainAclPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInterDomainAclPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInterDomainAclPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInterDomainAclPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInterDomainAclPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInterDomainAclPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterDomainAclPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterDomainAclPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInterDomainAclPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInterDomainAclPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInterDomainAclPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInterDomainAclPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInterDomainAclPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInterDomainAclPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterDomainAclPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterDomainAclPolicy = append(m.InterDomainAclPolicy, InterDomainAclPolicy{})
			if err := m.InterDomainAclPolicy[len(m.InterDomainAclPolicy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInterDomainDclPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInterDomainDclPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInterDomainDclPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInterDomainDclPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInterDomainDclPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInterDomainDclPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterDomainDclPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterDomainDclPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInterDomainDclPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInterDomainDclPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInterDomainDclPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInterDomainDclPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInterDomainDclPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInterDomainDclPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterDomainDclPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterDomainDclPolicy = append(m.InterDomainDclPolicy, InterDomainDclPolicy{})
			if err := m.InterDomainDclPolicy[len(m.InterDomainDclPolicy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
