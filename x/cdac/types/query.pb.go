// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cdac/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetPublicKeyRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPublicKeyRequest) Reset()         { *m = QueryGetPublicKeyRequest{} }
func (m *QueryGetPublicKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPublicKeyRequest) ProtoMessage()    {}
func (*QueryGetPublicKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{2}
}
func (m *QueryGetPublicKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPublicKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPublicKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPublicKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPublicKeyRequest.Merge(m, src)
}
func (m *QueryGetPublicKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPublicKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPublicKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPublicKeyRequest proto.InternalMessageInfo

func (m *QueryGetPublicKeyRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPublicKeyResponse struct {
	PublicKey PublicKey `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey"`
}

func (m *QueryGetPublicKeyResponse) Reset()         { *m = QueryGetPublicKeyResponse{} }
func (m *QueryGetPublicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPublicKeyResponse) ProtoMessage()    {}
func (*QueryGetPublicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{3}
}
func (m *QueryGetPublicKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPublicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPublicKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPublicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPublicKeyResponse.Merge(m, src)
}
func (m *QueryGetPublicKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPublicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPublicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPublicKeyResponse proto.InternalMessageInfo

func (m *QueryGetPublicKeyResponse) GetPublicKey() PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return PublicKey{}
}

type QueryAllPublicKeyRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPublicKeyRequest) Reset()         { *m = QueryAllPublicKeyRequest{} }
func (m *QueryAllPublicKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPublicKeyRequest) ProtoMessage()    {}
func (*QueryAllPublicKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{4}
}
func (m *QueryAllPublicKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPublicKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPublicKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPublicKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPublicKeyRequest.Merge(m, src)
}
func (m *QueryAllPublicKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPublicKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPublicKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPublicKeyRequest proto.InternalMessageInfo

func (m *QueryAllPublicKeyRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPublicKeyResponse struct {
	PublicKey  []PublicKey         `protobuf:"bytes,1,rep,name=PublicKey,proto3" json:"PublicKey"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPublicKeyResponse) Reset()         { *m = QueryAllPublicKeyResponse{} }
func (m *QueryAllPublicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPublicKeyResponse) ProtoMessage()    {}
func (*QueryAllPublicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{5}
}
func (m *QueryAllPublicKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPublicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPublicKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPublicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPublicKeyResponse.Merge(m, src)
}
func (m *QueryAllPublicKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPublicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPublicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPublicKeyResponse proto.InternalMessageInfo

func (m *QueryAllPublicKeyResponse) GetPublicKey() []PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *QueryAllPublicKeyResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetValidityRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetValidityRequest) Reset()         { *m = QueryGetValidityRequest{} }
func (m *QueryGetValidityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidityRequest) ProtoMessage()    {}
func (*QueryGetValidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{6}
}
func (m *QueryGetValidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidityRequest.Merge(m, src)
}
func (m *QueryGetValidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidityRequest proto.InternalMessageInfo

func (m *QueryGetValidityRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetValidityResponse struct {
	Validity Validity `protobuf:"bytes,1,opt,name=Validity,proto3" json:"Validity"`
}

func (m *QueryGetValidityResponse) Reset()         { *m = QueryGetValidityResponse{} }
func (m *QueryGetValidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidityResponse) ProtoMessage()    {}
func (*QueryGetValidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{7}
}
func (m *QueryGetValidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidityResponse.Merge(m, src)
}
func (m *QueryGetValidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidityResponse proto.InternalMessageInfo

func (m *QueryGetValidityResponse) GetValidity() Validity {
	if m != nil {
		return m.Validity
	}
	return Validity{}
}

type QueryAllValidityRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidityRequest) Reset()         { *m = QueryAllValidityRequest{} }
func (m *QueryAllValidityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidityRequest) ProtoMessage()    {}
func (*QueryAllValidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{8}
}
func (m *QueryAllValidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidityRequest.Merge(m, src)
}
func (m *QueryAllValidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidityRequest proto.InternalMessageInfo

func (m *QueryAllValidityRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllValidityResponse struct {
	Validity   []Validity          `protobuf:"bytes,1,rep,name=Validity,proto3" json:"Validity"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidityResponse) Reset()         { *m = QueryAllValidityResponse{} }
func (m *QueryAllValidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidityResponse) ProtoMessage()    {}
func (*QueryAllValidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{9}
}
func (m *QueryAllValidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidityResponse.Merge(m, src)
}
func (m *QueryAllValidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidityResponse proto.InternalMessageInfo

func (m *QueryAllValidityResponse) GetValidity() []Validity {
	if m != nil {
		return m.Validity
	}
	return nil
}

func (m *QueryAllValidityResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCertificateRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCertificateRequest) Reset()         { *m = QueryGetCertificateRequest{} }
func (m *QueryGetCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCertificateRequest) ProtoMessage()    {}
func (*QueryGetCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{10}
}
func (m *QueryGetCertificateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCertificateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCertificateRequest.Merge(m, src)
}
func (m *QueryGetCertificateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCertificateRequest proto.InternalMessageInfo

func (m *QueryGetCertificateRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCertificateResponse struct {
	Certificate Certificate `protobuf:"bytes,1,opt,name=Certificate,proto3" json:"Certificate"`
}

func (m *QueryGetCertificateResponse) Reset()         { *m = QueryGetCertificateResponse{} }
func (m *QueryGetCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCertificateResponse) ProtoMessage()    {}
func (*QueryGetCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{11}
}
func (m *QueryGetCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCertificateResponse.Merge(m, src)
}
func (m *QueryGetCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCertificateResponse proto.InternalMessageInfo

func (m *QueryGetCertificateResponse) GetCertificate() Certificate {
	if m != nil {
		return m.Certificate
	}
	return Certificate{}
}

type QueryAllCertificateRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCertificateRequest) Reset()         { *m = QueryAllCertificateRequest{} }
func (m *QueryAllCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCertificateRequest) ProtoMessage()    {}
func (*QueryAllCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{12}
}
func (m *QueryAllCertificateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCertificateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCertificateRequest.Merge(m, src)
}
func (m *QueryAllCertificateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCertificateRequest proto.InternalMessageInfo

func (m *QueryAllCertificateRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCertificateResponse struct {
	Certificate []Certificate       `protobuf:"bytes,1,rep,name=Certificate,proto3" json:"Certificate"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCertificateResponse) Reset()         { *m = QueryAllCertificateResponse{} }
func (m *QueryAllCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCertificateResponse) ProtoMessage()    {}
func (*QueryAllCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{13}
}
func (m *QueryAllCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCertificateResponse.Merge(m, src)
}
func (m *QueryAllCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCertificateResponse proto.InternalMessageInfo

func (m *QueryAllCertificateResponse) GetCertificate() []Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *QueryAllCertificateResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetIbcConnectionRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetIbcConnectionRequest) Reset()         { *m = QueryGetIbcConnectionRequest{} }
func (m *QueryGetIbcConnectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIbcConnectionRequest) ProtoMessage()    {}
func (*QueryGetIbcConnectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{14}
}
func (m *QueryGetIbcConnectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIbcConnectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIbcConnectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIbcConnectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIbcConnectionRequest.Merge(m, src)
}
func (m *QueryGetIbcConnectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIbcConnectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIbcConnectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIbcConnectionRequest proto.InternalMessageInfo

func (m *QueryGetIbcConnectionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetIbcConnectionResponse struct {
	IbcConnection IbcConnection `protobuf:"bytes,1,opt,name=IbcConnection,proto3" json:"IbcConnection"`
}

func (m *QueryGetIbcConnectionResponse) Reset()         { *m = QueryGetIbcConnectionResponse{} }
func (m *QueryGetIbcConnectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIbcConnectionResponse) ProtoMessage()    {}
func (*QueryGetIbcConnectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{15}
}
func (m *QueryGetIbcConnectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIbcConnectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIbcConnectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIbcConnectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIbcConnectionResponse.Merge(m, src)
}
func (m *QueryGetIbcConnectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIbcConnectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIbcConnectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIbcConnectionResponse proto.InternalMessageInfo

func (m *QueryGetIbcConnectionResponse) GetIbcConnection() IbcConnection {
	if m != nil {
		return m.IbcConnection
	}
	return IbcConnection{}
}

type QueryAllIbcConnectionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIbcConnectionRequest) Reset()         { *m = QueryAllIbcConnectionRequest{} }
func (m *QueryAllIbcConnectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllIbcConnectionRequest) ProtoMessage()    {}
func (*QueryAllIbcConnectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{16}
}
func (m *QueryAllIbcConnectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIbcConnectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIbcConnectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIbcConnectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIbcConnectionRequest.Merge(m, src)
}
func (m *QueryAllIbcConnectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIbcConnectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIbcConnectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIbcConnectionRequest proto.InternalMessageInfo

func (m *QueryAllIbcConnectionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllIbcConnectionResponse struct {
	IbcConnection []IbcConnection     `protobuf:"bytes,1,rep,name=IbcConnection,proto3" json:"IbcConnection"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIbcConnectionResponse) Reset()         { *m = QueryAllIbcConnectionResponse{} }
func (m *QueryAllIbcConnectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllIbcConnectionResponse) ProtoMessage()    {}
func (*QueryAllIbcConnectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{17}
}
func (m *QueryAllIbcConnectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIbcConnectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIbcConnectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIbcConnectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIbcConnectionResponse.Merge(m, src)
}
func (m *QueryAllIbcConnectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIbcConnectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIbcConnectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIbcConnectionResponse proto.InternalMessageInfo

func (m *QueryAllIbcConnectionResponse) GetIbcConnection() []IbcConnection {
	if m != nil {
		return m.IbcConnection
	}
	return nil
}

func (m *QueryAllIbcConnectionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDomainRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetDomainRequest) Reset()         { *m = QueryGetDomainRequest{} }
func (m *QueryGetDomainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDomainRequest) ProtoMessage()    {}
func (*QueryGetDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{18}
}
func (m *QueryGetDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDomainRequest.Merge(m, src)
}
func (m *QueryGetDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDomainRequest proto.InternalMessageInfo

func (m *QueryGetDomainRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetDomainResponse struct {
	Domain Domain `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain"`
}

func (m *QueryGetDomainResponse) Reset()         { *m = QueryGetDomainResponse{} }
func (m *QueryGetDomainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDomainResponse) ProtoMessage()    {}
func (*QueryGetDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{19}
}
func (m *QueryGetDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDomainResponse.Merge(m, src)
}
func (m *QueryGetDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDomainResponse proto.InternalMessageInfo

func (m *QueryGetDomainResponse) GetDomain() Domain {
	if m != nil {
		return m.Domain
	}
	return Domain{}
}

type QueryAllDomainRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDomainRequest) Reset()         { *m = QueryAllDomainRequest{} }
func (m *QueryAllDomainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDomainRequest) ProtoMessage()    {}
func (*QueryAllDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{20}
}
func (m *QueryAllDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDomainRequest.Merge(m, src)
}
func (m *QueryAllDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDomainRequest proto.InternalMessageInfo

func (m *QueryAllDomainRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDomainResponse struct {
	Domain     []Domain            `protobuf:"bytes,1,rep,name=Domain,proto3" json:"Domain"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDomainResponse) Reset()         { *m = QueryAllDomainResponse{} }
func (m *QueryAllDomainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDomainResponse) ProtoMessage()    {}
func (*QueryAllDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{21}
}
func (m *QueryAllDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDomainResponse.Merge(m, src)
}
func (m *QueryAllDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDomainResponse proto.InternalMessageInfo

func (m *QueryAllDomainResponse) GetDomain() []Domain {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *QueryAllDomainResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAuthenticationLogRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetAuthenticationLogRequest) Reset()         { *m = QueryGetAuthenticationLogRequest{} }
func (m *QueryGetAuthenticationLogRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuthenticationLogRequest) ProtoMessage()    {}
func (*QueryGetAuthenticationLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{22}
}
func (m *QueryGetAuthenticationLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuthenticationLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuthenticationLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuthenticationLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuthenticationLogRequest.Merge(m, src)
}
func (m *QueryGetAuthenticationLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuthenticationLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuthenticationLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuthenticationLogRequest proto.InternalMessageInfo

func (m *QueryGetAuthenticationLogRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetAuthenticationLogResponse struct {
	AuthenticationLog AuthenticationLog `protobuf:"bytes,1,opt,name=AuthenticationLog,proto3" json:"AuthenticationLog"`
}

func (m *QueryGetAuthenticationLogResponse) Reset()         { *m = QueryGetAuthenticationLogResponse{} }
func (m *QueryGetAuthenticationLogResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuthenticationLogResponse) ProtoMessage()    {}
func (*QueryGetAuthenticationLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{23}
}
func (m *QueryGetAuthenticationLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuthenticationLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuthenticationLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuthenticationLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuthenticationLogResponse.Merge(m, src)
}
func (m *QueryGetAuthenticationLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuthenticationLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuthenticationLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuthenticationLogResponse proto.InternalMessageInfo

func (m *QueryGetAuthenticationLogResponse) GetAuthenticationLog() AuthenticationLog {
	if m != nil {
		return m.AuthenticationLog
	}
	return AuthenticationLog{}
}

type QueryAllAuthenticationLogRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAuthenticationLogRequest) Reset()         { *m = QueryAllAuthenticationLogRequest{} }
func (m *QueryAllAuthenticationLogRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAuthenticationLogRequest) ProtoMessage()    {}
func (*QueryAllAuthenticationLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{24}
}
func (m *QueryAllAuthenticationLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAuthenticationLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAuthenticationLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAuthenticationLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAuthenticationLogRequest.Merge(m, src)
}
func (m *QueryAllAuthenticationLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAuthenticationLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAuthenticationLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAuthenticationLogRequest proto.InternalMessageInfo

func (m *QueryAllAuthenticationLogRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAuthenticationLogResponse struct {
	AuthenticationLog []AuthenticationLog `protobuf:"bytes,1,rep,name=AuthenticationLog,proto3" json:"AuthenticationLog"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAuthenticationLogResponse) Reset()         { *m = QueryAllAuthenticationLogResponse{} }
func (m *QueryAllAuthenticationLogResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAuthenticationLogResponse) ProtoMessage()    {}
func (*QueryAllAuthenticationLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{25}
}
func (m *QueryAllAuthenticationLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAuthenticationLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAuthenticationLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAuthenticationLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAuthenticationLogResponse.Merge(m, src)
}
func (m *QueryAllAuthenticationLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAuthenticationLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAuthenticationLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAuthenticationLogResponse proto.InternalMessageInfo

func (m *QueryAllAuthenticationLogResponse) GetAuthenticationLog() []AuthenticationLog {
	if m != nil {
		return m.AuthenticationLog
	}
	return nil
}

func (m *QueryAllAuthenticationLogResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDomainCooperationRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetDomainCooperationRequest) Reset()         { *m = QueryGetDomainCooperationRequest{} }
func (m *QueryGetDomainCooperationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDomainCooperationRequest) ProtoMessage()    {}
func (*QueryGetDomainCooperationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{26}
}
func (m *QueryGetDomainCooperationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDomainCooperationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDomainCooperationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDomainCooperationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDomainCooperationRequest.Merge(m, src)
}
func (m *QueryGetDomainCooperationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDomainCooperationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDomainCooperationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDomainCooperationRequest proto.InternalMessageInfo

func (m *QueryGetDomainCooperationRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetDomainCooperationResponse struct {
	DomainCooperation DomainCooperation `protobuf:"bytes,1,opt,name=DomainCooperation,proto3" json:"DomainCooperation"`
}

func (m *QueryGetDomainCooperationResponse) Reset()         { *m = QueryGetDomainCooperationResponse{} }
func (m *QueryGetDomainCooperationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDomainCooperationResponse) ProtoMessage()    {}
func (*QueryGetDomainCooperationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{27}
}
func (m *QueryGetDomainCooperationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDomainCooperationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDomainCooperationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDomainCooperationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDomainCooperationResponse.Merge(m, src)
}
func (m *QueryGetDomainCooperationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDomainCooperationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDomainCooperationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDomainCooperationResponse proto.InternalMessageInfo

func (m *QueryGetDomainCooperationResponse) GetDomainCooperation() DomainCooperation {
	if m != nil {
		return m.DomainCooperation
	}
	return DomainCooperation{}
}

type QueryAllDomainCooperationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDomainCooperationRequest) Reset()         { *m = QueryAllDomainCooperationRequest{} }
func (m *QueryAllDomainCooperationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDomainCooperationRequest) ProtoMessage()    {}
func (*QueryAllDomainCooperationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{28}
}
func (m *QueryAllDomainCooperationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDomainCooperationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDomainCooperationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDomainCooperationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDomainCooperationRequest.Merge(m, src)
}
func (m *QueryAllDomainCooperationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDomainCooperationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDomainCooperationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDomainCooperationRequest proto.InternalMessageInfo

func (m *QueryAllDomainCooperationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDomainCooperationResponse struct {
	DomainCooperation []DomainCooperation `protobuf:"bytes,1,rep,name=DomainCooperation,proto3" json:"DomainCooperation"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDomainCooperationResponse) Reset()         { *m = QueryAllDomainCooperationResponse{} }
func (m *QueryAllDomainCooperationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDomainCooperationResponse) ProtoMessage()    {}
func (*QueryAllDomainCooperationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{29}
}
func (m *QueryAllDomainCooperationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDomainCooperationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDomainCooperationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDomainCooperationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDomainCooperationResponse.Merge(m, src)
}
func (m *QueryAllDomainCooperationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDomainCooperationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDomainCooperationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDomainCooperationResponse proto.InternalMessageInfo

func (m *QueryAllDomainCooperationResponse) GetDomainCooperation() []DomainCooperation {
	if m != nil {
		return m.DomainCooperation
	}
	return nil
}

func (m *QueryAllDomainCooperationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCooperationLogRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCooperationLogRequest) Reset()         { *m = QueryGetCooperationLogRequest{} }
func (m *QueryGetCooperationLogRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCooperationLogRequest) ProtoMessage()    {}
func (*QueryGetCooperationLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{30}
}
func (m *QueryGetCooperationLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCooperationLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCooperationLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCooperationLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCooperationLogRequest.Merge(m, src)
}
func (m *QueryGetCooperationLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCooperationLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCooperationLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCooperationLogRequest proto.InternalMessageInfo

func (m *QueryGetCooperationLogRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCooperationLogResponse struct {
	CooperationLog CooperationLog `protobuf:"bytes,1,opt,name=CooperationLog,proto3" json:"CooperationLog"`
}

func (m *QueryGetCooperationLogResponse) Reset()         { *m = QueryGetCooperationLogResponse{} }
func (m *QueryGetCooperationLogResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCooperationLogResponse) ProtoMessage()    {}
func (*QueryGetCooperationLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{31}
}
func (m *QueryGetCooperationLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCooperationLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCooperationLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCooperationLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCooperationLogResponse.Merge(m, src)
}
func (m *QueryGetCooperationLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCooperationLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCooperationLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCooperationLogResponse proto.InternalMessageInfo

func (m *QueryGetCooperationLogResponse) GetCooperationLog() CooperationLog {
	if m != nil {
		return m.CooperationLog
	}
	return CooperationLog{}
}

type QueryAllCooperationLogRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCooperationLogRequest) Reset()         { *m = QueryAllCooperationLogRequest{} }
func (m *QueryAllCooperationLogRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCooperationLogRequest) ProtoMessage()    {}
func (*QueryAllCooperationLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{32}
}
func (m *QueryAllCooperationLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCooperationLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCooperationLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCooperationLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCooperationLogRequest.Merge(m, src)
}
func (m *QueryAllCooperationLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCooperationLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCooperationLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCooperationLogRequest proto.InternalMessageInfo

func (m *QueryAllCooperationLogRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCooperationLogResponse struct {
	CooperationLog []CooperationLog    `protobuf:"bytes,1,rep,name=CooperationLog,proto3" json:"CooperationLog"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCooperationLogResponse) Reset()         { *m = QueryAllCooperationLogResponse{} }
func (m *QueryAllCooperationLogResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCooperationLogResponse) ProtoMessage()    {}
func (*QueryAllCooperationLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{33}
}
func (m *QueryAllCooperationLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCooperationLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCooperationLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCooperationLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCooperationLogResponse.Merge(m, src)
}
func (m *QueryAllCooperationLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCooperationLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCooperationLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCooperationLogResponse proto.InternalMessageInfo

func (m *QueryAllCooperationLogResponse) GetCooperationLog() []CooperationLog {
	if m != nil {
		return m.CooperationLog
	}
	return nil
}

func (m *QueryAllCooperationLogResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryCheckEstablishedCooperationByChannelRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *QueryCheckEstablishedCooperationByChannelRequest) Reset() {
	*m = QueryCheckEstablishedCooperationByChannelRequest{}
}
func (m *QueryCheckEstablishedCooperationByChannelRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryCheckEstablishedCooperationByChannelRequest) ProtoMessage() {}
func (*QueryCheckEstablishedCooperationByChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{34}
}
func (m *QueryCheckEstablishedCooperationByChannelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckEstablishedCooperationByChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckEstablishedCooperationByChannelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckEstablishedCooperationByChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckEstablishedCooperationByChannelRequest.Merge(m, src)
}
func (m *QueryCheckEstablishedCooperationByChannelRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckEstablishedCooperationByChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckEstablishedCooperationByChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckEstablishedCooperationByChannelRequest proto.InternalMessageInfo

func (m *QueryCheckEstablishedCooperationByChannelRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type QueryCheckEstablishedCooperationByChannelResponse struct {
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Found bool   `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
}

func (m *QueryCheckEstablishedCooperationByChannelResponse) Reset() {
	*m = QueryCheckEstablishedCooperationByChannelResponse{}
}
func (m *QueryCheckEstablishedCooperationByChannelResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryCheckEstablishedCooperationByChannelResponse) ProtoMessage() {}
func (*QueryCheckEstablishedCooperationByChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{35}
}
func (m *QueryCheckEstablishedCooperationByChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckEstablishedCooperationByChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckEstablishedCooperationByChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckEstablishedCooperationByChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckEstablishedCooperationByChannelResponse.Merge(m, src)
}
func (m *QueryCheckEstablishedCooperationByChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckEstablishedCooperationByChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckEstablishedCooperationByChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckEstablishedCooperationByChannelResponse proto.InternalMessageInfo

func (m *QueryCheckEstablishedCooperationByChannelResponse) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *QueryCheckEstablishedCooperationByChannelResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

type QueryEstablishedCooperationByChannelRequest struct {
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *QueryEstablishedCooperationByChannelRequest) Reset() {
	*m = QueryEstablishedCooperationByChannelRequest{}
}
func (m *QueryEstablishedCooperationByChannelRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryEstablishedCooperationByChannelRequest) ProtoMessage() {}
func (*QueryEstablishedCooperationByChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{36}
}
func (m *QueryEstablishedCooperationByChannelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstablishedCooperationByChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstablishedCooperationByChannelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstablishedCooperationByChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstablishedCooperationByChannelRequest.Merge(m, src)
}
func (m *QueryEstablishedCooperationByChannelRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstablishedCooperationByChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstablishedCooperationByChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstablishedCooperationByChannelRequest proto.InternalMessageInfo

func (m *QueryEstablishedCooperationByChannelRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type QueryEstablishedCooperationByChannelResponse struct {
	DomainCooperation *DomainCooperation `protobuf:"bytes,1,opt,name=domainCooperation,proto3" json:"domainCooperation,omitempty"`
	Found             bool               `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
}

func (m *QueryEstablishedCooperationByChannelResponse) Reset() {
	*m = QueryEstablishedCooperationByChannelResponse{}
}
func (m *QueryEstablishedCooperationByChannelResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryEstablishedCooperationByChannelResponse) ProtoMessage() {}
func (*QueryEstablishedCooperationByChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{37}
}
func (m *QueryEstablishedCooperationByChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstablishedCooperationByChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstablishedCooperationByChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstablishedCooperationByChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstablishedCooperationByChannelResponse.Merge(m, src)
}
func (m *QueryEstablishedCooperationByChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstablishedCooperationByChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstablishedCooperationByChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstablishedCooperationByChannelResponse proto.InternalMessageInfo

func (m *QueryEstablishedCooperationByChannelResponse) GetDomainCooperation() *DomainCooperation {
	if m != nil {
		return m.DomainCooperation
	}
	return nil
}

func (m *QueryEstablishedCooperationByChannelResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

type QueryGetForwardPolicyRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetForwardPolicyRequest) Reset()         { *m = QueryGetForwardPolicyRequest{} }
func (m *QueryGetForwardPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetForwardPolicyRequest) ProtoMessage()    {}
func (*QueryGetForwardPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{38}
}
func (m *QueryGetForwardPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetForwardPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetForwardPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetForwardPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetForwardPolicyRequest.Merge(m, src)
}
func (m *QueryGetForwardPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetForwardPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetForwardPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetForwardPolicyRequest proto.InternalMessageInfo

func (m *QueryGetForwardPolicyRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetForwardPolicyResponse struct {
	ForwardPolicy ForwardPolicy `protobuf:"bytes,1,opt,name=ForwardPolicy,proto3" json:"ForwardPolicy"`
}

func (m *QueryGetForwardPolicyResponse) Reset()         { *m = QueryGetForwardPolicyResponse{} }
func (m *QueryGetForwardPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetForwardPolicyResponse) ProtoMessage()    {}
func (*QueryGetForwardPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{39}
}
func (m *QueryGetForwardPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetForwardPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetForwardPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetForwardPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetForwardPolicyResponse.Merge(m, src)
}
func (m *QueryGetForwardPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetForwardPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetForwardPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetForwardPolicyResponse proto.InternalMessageInfo

func (m *QueryGetForwardPolicyResponse) GetForwardPolicy() ForwardPolicy {
	if m != nil {
		return m.ForwardPolicy
	}
	return ForwardPolicy{}
}

type QueryAllForwardPolicyRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllForwardPolicyRequest) Reset()         { *m = QueryAllForwardPolicyRequest{} }
func (m *QueryAllForwardPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllForwardPolicyRequest) ProtoMessage()    {}
func (*QueryAllForwardPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{40}
}
func (m *QueryAllForwardPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllForwardPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllForwardPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllForwardPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllForwardPolicyRequest.Merge(m, src)
}
func (m *QueryAllForwardPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllForwardPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllForwardPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllForwardPolicyRequest proto.InternalMessageInfo

func (m *QueryAllForwardPolicyRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllForwardPolicyResponse struct {
	ForwardPolicy []ForwardPolicy     `protobuf:"bytes,1,rep,name=ForwardPolicy,proto3" json:"ForwardPolicy"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllForwardPolicyResponse) Reset()         { *m = QueryAllForwardPolicyResponse{} }
func (m *QueryAllForwardPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllForwardPolicyResponse) ProtoMessage()    {}
func (*QueryAllForwardPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{41}
}
func (m *QueryAllForwardPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllForwardPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllForwardPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllForwardPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllForwardPolicyResponse.Merge(m, src)
}
func (m *QueryAllForwardPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllForwardPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllForwardPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllForwardPolicyResponse proto.InternalMessageInfo

func (m *QueryAllForwardPolicyResponse) GetForwardPolicy() []ForwardPolicy {
	if m != nil {
		return m.ForwardPolicy
	}
	return nil
}

func (m *QueryAllForwardPolicyResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRetrieveForwardPolicyRequest struct {
}

func (m *QueryRetrieveForwardPolicyRequest) Reset()         { *m = QueryRetrieveForwardPolicyRequest{} }
func (m *QueryRetrieveForwardPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRetrieveForwardPolicyRequest) ProtoMessage()    {}
func (*QueryRetrieveForwardPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{42}
}
func (m *QueryRetrieveForwardPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRetrieveForwardPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRetrieveForwardPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRetrieveForwardPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRetrieveForwardPolicyRequest.Merge(m, src)
}
func (m *QueryRetrieveForwardPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRetrieveForwardPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRetrieveForwardPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRetrieveForwardPolicyRequest proto.InternalMessageInfo

type QueryRetrieveForwardPolicyResponse struct {
	ForwardPolicy *ForwardPolicy `protobuf:"bytes,1,opt,name=forwardPolicy,proto3" json:"forwardPolicy,omitempty"`
}

func (m *QueryRetrieveForwardPolicyResponse) Reset()         { *m = QueryRetrieveForwardPolicyResponse{} }
func (m *QueryRetrieveForwardPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRetrieveForwardPolicyResponse) ProtoMessage()    {}
func (*QueryRetrieveForwardPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2600184f6c888ee5, []int{43}
}
func (m *QueryRetrieveForwardPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRetrieveForwardPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRetrieveForwardPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRetrieveForwardPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRetrieveForwardPolicyResponse.Merge(m, src)
}
func (m *QueryRetrieveForwardPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRetrieveForwardPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRetrieveForwardPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRetrieveForwardPolicyResponse proto.InternalMessageInfo

func (m *QueryRetrieveForwardPolicyResponse) GetForwardPolicy() *ForwardPolicy {
	if m != nil {
		return m.ForwardPolicy
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "crossdomain.cdac.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "crossdomain.cdac.QueryParamsResponse")
	proto.RegisterType((*QueryGetPublicKeyRequest)(nil), "crossdomain.cdac.QueryGetPublicKeyRequest")
	proto.RegisterType((*QueryGetPublicKeyResponse)(nil), "crossdomain.cdac.QueryGetPublicKeyResponse")
	proto.RegisterType((*QueryAllPublicKeyRequest)(nil), "crossdomain.cdac.QueryAllPublicKeyRequest")
	proto.RegisterType((*QueryAllPublicKeyResponse)(nil), "crossdomain.cdac.QueryAllPublicKeyResponse")
	proto.RegisterType((*QueryGetValidityRequest)(nil), "crossdomain.cdac.QueryGetValidityRequest")
	proto.RegisterType((*QueryGetValidityResponse)(nil), "crossdomain.cdac.QueryGetValidityResponse")
	proto.RegisterType((*QueryAllValidityRequest)(nil), "crossdomain.cdac.QueryAllValidityRequest")
	proto.RegisterType((*QueryAllValidityResponse)(nil), "crossdomain.cdac.QueryAllValidityResponse")
	proto.RegisterType((*QueryGetCertificateRequest)(nil), "crossdomain.cdac.QueryGetCertificateRequest")
	proto.RegisterType((*QueryGetCertificateResponse)(nil), "crossdomain.cdac.QueryGetCertificateResponse")
	proto.RegisterType((*QueryAllCertificateRequest)(nil), "crossdomain.cdac.QueryAllCertificateRequest")
	proto.RegisterType((*QueryAllCertificateResponse)(nil), "crossdomain.cdac.QueryAllCertificateResponse")
	proto.RegisterType((*QueryGetIbcConnectionRequest)(nil), "crossdomain.cdac.QueryGetIbcConnectionRequest")
	proto.RegisterType((*QueryGetIbcConnectionResponse)(nil), "crossdomain.cdac.QueryGetIbcConnectionResponse")
	proto.RegisterType((*QueryAllIbcConnectionRequest)(nil), "crossdomain.cdac.QueryAllIbcConnectionRequest")
	proto.RegisterType((*QueryAllIbcConnectionResponse)(nil), "crossdomain.cdac.QueryAllIbcConnectionResponse")
	proto.RegisterType((*QueryGetDomainRequest)(nil), "crossdomain.cdac.QueryGetDomainRequest")
	proto.RegisterType((*QueryGetDomainResponse)(nil), "crossdomain.cdac.QueryGetDomainResponse")
	proto.RegisterType((*QueryAllDomainRequest)(nil), "crossdomain.cdac.QueryAllDomainRequest")
	proto.RegisterType((*QueryAllDomainResponse)(nil), "crossdomain.cdac.QueryAllDomainResponse")
	proto.RegisterType((*QueryGetAuthenticationLogRequest)(nil), "crossdomain.cdac.QueryGetAuthenticationLogRequest")
	proto.RegisterType((*QueryGetAuthenticationLogResponse)(nil), "crossdomain.cdac.QueryGetAuthenticationLogResponse")
	proto.RegisterType((*QueryAllAuthenticationLogRequest)(nil), "crossdomain.cdac.QueryAllAuthenticationLogRequest")
	proto.RegisterType((*QueryAllAuthenticationLogResponse)(nil), "crossdomain.cdac.QueryAllAuthenticationLogResponse")
	proto.RegisterType((*QueryGetDomainCooperationRequest)(nil), "crossdomain.cdac.QueryGetDomainCooperationRequest")
	proto.RegisterType((*QueryGetDomainCooperationResponse)(nil), "crossdomain.cdac.QueryGetDomainCooperationResponse")
	proto.RegisterType((*QueryAllDomainCooperationRequest)(nil), "crossdomain.cdac.QueryAllDomainCooperationRequest")
	proto.RegisterType((*QueryAllDomainCooperationResponse)(nil), "crossdomain.cdac.QueryAllDomainCooperationResponse")
	proto.RegisterType((*QueryGetCooperationLogRequest)(nil), "crossdomain.cdac.QueryGetCooperationLogRequest")
	proto.RegisterType((*QueryGetCooperationLogResponse)(nil), "crossdomain.cdac.QueryGetCooperationLogResponse")
	proto.RegisterType((*QueryAllCooperationLogRequest)(nil), "crossdomain.cdac.QueryAllCooperationLogRequest")
	proto.RegisterType((*QueryAllCooperationLogResponse)(nil), "crossdomain.cdac.QueryAllCooperationLogResponse")
	proto.RegisterType((*QueryCheckEstablishedCooperationByChannelRequest)(nil), "crossdomain.cdac.QueryCheckEstablishedCooperationByChannelRequest")
	proto.RegisterType((*QueryCheckEstablishedCooperationByChannelResponse)(nil), "crossdomain.cdac.QueryCheckEstablishedCooperationByChannelResponse")
	proto.RegisterType((*QueryEstablishedCooperationByChannelRequest)(nil), "crossdomain.cdac.QueryEstablishedCooperationByChannelRequest")
	proto.RegisterType((*QueryEstablishedCooperationByChannelResponse)(nil), "crossdomain.cdac.QueryEstablishedCooperationByChannelResponse")
	proto.RegisterType((*QueryGetForwardPolicyRequest)(nil), "crossdomain.cdac.QueryGetForwardPolicyRequest")
	proto.RegisterType((*QueryGetForwardPolicyResponse)(nil), "crossdomain.cdac.QueryGetForwardPolicyResponse")
	proto.RegisterType((*QueryAllForwardPolicyRequest)(nil), "crossdomain.cdac.QueryAllForwardPolicyRequest")
	proto.RegisterType((*QueryAllForwardPolicyResponse)(nil), "crossdomain.cdac.QueryAllForwardPolicyResponse")
	proto.RegisterType((*QueryRetrieveForwardPolicyRequest)(nil), "crossdomain.cdac.QueryRetrieveForwardPolicyRequest")
	proto.RegisterType((*QueryRetrieveForwardPolicyResponse)(nil), "crossdomain.cdac.QueryRetrieveForwardPolicyResponse")
}

func init() { proto.RegisterFile("cdac/query.proto", fileDescriptor_2600184f6c888ee5) }

var fileDescriptor_2600184f6c888ee5 = []byte{
	// 1636 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x9a, 0x4f, 0x6f, 0xdc, 0xc4,
	0x1b, 0xc7, 0x33, 0xd9, 0xb6, 0xbf, 0x76, 0xfa, 0x6b, 0xd5, 0x4c, 0xd3, 0x92, 0xba, 0xc9, 0x26,
	0x75, 0xd3, 0xe6, 0x4f, 0xd3, 0x75, 0xb3, 0x45, 0x9c, 0xa0, 0xb0, 0x4d, 0x9b, 0x0a, 0xb5, 0xa0,
	0x74, 0x0f, 0x80, 0x10, 0xd2, 0xca, 0xeb, 0x75, 0x36, 0xa6, 0xae, 0xbd, 0xdd, 0x75, 0x5a, 0xa2,
	0x52, 0x09, 0xf5, 0x84, 0x90, 0x10, 0x48, 0x20, 0x10, 0x07, 0x84, 0x2a, 0x84, 0x38, 0x55, 0x9c,
	0x7a, 0xe0, 0x05, 0x20, 0xf5, 0x58, 0x89, 0x0b, 0x27, 0x84, 0x5a, 0x0e, 0xbc, 0x09, 0x24, 0xe4,
	0x99, 0xc7, 0x6b, 0xcf, 0xce, 0x8c, 0xd7, 0x4e, 0x9c, 0xdb, 0xee, 0xcc, 0xf3, 0x3c, 0xf3, 0xf9,
	0x3e, 0x8f, 0x33, 0x9e, 0x67, 0x36, 0xf8, 0x88, 0xd5, 0x32, 0x2d, 0xe3, 0xce, 0xa6, 0xdd, 0xdd,
	0xaa, 0x74, 0xba, 0x7e, 0xe0, 0x93, 0x23, 0x56, 0xd7, 0xef, 0xf5, 0x5a, 0xfe, 0x6d, 0xd3, 0xf1,
	0x2a, 0xe1, 0xac, 0x36, 0xde, 0xf6, 0xdb, 0x3e, 0x9d, 0x34, 0xc2, 0x4f, 0xcc, 0x4e, 0x9b, 0x6c,
	0xfb, 0x7e, 0xdb, 0xb5, 0x0d, 0xb3, 0xe3, 0x18, 0xa6, 0xe7, 0xf9, 0x81, 0x19, 0x38, 0xbe, 0xd7,
	0x83, 0xd9, 0x45, 0xcb, 0xef, 0xdd, 0xf6, 0x7b, 0x46, 0xd3, 0xec, 0xd9, 0x2c, 0xbc, 0x71, 0x77,
	0xb9, 0x69, 0x07, 0xe6, 0xb2, 0xd1, 0x31, 0xdb, 0x8e, 0x47, 0x8d, 0xc1, 0x76, 0x8c, 0x32, 0x74,
	0xcc, 0xae, 0x79, 0x3b, 0x72, 0x3f, 0xc6, 0x86, 0x36, 0x9b, 0xae, 0x63, 0x35, 0x6e, 0xd9, 0xc0,
	0xa6, 0x1d, 0xa5, 0xc3, 0x77, 0x4d, 0xd7, 0x69, 0x39, 0x41, 0x34, 0x78, 0x9c, 0x0e, 0x5a, 0x76,
	0x37, 0x70, 0xd6, 0x1d, 0xcb, 0x0c, 0x6c, 0x18, 0x3f, 0x41, 0xc7, 0x9d, 0xa6, 0xd5, 0xb0, 0x7c,
	0xcf, 0xb3, 0x2d, 0x61, 0x45, 0xd0, 0xc8, 0x86, 0xa6, 0xe8, 0x90, 0xb9, 0x19, 0x6c, 0xd8, 0x5e,
	0x10, 0x86, 0x71, 0x7c, 0xaf, 0xe1, 0xfa, 0x6d, 0x98, 0xd6, 0xd8, 0x22, 0xbe, 0xdf, 0xb1, 0xbb,
	0x83, 0x73, 0x6c, 0xa1, 0x75, 0xbf, 0x7b, 0xcf, 0xec, 0xb6, 0x1a, 0x1d, 0xdf, 0x75, 0xac, 0x2d,
	0x2e, 0x2a, 0x5b, 0xa8, 0x91, 0xf0, 0x66, 0xd3, 0xfa, 0x38, 0x26, 0x37, 0xc3, 0xdc, 0xac, 0x51,
	0xed, 0x75, 0xfb, 0xce, 0xa6, 0xdd, 0x0b, 0xf4, 0xb7, 0xf0, 0x51, 0x6e, 0xb4, 0xd7, 0xf1, 0xbd,
	0x9e, 0x4d, 0x5e, 0xc1, 0xfb, 0x58, 0x8e, 0x26, 0xd0, 0x0c, 0x9a, 0x3f, 0x58, 0x9d, 0xa8, 0x0c,
	0x56, 0xaa, 0xc2, 0x3c, 0x2e, 0xef, 0x79, 0xfa, 0xe7, 0xf4, 0x48, 0x1d, 0xac, 0xf5, 0x45, 0x3c,
	0x41, 0xc3, 0x5d, 0xb3, 0x83, 0x35, 0x9a, 0xd0, 0xeb, 0xf6, 0x16, 0x2c, 0x45, 0x0e, 0xe3, 0x51,
	0xa7, 0x45, 0xe3, 0xed, 0xa9, 0x8f, 0x3a, 0x2d, 0xfd, 0x03, 0x7c, 0x42, 0x62, 0x0b, 0x00, 0xaf,
	0xe3, 0x03, 0xfd, 0x41, 0x60, 0x38, 0x29, 0x61, 0x88, 0x4c, 0x00, 0x23, 0xf6, 0xd1, 0x9b, 0x40,
	0x52, 0x73, 0x5d, 0x81, 0x64, 0x15, 0xe3, 0xf8, 0xc1, 0x80, 0xe8, 0x67, 0x2b, 0xec, 0x29, 0xaa,
	0x84, 0x4f, 0x51, 0x85, 0x3d, 0xa4, 0xf0, 0x14, 0x55, 0xd6, 0xcc, 0xb6, 0x0d, 0xbe, 0xf5, 0x84,
	0xa7, 0xfe, 0x13, 0x02, 0x09, 0xfc, 0x22, 0x72, 0x09, 0xa5, 0xbc, 0x12, 0xc8, 0x35, 0x0e, 0x73,
	0x94, 0x62, 0xce, 0x0d, 0xc5, 0x64, 0xab, 0x73, 0x9c, 0x0b, 0xf8, 0xa5, 0x28, 0xd3, 0xef, 0xc0,
	0xf3, 0xac, 0x2a, 0xca, 0x7b, 0x71, 0x01, 0x63, 0x53, 0x10, 0xf4, 0x2a, 0xde, 0x1f, 0x8d, 0x41,
	0xd2, 0x34, 0x51, 0x4f, 0x64, 0x01, 0x72, 0xfa, 0x1e, 0xba, 0x09, 0x10, 0x35, 0xd7, 0x1d, 0x84,
	0x28, 0xaa, 0x1e, 0x8f, 0x50, 0x5c, 0xf4, 0x21, 0xf4, 0xa5, 0x7c, 0xf4, 0xc5, 0xd5, 0x62, 0x09,
	0x6b, 0x51, 0x82, 0x57, 0xe2, 0x6d, 0x44, 0x55, 0x8e, 0x16, 0x3e, 0x29, 0xb5, 0x06, 0x4d, 0x57,
	0xf1, 0xc1, 0xc4, 0x30, 0x64, 0x6e, 0x4a, 0x94, 0x95, 0x30, 0x02, 0x65, 0x49, 0x3f, 0xbd, 0x05,
	0x4c, 0x35, 0xd7, 0x95, 0x30, 0x15, 0x55, 0x9d, 0xc7, 0x08, 0xc4, 0x0c, 0x2e, 0xa3, 0x12, 0x53,
	0xda, 0x8e, 0x98, 0xe2, 0x2a, 0x55, 0xc1, 0x93, 0x51, 0xee, 0xdf, 0x6c, 0x5a, 0x2b, 0xfd, 0x7d,
	0x5d, 0x55, 0x2b, 0x17, 0x4f, 0x29, 0xec, 0x41, 0xe0, 0x75, 0x7c, 0x88, 0x9b, 0x80, 0x5c, 0x4e,
	0x8b, 0x12, 0x39, 0x33, 0x10, 0xc9, 0xfb, 0xea, 0xeb, 0x40, 0x57, 0x73, 0x5d, 0x29, 0x5d, 0x51,
	0x55, 0x7b, 0x82, 0x40, 0x96, 0xb8, 0x90, 0x5a, 0x56, 0x69, 0xbb, 0xb2, 0x8a, 0xab, 0xde, 0x1c,
	0x3e, 0x16, 0x55, 0xe3, 0x0a, 0x45, 0x50, 0x95, 0x6d, 0x0d, 0x1f, 0x1f, 0x34, 0x8c, 0x5f, 0x82,
	0x6c, 0x44, 0xfd, 0x12, 0x64, 0xf3, 0xd1, 0x4b, 0x90, 0x7d, 0xd3, 0x1b, 0xb0, 0x74, 0xcd, 0x75,
	0xf9, 0xa5, 0x8b, 0xaa, 0xc9, 0x77, 0x08, 0x98, 0x13, 0x2b, 0x48, 0x98, 0x4b, 0xd9, 0x99, 0x8b,
	0xcb, 0x7b, 0x15, 0xcf, 0x44, 0xe9, 0xac, 0x71, 0x07, 0x9c, 0x1b, 0x7e, 0x5b, 0x55, 0x82, 0x8f,
	0xf1, 0xa9, 0x14, 0x1f, 0x50, 0xf6, 0x2e, 0x1e, 0x13, 0x26, 0x21, 0x87, 0xa7, 0x45, 0x91, 0x82,
	0x29, 0xe8, 0x15, 0x63, 0xe8, 0x1f, 0x02, 0x71, 0xcd, 0x75, 0x95, 0xc4, 0x45, 0x55, 0xee, 0x37,
	0x04, 0x52, 0xe5, 0x8b, 0xa5, 0x4b, 0x2d, 0xed, 0x54, 0xea, 0xae, 0x54, 0x99, 0x3d, 0x40, 0x2b,
	0xf1, 0x79, 0x33, 0x43, 0x95, 0x25, 0x3e, 0xb1, 0x74, 0x61, 0x52, 0x5d, 0x65, 0xc1, 0x34, 0x92,
	0x2e, 0x4c, 0x24, 0xab, 0xac, 0x24, 0xde, 0x8d, 0x2a, 0xe7, 0x96, 0x5a, 0xda, 0xa9, 0xd4, 0xe2,
	0xaa, 0x6c, 0xc4, 0x6f, 0xb4, 0x44, 0xfc, 0x94, 0x3f, 0xe4, 0x0e, 0x2e, 0xab, 0x1c, 0x40, 0xf4,
	0xdb, 0xf8, 0x30, 0x3f, 0x03, 0x69, 0x9e, 0x91, 0xbc, 0xe7, 0x39, 0x3b, 0x90, 0x3b, 0xe0, 0xad,
	0xb7, 0xe3, 0xb7, 0x93, 0x1c, 0xb1, 0xa8, 0x9a, 0xfe, 0x8a, 0x40, 0x9b, 0x64, 0xa5, 0x14, 0x6d,
	0xa5, 0xed, 0x6b, 0x2b, 0xae, 0x8e, 0x37, 0xf0, 0x05, 0x8a, 0xbe, 0xb2, 0x61, 0x5b, 0xb7, 0xae,
	0xf6, 0x02, 0xb3, 0xe9, 0x3a, 0xbd, 0x0d, 0xbb, 0x95, 0x7c, 0x9a, 0xb6, 0x56, 0x36, 0x4c, 0xcf,
	0xb3, 0xdd, 0x28, 0x6f, 0x13, 0xf8, 0x7f, 0x16, 0x1b, 0xa1, 0x49, 0x3b, 0x50, 0x8f, 0xbe, 0xea,
	0x0d, 0xbc, 0x9c, 0x23, 0x1a, 0xe4, 0x66, 0x1c, 0xef, 0x75, 0xcd, 0x66, 0x3f, 0x18, 0xfb, 0x12,
	0x8e, 0xae, 0xfb, 0x9b, 0x5e, 0x8b, 0x8a, 0xdb, 0x5f, 0x67, 0x5f, 0xf4, 0x6b, 0xf8, 0x1c, 0x5d,
	0x60, 0xc7, 0xa4, 0xdf, 0x22, 0xbc, 0x94, 0x2d, 0x12, 0x50, 0xde, 0xc4, 0x63, 0xad, 0x1d, 0xec,
	0x3e, 0x75, 0xd1, 0x5b, 0x21, 0x31, 0x71, 0xb6, 0x5c, 0x65, 0xbd, 0xfc, 0x1a, 0x6d, 0xe5, 0x33,
	0x9c, 0x2d, 0x07, 0xec, 0xe3, 0x43, 0x18, 0x37, 0xa1, 0x3e, 0x5b, 0x72, 0x66, 0xd1, 0x21, 0x8c,
	0x1b, 0x4c, 0x9e, 0x2d, 0xa5, 0x74, 0xbb, 0x71, 0xb6, 0xcc, 0x2c, 0xab, 0xb4, 0x5d, 0x59, 0xc5,
	0xfd, 0x3d, 0x9d, 0x86, 0xed, 0xbd, 0x6e, 0x07, 0x5d, 0xc7, 0xbe, 0x6b, 0xcb, 0x92, 0xa4, 0xdf,
	0xc2, 0x7a, 0x9a, 0x51, 0xbf, 0xe9, 0x39, 0xb4, 0xbe, 0x8d, 0xba, 0xd5, 0x79, 0xaf, 0xea, 0xcf,
	0x93, 0x78, 0x2f, 0x5d, 0x8d, 0xdc, 0xc3, 0xfb, 0xd8, 0xcd, 0x0c, 0x99, 0x15, 0x63, 0x88, 0x17,
	0x40, 0xda, 0x99, 0x21, 0x56, 0x8c, 0x53, 0x9f, 0x79, 0xf8, 0xfb, 0xdf, 0x5f, 0x8d, 0x6a, 0x64,
	0xc2, 0x48, 0x98, 0x1b, 0x89, 0xcb, 0x34, 0xf2, 0x05, 0x4a, 0xdc, 0x77, 0x90, 0x45, 0x45, 0x58,
	0xc9, 0xc5, 0x90, 0x76, 0x2e, 0x93, 0x2d, 0x80, 0x2c, 0x50, 0x90, 0xd3, 0xe4, 0x94, 0x04, 0xa4,
	0x7f, 0x85, 0x67, 0xdc, 0x77, 0x5a, 0x0f, 0xc8, 0xe7, 0x08, 0xff, 0xbf, 0x1f, 0xa0, 0xe6, 0xba,
	0x4a, 0x28, 0xc9, 0x1d, 0x91, 0x12, 0x4a, 0x76, 0xd5, 0xa3, 0xcf, 0x52, 0xa8, 0x32, 0x99, 0x4c,
	0x83, 0x22, 0x9f, 0xa1, 0xf8, 0x0a, 0x82, 0x2c, 0xa8, 0x45, 0x0f, 0x5c, 0x8f, 0x68, 0x8b, 0x59,
	0x4c, 0x81, 0x64, 0x8e, 0x92, 0x9c, 0x22, 0xd3, 0x22, 0x49, 0x74, 0x95, 0xc9, 0x92, 0xf3, 0x29,
	0xc2, 0x07, 0x23, 0xef, 0x30, 0x37, 0x0b, 0x6a, 0xbd, 0x59, 0x79, 0x24, 0xb7, 0x2e, 0xba, 0x4e,
	0x79, 0x26, 0x89, 0xa6, 0xe6, 0x21, 0xdf, 0x20, 0xae, 0xf3, 0x27, 0x4b, 0x6a, 0xbd, 0xe2, 0xf5,
	0x84, 0x76, 0x3e, 0xa3, 0x35, 0x00, 0x2d, 0x52, 0xa0, 0x59, 0xa2, 0x8b, 0x40, 0x89, 0x6b, 0x5d,
	0x96, 0xa3, 0xaf, 0x11, 0x3e, 0x9c, 0x88, 0x11, 0xa6, 0x69, 0x49, 0xad, 0x3d, 0x07, 0x9b, 0xfc,
	0x06, 0x44, 0x3f, 0x43, 0xd9, 0xa6, 0xc9, 0x54, 0x2a, 0x1b, 0xf9, 0x01, 0x0d, 0x74, 0xdc, 0xa4,
	0xa2, 0xce, 0x81, 0xec, 0x72, 0x40, 0x33, 0x32, 0xdb, 0x03, 0xd9, 0x79, 0x4a, 0x36, 0x47, 0xce,
	0x88, 0x64, 0xfc, 0xa5, 0x37, 0x4b, 0xdc, 0xf7, 0x08, 0x1f, 0xe1, 0x02, 0x85, 0xa9, 0xab, 0xa8,
	0x93, 0x91, 0x0b, 0x52, 0x75, 0x11, 0xa1, 0xcf, 0x53, 0x48, 0x9d, 0xcc, 0x0c, 0x83, 0x24, 0x0f,
	0x51, 0xd4, 0x26, 0x93, 0x39, 0x75, 0x2a, 0xb8, 0xe6, 0x5d, 0x9b, 0x1f, 0x6e, 0x38, 0xbc, 0x8c,
	0xf0, 0x99, 0x26, 0xe9, 0x13, 0x84, 0x0f, 0x30, 0xcf, 0x30, 0x3b, 0x73, 0x6a, 0xb5, 0xd9, 0x38,
	0x84, 0xbb, 0x80, 0xb4, 0x3d, 0x9b, 0x7d, 0x26, 0xbf, 0x20, 0x49, 0xa7, 0x49, 0xaa, 0x6a, 0xa5,
	0xaa, 0x06, 0x59, 0xbb, 0x98, 0xcb, 0x07, 0x00, 0x97, 0x29, 0xe0, 0x39, 0xb2, 0x20, 0x02, 0x8a,
	0x3f, 0x8e, 0xb0, 0xa4, 0x3d, 0x46, 0x78, 0x5c, 0x08, 0x18, 0xe6, 0xaf, 0xaa, 0x4e, 0x4b, 0x6e,
	0xe8, 0xb4, 0xe6, 0x5c, 0x5f, 0xa2, 0xd0, 0x67, 0xc9, 0x6c, 0x16, 0x68, 0x9a, 0x61, 0xb1, 0x43,
	0xab, 0x0e, 0x7b, 0x96, 0xc4, 0xe6, 0x34, 0x2d, 0xc3, 0xca, 0x1e, 0x33, 0x2d, 0xc3, 0xe2, 0x0f,
	0x45, 0x71, 0x86, 0x85, 0x80, 0x43, 0x32, 0x9c, 0x1b, 0x3a, 0xad, 0x31, 0x4e, 0xcb, 0xb0, 0x08,
	0x4d, 0x7e, 0x44, 0x83, 0x6d, 0x17, 0x49, 0xd9, 0xde, 0xa4, 0x4d, 0xa2, 0x76, 0x21, 0xbb, 0x03,
	0x30, 0x56, 0x28, 0xe3, 0x3c, 0x39, 0x2b, 0xd9, 0xaa, 0xf9, 0x1f, 0xee, 0x58, 0x56, 0x1f, 0x21,
	0x3c, 0xc6, 0x87, 0x0a, 0x53, 0x9a, 0xb2, 0xc5, 0xe5, 0x03, 0x55, 0x36, 0xa5, 0x69, 0xe7, 0xa5,
	0x01, 0x50, 0xf2, 0x2f, 0xc2, 0xb3, 0x59, 0x9a, 0x3a, 0x72, 0x59, 0x41, 0x91, 0xa3, 0xbf, 0xd4,
	0x56, 0x76, 0x14, 0x03, 0xc4, 0xdd, 0xa0, 0xe2, 0x56, 0xc9, 0x15, 0x89, 0xb8, 0x30, 0x4e, 0xc3,
	0x8e, 0x03, 0x25, 0x1f, 0x9a, 0x46, 0x73, 0xab, 0x01, 0x4d, 0xa2, 0x71, 0x1f, 0x3e, 0x3c, 0x20,
	0xff, 0x20, 0x3c, 0x3d, 0x4c, 0xfa, 0x6b, 0x0a, 0xec, 0x8c, 0xaa, 0x2f, 0x6d, 0xd7, 0x1d, 0x04,
	0xaf, 0x52, 0xc1, 0x6f, 0x90, 0x4b, 0xa2, 0xe0, 0x5c, 0x52, 0xc3, 0x23, 0x04, 0xdf, 0x1c, 0xa5,
	0x1c, 0x21, 0x64, 0xed, 0x4d, 0xda, 0x11, 0x42, 0xda, 0xe9, 0xa4, 0x1d, 0x21, 0xf8, 0x9f, 0xb3,
	0xe3, 0x23, 0x04, 0x17, 0x68, 0xc8, 0x11, 0x22, 0x17, 0xa4, 0xaa, 0xdf, 0x4c, 0x3b, 0x42, 0xf0,
	0x90, 0xe4, 0x09, 0xc2, 0xc7, 0xa4, 0xad, 0x1d, 0x51, 0xed, 0x79, 0x69, 0xdd, 0xa2, 0xf6, 0x72,
	0x3e, 0xa7, 0xe1, 0xdb, 0x7b, 0x17, 0x1c, 0x1b, 0x3c, 0xf7, 0xe5, 0xea, 0xd3, 0xe7, 0x65, 0xf4,
	0xec, 0x79, 0x19, 0xfd, 0xf5, 0xbc, 0x8c, 0xbe, 0x7c, 0x51, 0x1e, 0x79, 0xf6, 0xa2, 0x3c, 0xf2,
	0xc7, 0x8b, 0xf2, 0xc8, 0xfb, 0x13, 0xc9, 0x18, 0x1f, 0xb1, 0x28, 0xc1, 0x56, 0xc7, 0xee, 0x35,
	0xf7, 0xd1, 0xff, 0x20, 0xb8, 0xf8, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xaf, 0x78, 0xad,
	0xc1, 0x21, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a PublicKey by id.
	PublicKey(ctx context.Context, in *QueryGetPublicKeyRequest, opts ...grpc.CallOption) (*QueryGetPublicKeyResponse, error)
	// Queries a list of PublicKey items.
	PublicKeyAll(ctx context.Context, in *QueryAllPublicKeyRequest, opts ...grpc.CallOption) (*QueryAllPublicKeyResponse, error)
	// Queries a Validity by id.
	Validity(ctx context.Context, in *QueryGetValidityRequest, opts ...grpc.CallOption) (*QueryGetValidityResponse, error)
	// Queries a list of Validity items.
	ValidityAll(ctx context.Context, in *QueryAllValidityRequest, opts ...grpc.CallOption) (*QueryAllValidityResponse, error)
	// Queries a Certificate by id.
	Certificate(ctx context.Context, in *QueryGetCertificateRequest, opts ...grpc.CallOption) (*QueryGetCertificateResponse, error)
	// Queries a list of Certificate items.
	CertificateAll(ctx context.Context, in *QueryAllCertificateRequest, opts ...grpc.CallOption) (*QueryAllCertificateResponse, error)
	// Queries a IbcConnection by id.
	IbcConnection(ctx context.Context, in *QueryGetIbcConnectionRequest, opts ...grpc.CallOption) (*QueryGetIbcConnectionResponse, error)
	// Queries a list of IbcConnection items.
	IbcConnectionAll(ctx context.Context, in *QueryAllIbcConnectionRequest, opts ...grpc.CallOption) (*QueryAllIbcConnectionResponse, error)
	// Queries a Domain by id.
	Domain(ctx context.Context, in *QueryGetDomainRequest, opts ...grpc.CallOption) (*QueryGetDomainResponse, error)
	// Queries a list of Domain items.
	DomainAll(ctx context.Context, in *QueryAllDomainRequest, opts ...grpc.CallOption) (*QueryAllDomainResponse, error)
	// Queries a AuthenticationLog by id.
	AuthenticationLog(ctx context.Context, in *QueryGetAuthenticationLogRequest, opts ...grpc.CallOption) (*QueryGetAuthenticationLogResponse, error)
	// Queries a list of AuthenticationLog items.
	AuthenticationLogAll(ctx context.Context, in *QueryAllAuthenticationLogRequest, opts ...grpc.CallOption) (*QueryAllAuthenticationLogResponse, error)
	// Queries a DomainCooperation by id.
	DomainCooperation(ctx context.Context, in *QueryGetDomainCooperationRequest, opts ...grpc.CallOption) (*QueryGetDomainCooperationResponse, error)
	// Queries a list of DomainCooperation items.
	DomainCooperationAll(ctx context.Context, in *QueryAllDomainCooperationRequest, opts ...grpc.CallOption) (*QueryAllDomainCooperationResponse, error)
	// Queries a CooperationLog by id.
	CooperationLog(ctx context.Context, in *QueryGetCooperationLogRequest, opts ...grpc.CallOption) (*QueryGetCooperationLogResponse, error)
	// Queries a list of CooperationLog items.
	CooperationLogAll(ctx context.Context, in *QueryAllCooperationLogRequest, opts ...grpc.CallOption) (*QueryAllCooperationLogResponse, error)
	// Queries a list of CheckEstablishedCooperationByChannel items.
	CheckEstablishedCooperationByChannel(ctx context.Context, in *QueryCheckEstablishedCooperationByChannelRequest, opts ...grpc.CallOption) (*QueryCheckEstablishedCooperationByChannelResponse, error)
	// Queries a list of EstablishedCooperationByChannel items.
	EstablishedCooperationByChannel(ctx context.Context, in *QueryEstablishedCooperationByChannelRequest, opts ...grpc.CallOption) (*QueryEstablishedCooperationByChannelResponse, error)
	// Queries a ForwardPolicy by id.
	ForwardPolicy(ctx context.Context, in *QueryGetForwardPolicyRequest, opts ...grpc.CallOption) (*QueryGetForwardPolicyResponse, error)
	// Queries a list of ForwardPolicy items.
	ForwardPolicyAll(ctx context.Context, in *QueryAllForwardPolicyRequest, opts ...grpc.CallOption) (*QueryAllForwardPolicyResponse, error)
	// Queries a list of RetrieveForwardPolicy items.
	RetrieveForwardPolicy(ctx context.Context, in *QueryRetrieveForwardPolicyRequest, opts ...grpc.CallOption) (*QueryRetrieveForwardPolicyResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PublicKey(ctx context.Context, in *QueryGetPublicKeyRequest, opts ...grpc.CallOption) (*QueryGetPublicKeyResponse, error) {
	out := new(QueryGetPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/PublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PublicKeyAll(ctx context.Context, in *QueryAllPublicKeyRequest, opts ...grpc.CallOption) (*QueryAllPublicKeyResponse, error) {
	out := new(QueryAllPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/PublicKeyAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Validity(ctx context.Context, in *QueryGetValidityRequest, opts ...grpc.CallOption) (*QueryGetValidityResponse, error) {
	out := new(QueryGetValidityResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/Validity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidityAll(ctx context.Context, in *QueryAllValidityRequest, opts ...grpc.CallOption) (*QueryAllValidityResponse, error) {
	out := new(QueryAllValidityResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/ValidityAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Certificate(ctx context.Context, in *QueryGetCertificateRequest, opts ...grpc.CallOption) (*QueryGetCertificateResponse, error) {
	out := new(QueryGetCertificateResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/Certificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CertificateAll(ctx context.Context, in *QueryAllCertificateRequest, opts ...grpc.CallOption) (*QueryAllCertificateResponse, error) {
	out := new(QueryAllCertificateResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CertificateAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IbcConnection(ctx context.Context, in *QueryGetIbcConnectionRequest, opts ...grpc.CallOption) (*QueryGetIbcConnectionResponse, error) {
	out := new(QueryGetIbcConnectionResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/IbcConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IbcConnectionAll(ctx context.Context, in *QueryAllIbcConnectionRequest, opts ...grpc.CallOption) (*QueryAllIbcConnectionResponse, error) {
	out := new(QueryAllIbcConnectionResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/IbcConnectionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Domain(ctx context.Context, in *QueryGetDomainRequest, opts ...grpc.CallOption) (*QueryGetDomainResponse, error) {
	out := new(QueryGetDomainResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/Domain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DomainAll(ctx context.Context, in *QueryAllDomainRequest, opts ...grpc.CallOption) (*QueryAllDomainResponse, error) {
	out := new(QueryAllDomainResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/DomainAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuthenticationLog(ctx context.Context, in *QueryGetAuthenticationLogRequest, opts ...grpc.CallOption) (*QueryGetAuthenticationLogResponse, error) {
	out := new(QueryGetAuthenticationLogResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/AuthenticationLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuthenticationLogAll(ctx context.Context, in *QueryAllAuthenticationLogRequest, opts ...grpc.CallOption) (*QueryAllAuthenticationLogResponse, error) {
	out := new(QueryAllAuthenticationLogResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/AuthenticationLogAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DomainCooperation(ctx context.Context, in *QueryGetDomainCooperationRequest, opts ...grpc.CallOption) (*QueryGetDomainCooperationResponse, error) {
	out := new(QueryGetDomainCooperationResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/DomainCooperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DomainCooperationAll(ctx context.Context, in *QueryAllDomainCooperationRequest, opts ...grpc.CallOption) (*QueryAllDomainCooperationResponse, error) {
	out := new(QueryAllDomainCooperationResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/DomainCooperationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CooperationLog(ctx context.Context, in *QueryGetCooperationLogRequest, opts ...grpc.CallOption) (*QueryGetCooperationLogResponse, error) {
	out := new(QueryGetCooperationLogResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CooperationLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CooperationLogAll(ctx context.Context, in *QueryAllCooperationLogRequest, opts ...grpc.CallOption) (*QueryAllCooperationLogResponse, error) {
	out := new(QueryAllCooperationLogResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CooperationLogAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckEstablishedCooperationByChannel(ctx context.Context, in *QueryCheckEstablishedCooperationByChannelRequest, opts ...grpc.CallOption) (*QueryCheckEstablishedCooperationByChannelResponse, error) {
	out := new(QueryCheckEstablishedCooperationByChannelResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/CheckEstablishedCooperationByChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstablishedCooperationByChannel(ctx context.Context, in *QueryEstablishedCooperationByChannelRequest, opts ...grpc.CallOption) (*QueryEstablishedCooperationByChannelResponse, error) {
	out := new(QueryEstablishedCooperationByChannelResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/EstablishedCooperationByChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ForwardPolicy(ctx context.Context, in *QueryGetForwardPolicyRequest, opts ...grpc.CallOption) (*QueryGetForwardPolicyResponse, error) {
	out := new(QueryGetForwardPolicyResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/ForwardPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ForwardPolicyAll(ctx context.Context, in *QueryAllForwardPolicyRequest, opts ...grpc.CallOption) (*QueryAllForwardPolicyResponse, error) {
	out := new(QueryAllForwardPolicyResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/ForwardPolicyAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RetrieveForwardPolicy(ctx context.Context, in *QueryRetrieveForwardPolicyRequest, opts ...grpc.CallOption) (*QueryRetrieveForwardPolicyResponse, error) {
	out := new(QueryRetrieveForwardPolicyResponse)
	err := c.cc.Invoke(ctx, "/crossdomain.cdac.Query/RetrieveForwardPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a PublicKey by id.
	PublicKey(context.Context, *QueryGetPublicKeyRequest) (*QueryGetPublicKeyResponse, error)
	// Queries a list of PublicKey items.
	PublicKeyAll(context.Context, *QueryAllPublicKeyRequest) (*QueryAllPublicKeyResponse, error)
	// Queries a Validity by id.
	Validity(context.Context, *QueryGetValidityRequest) (*QueryGetValidityResponse, error)
	// Queries a list of Validity items.
	ValidityAll(context.Context, *QueryAllValidityRequest) (*QueryAllValidityResponse, error)
	// Queries a Certificate by id.
	Certificate(context.Context, *QueryGetCertificateRequest) (*QueryGetCertificateResponse, error)
	// Queries a list of Certificate items.
	CertificateAll(context.Context, *QueryAllCertificateRequest) (*QueryAllCertificateResponse, error)
	// Queries a IbcConnection by id.
	IbcConnection(context.Context, *QueryGetIbcConnectionRequest) (*QueryGetIbcConnectionResponse, error)
	// Queries a list of IbcConnection items.
	IbcConnectionAll(context.Context, *QueryAllIbcConnectionRequest) (*QueryAllIbcConnectionResponse, error)
	// Queries a Domain by id.
	Domain(context.Context, *QueryGetDomainRequest) (*QueryGetDomainResponse, error)
	// Queries a list of Domain items.
	DomainAll(context.Context, *QueryAllDomainRequest) (*QueryAllDomainResponse, error)
	// Queries a AuthenticationLog by id.
	AuthenticationLog(context.Context, *QueryGetAuthenticationLogRequest) (*QueryGetAuthenticationLogResponse, error)
	// Queries a list of AuthenticationLog items.
	AuthenticationLogAll(context.Context, *QueryAllAuthenticationLogRequest) (*QueryAllAuthenticationLogResponse, error)
	// Queries a DomainCooperation by id.
	DomainCooperation(context.Context, *QueryGetDomainCooperationRequest) (*QueryGetDomainCooperationResponse, error)
	// Queries a list of DomainCooperation items.
	DomainCooperationAll(context.Context, *QueryAllDomainCooperationRequest) (*QueryAllDomainCooperationResponse, error)
	// Queries a CooperationLog by id.
	CooperationLog(context.Context, *QueryGetCooperationLogRequest) (*QueryGetCooperationLogResponse, error)
	// Queries a list of CooperationLog items.
	CooperationLogAll(context.Context, *QueryAllCooperationLogRequest) (*QueryAllCooperationLogResponse, error)
	// Queries a list of CheckEstablishedCooperationByChannel items.
	CheckEstablishedCooperationByChannel(context.Context, *QueryCheckEstablishedCooperationByChannelRequest) (*QueryCheckEstablishedCooperationByChannelResponse, error)
	// Queries a list of EstablishedCooperationByChannel items.
	EstablishedCooperationByChannel(context.Context, *QueryEstablishedCooperationByChannelRequest) (*QueryEstablishedCooperationByChannelResponse, error)
	// Queries a ForwardPolicy by id.
	ForwardPolicy(context.Context, *QueryGetForwardPolicyRequest) (*QueryGetForwardPolicyResponse, error)
	// Queries a list of ForwardPolicy items.
	ForwardPolicyAll(context.Context, *QueryAllForwardPolicyRequest) (*QueryAllForwardPolicyResponse, error)
	// Queries a list of RetrieveForwardPolicy items.
	RetrieveForwardPolicy(context.Context, *QueryRetrieveForwardPolicyRequest) (*QueryRetrieveForwardPolicyResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) PublicKey(ctx context.Context, req *QueryGetPublicKeyRequest) (*QueryGetPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKey not implemented")
}
func (*UnimplementedQueryServer) PublicKeyAll(ctx context.Context, req *QueryAllPublicKeyRequest) (*QueryAllPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKeyAll not implemented")
}
func (*UnimplementedQueryServer) Validity(ctx context.Context, req *QueryGetValidityRequest) (*QueryGetValidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validity not implemented")
}
func (*UnimplementedQueryServer) ValidityAll(ctx context.Context, req *QueryAllValidityRequest) (*QueryAllValidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidityAll not implemented")
}
func (*UnimplementedQueryServer) Certificate(ctx context.Context, req *QueryGetCertificateRequest) (*QueryGetCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Certificate not implemented")
}
func (*UnimplementedQueryServer) CertificateAll(ctx context.Context, req *QueryAllCertificateRequest) (*QueryAllCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificateAll not implemented")
}
func (*UnimplementedQueryServer) IbcConnection(ctx context.Context, req *QueryGetIbcConnectionRequest) (*QueryGetIbcConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbcConnection not implemented")
}
func (*UnimplementedQueryServer) IbcConnectionAll(ctx context.Context, req *QueryAllIbcConnectionRequest) (*QueryAllIbcConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbcConnectionAll not implemented")
}
func (*UnimplementedQueryServer) Domain(ctx context.Context, req *QueryGetDomainRequest) (*QueryGetDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Domain not implemented")
}
func (*UnimplementedQueryServer) DomainAll(ctx context.Context, req *QueryAllDomainRequest) (*QueryAllDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainAll not implemented")
}
func (*UnimplementedQueryServer) AuthenticationLog(ctx context.Context, req *QueryGetAuthenticationLogRequest) (*QueryGetAuthenticationLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticationLog not implemented")
}
func (*UnimplementedQueryServer) AuthenticationLogAll(ctx context.Context, req *QueryAllAuthenticationLogRequest) (*QueryAllAuthenticationLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticationLogAll not implemented")
}
func (*UnimplementedQueryServer) DomainCooperation(ctx context.Context, req *QueryGetDomainCooperationRequest) (*QueryGetDomainCooperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainCooperation not implemented")
}
func (*UnimplementedQueryServer) DomainCooperationAll(ctx context.Context, req *QueryAllDomainCooperationRequest) (*QueryAllDomainCooperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainCooperationAll not implemented")
}
func (*UnimplementedQueryServer) CooperationLog(ctx context.Context, req *QueryGetCooperationLogRequest) (*QueryGetCooperationLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CooperationLog not implemented")
}
func (*UnimplementedQueryServer) CooperationLogAll(ctx context.Context, req *QueryAllCooperationLogRequest) (*QueryAllCooperationLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CooperationLogAll not implemented")
}
func (*UnimplementedQueryServer) CheckEstablishedCooperationByChannel(ctx context.Context, req *QueryCheckEstablishedCooperationByChannelRequest) (*QueryCheckEstablishedCooperationByChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEstablishedCooperationByChannel not implemented")
}
func (*UnimplementedQueryServer) EstablishedCooperationByChannel(ctx context.Context, req *QueryEstablishedCooperationByChannelRequest) (*QueryEstablishedCooperationByChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstablishedCooperationByChannel not implemented")
}
func (*UnimplementedQueryServer) ForwardPolicy(ctx context.Context, req *QueryGetForwardPolicyRequest) (*QueryGetForwardPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardPolicy not implemented")
}
func (*UnimplementedQueryServer) ForwardPolicyAll(ctx context.Context, req *QueryAllForwardPolicyRequest) (*QueryAllForwardPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardPolicyAll not implemented")
}
func (*UnimplementedQueryServer) RetrieveForwardPolicy(ctx context.Context, req *QueryRetrieveForwardPolicyRequest) (*QueryRetrieveForwardPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveForwardPolicy not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/PublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PublicKey(ctx, req.(*QueryGetPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PublicKeyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PublicKeyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/PublicKeyAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PublicKeyAll(ctx, req.(*QueryAllPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Validity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/Validity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validity(ctx, req.(*QueryGetValidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidityAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllValidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidityAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/ValidityAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidityAll(ctx, req.(*QueryAllValidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Certificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Certificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/Certificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Certificate(ctx, req.(*QueryGetCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CertificateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CertificateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CertificateAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CertificateAll(ctx, req.(*QueryAllCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IbcConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIbcConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IbcConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/IbcConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IbcConnection(ctx, req.(*QueryGetIbcConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IbcConnectionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIbcConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IbcConnectionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/IbcConnectionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IbcConnectionAll(ctx, req.(*QueryAllIbcConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Domain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Domain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/Domain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Domain(ctx, req.(*QueryGetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DomainAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DomainAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/DomainAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DomainAll(ctx, req.(*QueryAllDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuthenticationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAuthenticationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuthenticationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/AuthenticationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuthenticationLog(ctx, req.(*QueryGetAuthenticationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuthenticationLogAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAuthenticationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuthenticationLogAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/AuthenticationLogAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuthenticationLogAll(ctx, req.(*QueryAllAuthenticationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DomainCooperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDomainCooperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DomainCooperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/DomainCooperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DomainCooperation(ctx, req.(*QueryGetDomainCooperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DomainCooperationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDomainCooperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DomainCooperationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/DomainCooperationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DomainCooperationAll(ctx, req.(*QueryAllDomainCooperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CooperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCooperationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CooperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CooperationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CooperationLog(ctx, req.(*QueryGetCooperationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CooperationLogAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCooperationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CooperationLogAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CooperationLogAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CooperationLogAll(ctx, req.(*QueryAllCooperationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckEstablishedCooperationByChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckEstablishedCooperationByChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckEstablishedCooperationByChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/CheckEstablishedCooperationByChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckEstablishedCooperationByChannel(ctx, req.(*QueryCheckEstablishedCooperationByChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstablishedCooperationByChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstablishedCooperationByChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstablishedCooperationByChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/EstablishedCooperationByChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstablishedCooperationByChannel(ctx, req.(*QueryEstablishedCooperationByChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ForwardPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetForwardPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ForwardPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/ForwardPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ForwardPolicy(ctx, req.(*QueryGetForwardPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ForwardPolicyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllForwardPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ForwardPolicyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/ForwardPolicyAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ForwardPolicyAll(ctx, req.(*QueryAllForwardPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RetrieveForwardPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRetrieveForwardPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RetrieveForwardPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crossdomain.cdac.Query/RetrieveForwardPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RetrieveForwardPolicy(ctx, req.(*QueryRetrieveForwardPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crossdomain.cdac.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "PublicKey",
			Handler:    _Query_PublicKey_Handler,
		},
		{
			MethodName: "PublicKeyAll",
			Handler:    _Query_PublicKeyAll_Handler,
		},
		{
			MethodName: "Validity",
			Handler:    _Query_Validity_Handler,
		},
		{
			MethodName: "ValidityAll",
			Handler:    _Query_ValidityAll_Handler,
		},
		{
			MethodName: "Certificate",
			Handler:    _Query_Certificate_Handler,
		},
		{
			MethodName: "CertificateAll",
			Handler:    _Query_CertificateAll_Handler,
		},
		{
			MethodName: "IbcConnection",
			Handler:    _Query_IbcConnection_Handler,
		},
		{
			MethodName: "IbcConnectionAll",
			Handler:    _Query_IbcConnectionAll_Handler,
		},
		{
			MethodName: "Domain",
			Handler:    _Query_Domain_Handler,
		},
		{
			MethodName: "DomainAll",
			Handler:    _Query_DomainAll_Handler,
		},
		{
			MethodName: "AuthenticationLog",
			Handler:    _Query_AuthenticationLog_Handler,
		},
		{
			MethodName: "AuthenticationLogAll",
			Handler:    _Query_AuthenticationLogAll_Handler,
		},
		{
			MethodName: "DomainCooperation",
			Handler:    _Query_DomainCooperation_Handler,
		},
		{
			MethodName: "DomainCooperationAll",
			Handler:    _Query_DomainCooperationAll_Handler,
		},
		{
			MethodName: "CooperationLog",
			Handler:    _Query_CooperationLog_Handler,
		},
		{
			MethodName: "CooperationLogAll",
			Handler:    _Query_CooperationLogAll_Handler,
		},
		{
			MethodName: "CheckEstablishedCooperationByChannel",
			Handler:    _Query_CheckEstablishedCooperationByChannel_Handler,
		},
		{
			MethodName: "EstablishedCooperationByChannel",
			Handler:    _Query_EstablishedCooperationByChannel_Handler,
		},
		{
			MethodName: "ForwardPolicy",
			Handler:    _Query_ForwardPolicy_Handler,
		},
		{
			MethodName: "ForwardPolicyAll",
			Handler:    _Query_ForwardPolicyAll_Handler,
		},
		{
			MethodName: "RetrieveForwardPolicy",
			Handler:    _Query_RetrieveForwardPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cdac/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPublicKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPublicKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPublicKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPublicKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPublicKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPublicKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PublicKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPublicKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPublicKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPublicKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPublicKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPublicKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPublicKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		for iNdEx := len(m.PublicKey) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PublicKey[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Validity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllValidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validity) > 0 {
		for iNdEx := len(m.Validity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCertificateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCertificateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCertificateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Certificate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCertificateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCertificateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCertificateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Certificate) > 0 {
		for iNdEx := len(m.Certificate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIbcConnectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIbcConnectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIbcConnectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIbcConnectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIbcConnectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIbcConnectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IbcConnection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllIbcConnectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIbcConnectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIbcConnectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIbcConnectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIbcConnectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIbcConnectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IbcConnection) > 0 {
		for iNdEx := len(m.IbcConnection) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IbcConnection[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		for iNdEx := len(m.Domain) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Domain[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAuthenticationLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuthenticationLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuthenticationLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAuthenticationLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuthenticationLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuthenticationLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AuthenticationLog.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAuthenticationLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAuthenticationLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAuthenticationLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAuthenticationLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAuthenticationLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAuthenticationLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AuthenticationLog) > 0 {
		for iNdEx := len(m.AuthenticationLog) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuthenticationLog[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDomainCooperationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDomainCooperationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDomainCooperationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDomainCooperationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDomainCooperationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDomainCooperationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DomainCooperation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDomainCooperationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDomainCooperationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDomainCooperationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDomainCooperationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDomainCooperationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDomainCooperationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DomainCooperation) > 0 {
		for iNdEx := len(m.DomainCooperation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DomainCooperation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCooperationLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCooperationLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCooperationLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCooperationLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCooperationLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCooperationLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CooperationLog.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCooperationLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCooperationLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCooperationLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCooperationLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCooperationLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCooperationLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CooperationLog) > 0 {
		for iNdEx := len(m.CooperationLog) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CooperationLog[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckEstablishedCooperationByChannelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckEstablishedCooperationByChannelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckEstablishedCooperationByChannelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckEstablishedCooperationByChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckEstablishedCooperationByChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckEstablishedCooperationByChannelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstablishedCooperationByChannelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstablishedCooperationByChannelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstablishedCooperationByChannelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstablishedCooperationByChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstablishedCooperationByChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstablishedCooperationByChannelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.DomainCooperation != nil {
		{
			size, err := m.DomainCooperation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetForwardPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetForwardPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetForwardPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetForwardPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetForwardPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetForwardPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ForwardPolicy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllForwardPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllForwardPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllForwardPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllForwardPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllForwardPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllForwardPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ForwardPolicy) > 0 {
		for iNdEx := len(m.ForwardPolicy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForwardPolicy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRetrieveForwardPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRetrieveForwardPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRetrieveForwardPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRetrieveForwardPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRetrieveForwardPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRetrieveForwardPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForwardPolicy != nil {
		{
			size, err := m.ForwardPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPublicKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPublicKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PublicKey.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPublicKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPublicKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		for _, e := range m.PublicKey {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetValidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Validity.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllValidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validity) > 0 {
		for _, e := range m.Validity {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCertificateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Certificate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCertificateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Certificate) > 0 {
		for _, e := range m.Certificate {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIbcConnectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetIbcConnectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IbcConnection.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllIbcConnectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIbcConnectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IbcConnection) > 0 {
		for _, e := range m.IbcConnection {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Domain.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domain) > 0 {
		for _, e := range m.Domain {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAuthenticationLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetAuthenticationLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AuthenticationLog.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAuthenticationLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAuthenticationLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuthenticationLog) > 0 {
		for _, e := range m.AuthenticationLog {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDomainCooperationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetDomainCooperationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DomainCooperation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDomainCooperationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDomainCooperationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DomainCooperation) > 0 {
		for _, e := range m.DomainCooperation {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCooperationLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCooperationLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CooperationLog.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCooperationLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCooperationLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CooperationLog) > 0 {
		for _, e := range m.CooperationLog {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCheckEstablishedCooperationByChannelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCheckEstablishedCooperationByChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Found {
		n += 2
	}
	return n
}

func (m *QueryEstablishedCooperationByChannelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstablishedCooperationByChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainCooperation != nil {
		l = m.DomainCooperation.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Found {
		n += 2
	}
	return n
}

func (m *QueryGetForwardPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetForwardPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ForwardPolicy.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllForwardPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllForwardPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ForwardPolicy) > 0 {
		for _, e := range m.ForwardPolicy {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRetrieveForwardPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRetrieveForwardPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardPolicy != nil {
		l = m.ForwardPolicy.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPublicKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPublicKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPublicKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPublicKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPublicKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPublicKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PublicKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPublicKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPublicKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPublicKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPublicKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPublicKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPublicKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey, PublicKey{})
			if err := m.PublicKey[len(m.PublicKey)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Validity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validity = append(m.Validity, Validity{})
			if err := m.Validity[len(m.Validity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCertificateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCertificateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCertificateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Certificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCertificateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCertificateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCertificateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificate = append(m.Certificate, Certificate{})
			if err := m.Certificate[len(m.Certificate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIbcConnectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIbcConnectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIbcConnectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIbcConnectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIbcConnectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIbcConnectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcConnection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IbcConnection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIbcConnectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIbcConnectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIbcConnectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIbcConnectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIbcConnectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIbcConnectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcConnection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcConnection = append(m.IbcConnection, IbcConnection{})
			if err := m.IbcConnection[len(m.IbcConnection)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = append(m.Domain, Domain{})
			if err := m.Domain[len(m.Domain)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuthenticationLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuthenticationLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuthenticationLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuthenticationLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuthenticationLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuthenticationLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AuthenticationLog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAuthenticationLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAuthenticationLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAuthenticationLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAuthenticationLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAuthenticationLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAuthenticationLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationLog = append(m.AuthenticationLog, AuthenticationLog{})
			if err := m.AuthenticationLog[len(m.AuthenticationLog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDomainCooperationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDomainCooperationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDomainCooperationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDomainCooperationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDomainCooperationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDomainCooperationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainCooperation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DomainCooperation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDomainCooperationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDomainCooperationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDomainCooperationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDomainCooperationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDomainCooperationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDomainCooperationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainCooperation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainCooperation = append(m.DomainCooperation, DomainCooperation{})
			if err := m.DomainCooperation[len(m.DomainCooperation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCooperationLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCooperationLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCooperationLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCooperationLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCooperationLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCooperationLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CooperationLog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCooperationLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCooperationLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCooperationLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCooperationLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCooperationLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCooperationLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CooperationLog = append(m.CooperationLog, CooperationLog{})
			if err := m.CooperationLog[len(m.CooperationLog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckEstablishedCooperationByChannelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckEstablishedCooperationByChannelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckEstablishedCooperationByChannelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckEstablishedCooperationByChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckEstablishedCooperationByChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckEstablishedCooperationByChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstablishedCooperationByChannelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstablishedCooperationByChannelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstablishedCooperationByChannelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstablishedCooperationByChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstablishedCooperationByChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstablishedCooperationByChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainCooperation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DomainCooperation == nil {
				m.DomainCooperation = &DomainCooperation{}
			}
			if err := m.DomainCooperation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetForwardPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetForwardPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetForwardPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetForwardPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetForwardPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetForwardPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ForwardPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllForwardPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllForwardPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllForwardPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllForwardPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllForwardPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllForwardPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardPolicy = append(m.ForwardPolicy, ForwardPolicy{})
			if err := m.ForwardPolicy[len(m.ForwardPolicy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRetrieveForwardPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRetrieveForwardPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRetrieveForwardPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRetrieveForwardPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRetrieveForwardPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRetrieveForwardPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForwardPolicy == nil {
				m.ForwardPolicy = &ForwardPolicy{}
			}
			if err := m.ForwardPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
